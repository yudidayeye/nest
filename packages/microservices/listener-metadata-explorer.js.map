{"version":3,"file":"listener-metadata-explorer.js","sourceRoot":"","sources":["listener-metadata-explorer.ts"],"names":[],"mappings":";;;AACA,oEAA4E;AAE5E,2CAOqB;AAErB,uEAA8D;AAsB9D,MAAa,wBAAwB;IACnC,YAA6B,eAAgC;QAAhC,oBAAe,GAAf,eAAe,CAAiB;IAAG,CAAC;IAE1D,OAAO,CAAC,QAAoB;QACjC,MAAM,iBAAiB,GAAG,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QAC1D,OAAO,IAAI,CAAC,eAAe;aACxB,iBAAiB,CAAC,iBAAiB,CAAC;aACpC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,qBAAqB,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC;aACpE,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC;IAEM,qBAAqB,CAC1B,iBAAyB,EACzB,SAAiB;QAEjB,MAAM,cAAc,GAAG,iBAAiB,CAAC,SAAS,CAAC,CAAC;QACpD,MAAM,WAAW,GAAG,OAAO,CAAC,WAAW,CACrC,oCAAwB,EACxB,cAAc,CACf,CAAC;QACF,IAAI,IAAA,0BAAW,EAAC,WAAW,CAAC,EAAE;YAC5B,OAAO;SACR;QACD,MAAM,QAAQ,GAAG,OAAO,CAAC,WAAW,CAAC,4BAAgB,EAAE,cAAc,CAAC,CAAC;QACvE,MAAM,SAAS,GAAG,OAAO,CAAC,WAAW,CAAC,8BAAkB,EAAE,cAAc,CAAC,CAAC;QAC1E,MAAM,MAAM,GAAG,OAAO,CAAC,WAAW,CAAC,mCAAuB,EAAE,cAAc,CAAC,CAAC;QAC5E,OAAO;YACL,SAAS;YACT,cAAc;YACd,QAAQ;YACR,SAAS;YACT,MAAM;YACN,cAAc,EAAE,WAAW,KAAK,qCAAc,CAAC,KAAK;SACrD,CAAC;IACJ,CAAC;IAEM,CAAC,kBAAkB,CACxB,QAAoB;QAEpB,KAAK,MAAM,WAAW,IAAI,QAAQ,EAAE;YAClC,IAAI,IAAA,yBAAU,EAAC,WAAW,CAAC,EAAE;gBAC3B,SAAS;aACV;YACD,MAAM,QAAQ,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC;YACrC,MAAM,QAAQ,GAAG,OAAO,CAAC,WAAW,CAAC,2BAAe,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;YAC1E,IAAI,IAAA,0BAAW,EAAC,QAAQ,CAAC,EAAE;gBACzB,SAAS;aACV;YACD,MAAM,QAAQ,GAAG,OAAO,CAAC,WAAW,CAClC,yCAA6B,EAC7B,QAAQ,EACR,QAAQ,CACT,CAAC;YACF,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC;SAC9B;IACH,CAAC;CACF;AAxDD,4DAwDC","sourcesContent":["import { Controller } from '@nestjs/common/interfaces/controllers/controller.interface';\r\nimport { isFunction, isUndefined } from '@nestjs/common/utils/shared.utils';\r\nimport { MetadataScanner } from '@nestjs/core/metadata-scanner';\r\nimport {\r\n  CLIENT_CONFIGURATION_METADATA,\r\n  CLIENT_METADATA,\r\n  PATTERN_EXTRAS_METADATA,\r\n  PATTERN_HANDLER_METADATA,\r\n  PATTERN_METADATA,\r\n  TRANSPORT_METADATA,\r\n} from './constants';\r\nimport { Transport } from './enums';\r\nimport { PatternHandler } from './enums/pattern-handler.enum';\r\nimport { ClientOptions, PatternMetadata } from './interfaces';\r\n\r\nexport interface ClientProperties {\r\n  property: string;\r\n  metadata: ClientOptions;\r\n}\r\n\r\nexport interface EventOrMessageListenerDefinition {\r\n  patterns: PatternMetadata[];\r\n  methodKey: string;\r\n  isEventHandler: boolean;\r\n  targetCallback: (...args: any[]) => any;\r\n  transport?: Transport;\r\n  extras?: Record<string, any>;\r\n}\r\n\r\nexport interface MessageRequestProperties {\r\n  requestPattern: PatternMetadata;\r\n  replyPattern: PatternMetadata;\r\n}\r\n\r\nexport class ListenerMetadataExplorer {\r\n  constructor(private readonly metadataScanner: MetadataScanner) {}\r\n\r\n  public explore(instance: Controller): EventOrMessageListenerDefinition[] {\r\n    const instancePrototype = Object.getPrototypeOf(instance);\r\n    return this.metadataScanner\r\n      .getAllMethodNames(instancePrototype)\r\n      .map(method => this.exploreMethodMetadata(instancePrototype, method))\r\n      .filter(metadata => metadata);\r\n  }\r\n\r\n  public exploreMethodMetadata(\r\n    instancePrototype: object,\r\n    methodKey: string,\r\n  ): EventOrMessageListenerDefinition {\r\n    const targetCallback = instancePrototype[methodKey];\r\n    const handlerType = Reflect.getMetadata(\r\n      PATTERN_HANDLER_METADATA,\r\n      targetCallback,\r\n    );\r\n    if (isUndefined(handlerType)) {\r\n      return;\r\n    }\r\n    const patterns = Reflect.getMetadata(PATTERN_METADATA, targetCallback);\r\n    const transport = Reflect.getMetadata(TRANSPORT_METADATA, targetCallback);\r\n    const extras = Reflect.getMetadata(PATTERN_EXTRAS_METADATA, targetCallback);\r\n    return {\r\n      methodKey,\r\n      targetCallback,\r\n      patterns,\r\n      transport,\r\n      extras,\r\n      isEventHandler: handlerType === PatternHandler.EVENT,\r\n    };\r\n  }\r\n\r\n  public *scanForClientHooks(\r\n    instance: Controller,\r\n  ): IterableIterator<ClientProperties> {\r\n    for (const propertyKey in instance) {\r\n      if (isFunction(propertyKey)) {\r\n        continue;\r\n      }\r\n      const property = String(propertyKey);\r\n      const isClient = Reflect.getMetadata(CLIENT_METADATA, instance, property);\r\n      if (isUndefined(isClient)) {\r\n        continue;\r\n      }\r\n      const metadata = Reflect.getMetadata(\r\n        CLIENT_CONFIGURATION_METADATA,\r\n        instance,\r\n        property,\r\n      );\r\n      yield { property, metadata };\r\n    }\r\n  }\r\n}\r\n"]}