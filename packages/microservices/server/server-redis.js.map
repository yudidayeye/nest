{"version":3,"file":"server-redis.js","sourceRoot":"","sources":["server-redis.ts"],"names":[],"mappings":"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","sourcesContent":["import { isUndefined } from '@nestjs/common/utils/shared.utils';\r\nimport {\r\n  ERROR_EVENT,\r\n  MESSAGE_EVENT,\r\n  NO_MESSAGE_HANDLER,\r\n  REDIS_DEFAULT_HOST,\r\n  REDIS_DEFAULT_PORT,\r\n} from '../constants';\r\nimport { RedisContext } from '../ctx-host';\r\nimport { Transport } from '../enums';\r\nimport {\r\n  CustomTransportStrategy,\r\n  IncomingRequest,\r\n  RedisOptions,\r\n} from '../interfaces';\r\nimport { Server } from './server';\r\n\r\ntype Redis = any;\r\n\r\nlet redisPackage = {} as any;\r\n\r\nexport class ServerRedis extends Server implements CustomTransportStrategy {\r\n  public readonly transportId = Transport.REDIS;\r\n\r\n  private subClient: Redis;\r\n  private pubClient: Redis;\r\n  private isExplicitlyTerminated = false;\r\n\r\n  constructor(private readonly options: RedisOptions['options']) {\r\n    super();\r\n\r\n    redisPackage = this.loadPackage('ioredis', ServerRedis.name, () =>\r\n      require('ioredis'),\r\n    );\r\n\r\n    this.initializeSerializer(options);\r\n    this.initializeDeserializer(options);\r\n  }\r\n\r\n  public listen(\r\n    callback: (err?: unknown, ...optionalParams: unknown[]) => void,\r\n  ) {\r\n    try {\r\n      this.subClient = this.createRedisClient();\r\n      this.pubClient = this.createRedisClient();\r\n\r\n      this.handleError(this.pubClient);\r\n      this.handleError(this.subClient);\r\n\r\n      this.start(callback);\r\n    } catch (err) {\r\n      callback(err);\r\n    }\r\n  }\r\n\r\n  public start(callback?: () => void) {\r\n    Promise.all([this.subClient.connect(), this.pubClient.connect()])\r\n      .then(() => {\r\n        this.bindEvents(this.subClient, this.pubClient);\r\n        callback();\r\n      })\r\n      .catch(callback);\r\n  }\r\n\r\n  public bindEvents(subClient: Redis, pubClient: Redis) {\r\n    subClient.on(\r\n      this.options.wildcards ? 'pmessage' : MESSAGE_EVENT,\r\n      this.getMessageHandler(pubClient).bind(this),\r\n    );\r\n    const subscribePatterns = [...this.messageHandlers.keys()];\r\n    subscribePatterns.forEach(pattern => {\r\n      const { isEventHandler } = this.messageHandlers.get(pattern);\r\n\r\n      const channel = isEventHandler\r\n        ? pattern\r\n        : this.getRequestPattern(pattern);\r\n\r\n      if (this.options.wildcards) {\r\n        subClient.psubscribe(channel);\r\n      } else {\r\n        subClient.subscribe(channel);\r\n      }\r\n    });\r\n  }\r\n\r\n  public close() {\r\n    this.isExplicitlyTerminated = true;\r\n    this.pubClient && this.pubClient.quit();\r\n    this.subClient && this.subClient.quit();\r\n  }\r\n\r\n  public createRedisClient(): Redis {\r\n    return new redisPackage({\r\n      port: REDIS_DEFAULT_PORT,\r\n      host: REDIS_DEFAULT_HOST,\r\n      ...this.getClientOptions(),\r\n      lazyConnect: true,\r\n    });\r\n  }\r\n\r\n  public getMessageHandler(pub: Redis) {\r\n    return this.options.wildcards\r\n      ? (channel: string, pattern: string, buffer: string | any) =>\r\n          this.handleMessage(channel, buffer, pub, pattern)\r\n      : (channel: string, buffer: string | any) =>\r\n          this.handleMessage(channel, buffer, pub, channel);\r\n  }\r\n\r\n  public async handleMessage(\r\n    channel: string,\r\n    buffer: string | any,\r\n    pub: Redis,\r\n    pattern: string,\r\n  ) {\r\n    const rawMessage = this.parseMessage(buffer);\r\n    const packet = await this.deserializer.deserialize(rawMessage, { channel });\r\n    const redisCtx = new RedisContext([pattern]);\r\n\r\n    if (isUndefined((packet as IncomingRequest).id)) {\r\n      return this.handleEvent(channel, packet, redisCtx);\r\n    }\r\n    const publish = this.getPublisher(\r\n      pub,\r\n      channel,\r\n      (packet as IncomingRequest).id,\r\n    );\r\n    const handler = this.getHandlerByPattern(channel);\r\n\r\n    if (!handler) {\r\n      const status = 'error';\r\n      const noHandlerPacket = {\r\n        id: (packet as IncomingRequest).id,\r\n        status,\r\n        err: NO_MESSAGE_HANDLER,\r\n      };\r\n      return publish(noHandlerPacket);\r\n    }\r\n    const response$ = this.transformToObservable(\r\n      await handler(packet.data, redisCtx),\r\n    );\r\n    response$ && this.send(response$, publish);\r\n  }\r\n\r\n  public getPublisher(pub: Redis, pattern: any, id: string) {\r\n    return (response: any) => {\r\n      Object.assign(response, { id });\r\n      const outgoingResponse = this.serializer.serialize(response);\r\n\r\n      return pub.publish(\r\n        this.getReplyPattern(pattern),\r\n        JSON.stringify(outgoingResponse),\r\n      );\r\n    };\r\n  }\r\n\r\n  public parseMessage(content: any): Record<string, any> {\r\n    try {\r\n      return JSON.parse(content);\r\n    } catch (e) {\r\n      return content;\r\n    }\r\n  }\r\n\r\n  public getRequestPattern(pattern: string): string {\r\n    return pattern;\r\n  }\r\n\r\n  public getReplyPattern(pattern: string): string {\r\n    return `${pattern}.reply`;\r\n  }\r\n\r\n  public handleError(stream: any) {\r\n    stream.on(ERROR_EVENT, (err: any) => this.logger.error(err));\r\n  }\r\n\r\n  public getClientOptions(): Partial<RedisOptions['options']> {\r\n    const retryStrategy = (times: number) => this.createRetryStrategy(times);\r\n\r\n    return {\r\n      ...(this.options || {}),\r\n      retryStrategy,\r\n    };\r\n  }\r\n\r\n  public createRetryStrategy(times: number): undefined | number | void {\r\n    if (this.isExplicitlyTerminated) {\r\n      return undefined;\r\n    }\r\n    if (\r\n      !this.getOptionsProp(this.options, 'retryAttempts') ||\r\n      times > this.getOptionsProp(this.options, 'retryAttempts')\r\n    ) {\r\n      this.logger.error(`Retry time exhausted`);\r\n      return;\r\n    }\r\n    return this.getOptionsProp(this.options, 'retryDelay') || 0;\r\n  }\r\n}\r\n"]}