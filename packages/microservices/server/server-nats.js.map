{"version":3,"file":"server-nats.js","sourceRoot":"","sources":["server-nats.ts"],"names":[],"mappings":"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","sourcesContent":["import { isUndefined, isObject } from '@nestjs/common/utils/shared.utils';\r\nimport { NATS_DEFAULT_URL, NO_MESSAGE_HANDLER } from '../constants';\r\nimport { NatsContext } from '../ctx-host/nats.context';\r\nimport { NatsRequestJSONDeserializer } from '../deserializers/nats-request-json.deserializer';\r\nimport { Transport } from '../enums';\r\nimport { Client, NatsMsg } from '../external/nats-client.interface';\r\nimport { CustomTransportStrategy } from '../interfaces';\r\nimport { NatsOptions } from '../interfaces/microservice-configuration.interface';\r\nimport { IncomingRequest } from '../interfaces/packet.interface';\r\nimport { NatsRecord } from '../record-builders';\r\nimport { NatsRecordSerializer } from '../serializers/nats-record.serializer';\r\nimport { Server } from './server';\r\n\r\nlet natsPackage = {} as any;\r\n\r\nexport class ServerNats extends Server implements CustomTransportStrategy {\r\n  public readonly transportId = Transport.NATS;\r\n\r\n  private natsClient: Client;\r\n\r\n  constructor(private readonly options: NatsOptions['options']) {\r\n    super();\r\n\r\n    natsPackage = this.loadPackage('nats', ServerNats.name, () =>\r\n      require('nats'),\r\n    );\r\n\r\n    this.initializeSerializer(options);\r\n    this.initializeDeserializer(options);\r\n  }\r\n\r\n  public async listen(\r\n    callback: (err?: unknown, ...optionalParams: unknown[]) => void,\r\n  ) {\r\n    try {\r\n      this.natsClient = await this.createNatsClient();\r\n      this.handleStatusUpdates(this.natsClient);\r\n      this.start(callback);\r\n    } catch (err) {\r\n      callback(err);\r\n    }\r\n  }\r\n\r\n  public start(\r\n    callback: (err?: unknown, ...optionalParams: unknown[]) => void,\r\n  ) {\r\n    this.bindEvents(this.natsClient);\r\n    callback();\r\n  }\r\n\r\n  public bindEvents(client: Client) {\r\n    const queue = this.getOptionsProp(this.options, 'queue');\r\n    const subscribe = (channel: string) =>\r\n      client.subscribe(channel, {\r\n        queue,\r\n        callback: this.getMessageHandler(channel).bind(this),\r\n      });\r\n\r\n    const registeredPatterns = [...this.messageHandlers.keys()];\r\n    registeredPatterns.forEach(channel => subscribe(channel));\r\n  }\r\n\r\n  public async close() {\r\n    await this.natsClient?.close();\r\n    this.natsClient = null;\r\n  }\r\n\r\n  public createNatsClient(): Promise<Client> {\r\n    const options = this.options || ({} as NatsOptions);\r\n    return natsPackage.connect({\r\n      servers: NATS_DEFAULT_URL,\r\n      ...options,\r\n    });\r\n  }\r\n\r\n  public getMessageHandler(channel: string): Function {\r\n    return async (error: object | undefined, message: NatsMsg) => {\r\n      if (error) {\r\n        return this.logger.error(error);\r\n      }\r\n      return this.handleMessage(channel, message);\r\n    };\r\n  }\r\n\r\n  public async handleMessage(channel: string, natsMsg: NatsMsg) {\r\n    const callerSubject = natsMsg.subject;\r\n    const rawMessage = natsMsg.data;\r\n    const replyTo = natsMsg.reply;\r\n\r\n    const natsCtx = new NatsContext([callerSubject, natsMsg.headers]);\r\n    const message = await this.deserializer.deserialize(rawMessage, {\r\n      channel,\r\n      replyTo,\r\n    });\r\n    if (isUndefined((message as IncomingRequest).id)) {\r\n      return this.handleEvent(channel, message, natsCtx);\r\n    }\r\n    const publish = this.getPublisher(natsMsg, (message as IncomingRequest).id);\r\n    const handler = this.getHandlerByPattern(channel);\r\n    if (!handler) {\r\n      const status = 'error';\r\n      const noHandlerPacket = {\r\n        id: (message as IncomingRequest).id,\r\n        status,\r\n        err: NO_MESSAGE_HANDLER,\r\n      };\r\n      return publish(noHandlerPacket);\r\n    }\r\n    const response$ = this.transformToObservable(\r\n      await handler(message.data, natsCtx),\r\n    );\r\n    response$ && this.send(response$, publish);\r\n  }\r\n\r\n  public getPublisher(natsMsg: NatsMsg, id: string) {\r\n    if (natsMsg.reply) {\r\n      return (response: any) => {\r\n        Object.assign(response, { id });\r\n        const outgoingResponse: NatsRecord =\r\n          this.serializer.serialize(response);\r\n        return natsMsg.respond(outgoingResponse.data, {\r\n          headers: outgoingResponse.headers,\r\n        });\r\n      };\r\n    }\r\n\r\n    // In case the \"reply\" topic is not provided, there's no need for a reply.\r\n    // Method returns a noop function instead\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    return () => {};\r\n  }\r\n\r\n  public async handleStatusUpdates(client: Client) {\r\n    for await (const status of client.status()) {\r\n      const data =\r\n        status.data && isObject(status.data)\r\n          ? JSON.stringify(status.data)\r\n          : status.data;\r\n\r\n      switch (status.type) {\r\n        case 'error':\r\n        case 'disconnect':\r\n          this.logger.error(\r\n            `NatsError: type: \"${status.type}\", data: \"${data}\".`,\r\n          );\r\n          break;\r\n\r\n        case 'pingTimer':\r\n          if (this.options.debug) {\r\n            this.logger.debug(\r\n              `NatsStatus: type: \"${status.type}\", data: \"${data}\".`,\r\n            );\r\n          }\r\n          break;\r\n\r\n        default:\r\n          this.logger.log(\r\n            `NatsStatus: type: \"${status.type}\", data: \"${data}\".`,\r\n          );\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  protected initializeSerializer(options: NatsOptions['options']) {\r\n    this.serializer = options?.serializer ?? new NatsRecordSerializer();\r\n  }\r\n\r\n  protected initializeDeserializer(options: NatsOptions['options']) {\r\n    this.deserializer =\r\n      options?.deserializer ?? new NatsRequestJSONDeserializer();\r\n  }\r\n}\r\n"]}