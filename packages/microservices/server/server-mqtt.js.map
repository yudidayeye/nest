{"version":3,"file":"server-mqtt.js","sourceRoot":"","sources":["server-mqtt.ts"],"names":[],"mappings":"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","sourcesContent":["import { isUndefined } from '@nestjs/common/utils/shared.utils';\r\nimport {\r\n  CONNECT_EVENT,\r\n  ERROR_EVENT,\r\n  MESSAGE_EVENT,\r\n  MQTT_DEFAULT_URL,\r\n  MQTT_SEPARATOR,\r\n  MQTT_WILDCARD_ALL,\r\n  MQTT_WILDCARD_SINGLE,\r\n  NO_MESSAGE_HANDLER,\r\n} from '../constants';\r\nimport { MqttContext } from '../ctx-host/mqtt.context';\r\nimport { Transport } from '../enums';\r\nimport { MqttClient } from '../external/mqtt-client.interface';\r\nimport {\r\n  CustomTransportStrategy,\r\n  IncomingRequest,\r\n  MessageHandler,\r\n  PacketId,\r\n  ReadPacket,\r\n} from '../interfaces';\r\nimport { MqttOptions } from '../interfaces/microservice-configuration.interface';\r\nimport { MqttRecord } from '../record-builders/mqtt.record-builder';\r\nimport { MqttRecordSerializer } from '../serializers/mqtt-record.serializer';\r\nimport { Server } from './server';\r\n\r\nlet mqttPackage: any = {};\r\n\r\nexport class ServerMqtt extends Server implements CustomTransportStrategy {\r\n  public readonly transportId = Transport.MQTT;\r\n\r\n  protected mqttClient: MqttClient;\r\n\r\n  private readonly url: string;\r\n\r\n  constructor(private readonly options: MqttOptions['options']) {\r\n    super();\r\n    this.url = this.getOptionsProp(options, 'url') || MQTT_DEFAULT_URL;\r\n\r\n    mqttPackage = this.loadPackage('mqtt', ServerMqtt.name, () =>\r\n      require('mqtt'),\r\n    );\r\n\r\n    this.initializeSerializer(options);\r\n    this.initializeDeserializer(options);\r\n  }\r\n\r\n  public async listen(\r\n    callback: (err?: unknown, ...optionalParams: unknown[]) => void,\r\n  ) {\r\n    try {\r\n      this.mqttClient = this.createMqttClient();\r\n      this.start(callback);\r\n    } catch (err) {\r\n      callback(err);\r\n    }\r\n  }\r\n\r\n  public start(\r\n    callback: (err?: unknown, ...optionalParams: unknown[]) => void,\r\n  ) {\r\n    this.handleError(this.mqttClient);\r\n    this.bindEvents(this.mqttClient);\r\n\r\n    this.mqttClient.on(CONNECT_EVENT, () => callback());\r\n  }\r\n\r\n  public bindEvents(mqttClient: MqttClient) {\r\n    mqttClient.on(MESSAGE_EVENT, this.getMessageHandler(mqttClient).bind(this));\r\n\r\n    const registeredPatterns = [...this.messageHandlers.keys()];\r\n    registeredPatterns.forEach(pattern => {\r\n      const { isEventHandler } = this.messageHandlers.get(pattern);\r\n      mqttClient.subscribe(\r\n        isEventHandler ? pattern : this.getRequestPattern(pattern),\r\n        this.getOptionsProp(this.options, 'subscribeOptions'),\r\n      );\r\n    });\r\n  }\r\n\r\n  public close() {\r\n    this.mqttClient && this.mqttClient.end();\r\n  }\r\n\r\n  public createMqttClient(): MqttClient {\r\n    return mqttPackage.connect(this.url, this.options as MqttOptions);\r\n  }\r\n\r\n  public getMessageHandler(pub: MqttClient): Function {\r\n    return async (\r\n      channel: string,\r\n      buffer: Buffer,\r\n      originalPacket?: Record<string, any>,\r\n    ) => this.handleMessage(channel, buffer, pub, originalPacket);\r\n  }\r\n\r\n  public async handleMessage(\r\n    channel: string,\r\n    buffer: Buffer,\r\n    pub: MqttClient,\r\n    originalPacket?: Record<string, any>,\r\n  ): Promise<any> {\r\n    const rawPacket = this.parseMessage(buffer.toString());\r\n    const packet = await this.deserializer.deserialize(rawPacket, { channel });\r\n    const mqttContext = new MqttContext([channel, originalPacket]);\r\n    if (isUndefined((packet as IncomingRequest).id)) {\r\n      return this.handleEvent(channel, packet, mqttContext);\r\n    }\r\n    const publish = this.getPublisher(\r\n      pub,\r\n      channel,\r\n      (packet as IncomingRequest).id,\r\n    );\r\n    const handler = this.getHandlerByPattern(channel);\r\n\r\n    if (!handler) {\r\n      const status = 'error';\r\n      const noHandlerPacket = {\r\n        id: (packet as IncomingRequest).id,\r\n        status,\r\n        err: NO_MESSAGE_HANDLER,\r\n      };\r\n      return publish(noHandlerPacket);\r\n    }\r\n    const response$ = this.transformToObservable(\r\n      await handler(packet.data, mqttContext),\r\n    );\r\n    response$ && this.send(response$, publish);\r\n  }\r\n\r\n  public getPublisher(client: MqttClient, pattern: any, id: string): any {\r\n    return (response: any) => {\r\n      Object.assign(response, { id });\r\n      const outgoingResponse: Partial<MqttRecord> =\r\n        this.serializer.serialize(response);\r\n      const options = outgoingResponse.options;\r\n      delete outgoingResponse.options;\r\n\r\n      return client.publish(\r\n        this.getReplyPattern(pattern),\r\n        JSON.stringify(outgoingResponse),\r\n        options,\r\n      );\r\n    };\r\n  }\r\n\r\n  public parseMessage(content: any): ReadPacket & PacketId {\r\n    try {\r\n      return JSON.parse(content);\r\n    } catch (e) {\r\n      return content;\r\n    }\r\n  }\r\n\r\n  public matchMqttPattern(pattern: string, topic: string) {\r\n    const patternSegments = pattern.split(MQTT_SEPARATOR);\r\n    const topicSegments = topic.split(MQTT_SEPARATOR);\r\n\r\n    const patternSegmentsLength = patternSegments.length;\r\n    const topicSegmentsLength = topicSegments.length;\r\n    const lastIndex = patternSegmentsLength - 1;\r\n\r\n    for (let i = 0; i < patternSegmentsLength; i++) {\r\n      const currentPattern = patternSegments[i];\r\n      const patternChar = currentPattern[0];\r\n      const currentTopic = topicSegments[i];\r\n\r\n      if (!currentTopic && !currentPattern) {\r\n        continue;\r\n      }\r\n      if (!currentTopic && currentPattern !== MQTT_WILDCARD_ALL) {\r\n        return false;\r\n      }\r\n      if (patternChar === MQTT_WILDCARD_ALL) {\r\n        return i === lastIndex;\r\n      }\r\n      if (\r\n        patternChar !== MQTT_WILDCARD_SINGLE &&\r\n        currentPattern !== currentTopic\r\n      ) {\r\n        return false;\r\n      }\r\n    }\r\n    return patternSegmentsLength === topicSegmentsLength;\r\n  }\r\n\r\n  public getHandlerByPattern(pattern: string): MessageHandler | null {\r\n    const route = this.getRouteFromPattern(pattern);\r\n    if (this.messageHandlers.has(route)) {\r\n      return this.messageHandlers.get(route) || null;\r\n    }\r\n\r\n    for (const [key, value] of this.messageHandlers) {\r\n      if (\r\n        !key.includes(MQTT_WILDCARD_SINGLE) &&\r\n        !key.includes(MQTT_WILDCARD_ALL)\r\n      ) {\r\n        continue;\r\n      }\r\n      const keyWithoutSharedPrefix = this.removeHandlerKeySharedPrefix(key);\r\n      if (this.matchMqttPattern(keyWithoutSharedPrefix, route)) {\r\n        return value;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public removeHandlerKeySharedPrefix(handlerKey: string) {\r\n    return handlerKey && handlerKey.startsWith('$share')\r\n      ? handlerKey.split('/').slice(2).join('/')\r\n      : handlerKey;\r\n  }\r\n\r\n  public getRequestPattern(pattern: string): string {\r\n    return pattern;\r\n  }\r\n\r\n  public getReplyPattern(pattern: string): string {\r\n    return `${pattern}/reply`;\r\n  }\r\n\r\n  public handleError(stream: any) {\r\n    stream.on(ERROR_EVENT, (err: any) => this.logger.error(err));\r\n  }\r\n\r\n  protected initializeSerializer(options: MqttOptions['options']) {\r\n    this.serializer = options?.serializer ?? new MqttRecordSerializer();\r\n  }\r\n}\r\n"]}