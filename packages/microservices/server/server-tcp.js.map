{"version":3,"file":"server-tcp.js","sourceRoot":"","sources":["server-tcp.ts"],"names":[],"mappings":"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","sourcesContent":["import { Type } from '@nestjs/common';\r\nimport { isString, isUndefined } from '@nestjs/common/utils/shared.utils';\r\nimport * as net from 'net';\r\nimport { Server as NetSocket, Socket } from 'net';\r\nimport {\r\n  CLOSE_EVENT,\r\n  EADDRINUSE,\r\n  ECONNREFUSED,\r\n  ERROR_EVENT,\r\n  MESSAGE_EVENT,\r\n  NO_MESSAGE_HANDLER,\r\n  TCP_DEFAULT_HOST,\r\n  TCP_DEFAULT_PORT,\r\n} from '../constants';\r\nimport { TcpContext } from '../ctx-host/tcp.context';\r\nimport { Transport } from '../enums';\r\nimport { JsonSocket, TcpSocket } from '../helpers';\r\nimport { createServer as tlsCreateServer } from 'tls';\r\nimport {\r\n  CustomTransportStrategy,\r\n  IncomingRequest,\r\n  PacketId,\r\n  ReadPacket,\r\n  WritePacket,\r\n} from '../interfaces';\r\nimport { TcpOptions } from '../interfaces/microservice-configuration.interface';\r\nimport { Server } from './server';\r\n\r\nexport class ServerTCP extends Server implements CustomTransportStrategy {\r\n  public readonly transportId = Transport.TCP;\r\n\r\n  protected server: NetSocket;\r\n\r\n  private readonly port: number;\r\n  private readonly host: string;\r\n  private readonly socketClass: Type<TcpSocket>;\r\n  private isExplicitlyTerminated = false;\r\n  private retryAttemptsCount = 0;\r\n  private tlsOptions?;\r\n\r\n  constructor(private readonly options: TcpOptions['options']) {\r\n    super();\r\n    this.port = this.getOptionsProp(options, 'port') || TCP_DEFAULT_PORT;\r\n    this.host = this.getOptionsProp(options, 'host') || TCP_DEFAULT_HOST;\r\n    this.socketClass =\r\n      this.getOptionsProp(options, 'socketClass') || JsonSocket;\r\n    this.tlsOptions = this.getOptionsProp(options, 'tlsOptions');\r\n\r\n    this.init();\r\n    this.initializeSerializer(options);\r\n    this.initializeDeserializer(options);\r\n  }\r\n\r\n  public listen(\r\n    callback: (err?: unknown, ...optionalParams: unknown[]) => void,\r\n  ) {\r\n    this.server.once(ERROR_EVENT, (err: Record<string, unknown>) => {\r\n      if (err?.code === EADDRINUSE || err?.code === ECONNREFUSED) {\r\n        return callback(err);\r\n      }\r\n    });\r\n    this.server.listen(this.port, this.host, callback as () => void);\r\n  }\r\n\r\n  public close() {\r\n    this.isExplicitlyTerminated = true;\r\n\r\n    this.server.close();\r\n  }\r\n\r\n  public bindHandler(socket: Socket) {\r\n    const readSocket = this.getSocketInstance(socket);\r\n    readSocket.on(MESSAGE_EVENT, async (msg: ReadPacket & PacketId) =>\r\n      this.handleMessage(readSocket, msg),\r\n    );\r\n    readSocket.on(ERROR_EVENT, this.handleError.bind(this));\r\n  }\r\n\r\n  public async handleMessage(socket: TcpSocket, rawMessage: unknown) {\r\n    const packet = await this.deserializer.deserialize(rawMessage);\r\n    const pattern = !isString(packet.pattern)\r\n      ? JSON.stringify(packet.pattern)\r\n      : packet.pattern;\r\n\r\n    const tcpContext = new TcpContext([socket, pattern]);\r\n    if (isUndefined((packet as IncomingRequest).id)) {\r\n      return this.handleEvent(pattern, packet, tcpContext);\r\n    }\r\n    const handler = this.getHandlerByPattern(pattern);\r\n    if (!handler) {\r\n      const status = 'error';\r\n      const noHandlerPacket = this.serializer.serialize({\r\n        id: (packet as IncomingRequest).id,\r\n        status,\r\n        err: NO_MESSAGE_HANDLER,\r\n      });\r\n      return socket.sendMessage(noHandlerPacket);\r\n    }\r\n    const response$ = this.transformToObservable(\r\n      await handler(packet.data, tcpContext),\r\n    );\r\n\r\n    response$ &&\r\n      this.send(response$, data => {\r\n        Object.assign(data, { id: (packet as IncomingRequest).id });\r\n        const outgoingResponse = this.serializer.serialize(\r\n          data as WritePacket & PacketId,\r\n        );\r\n        socket.sendMessage(outgoingResponse);\r\n      });\r\n  }\r\n\r\n  public handleClose(): undefined | number | NodeJS.Timer {\r\n    if (\r\n      this.isExplicitlyTerminated ||\r\n      !this.getOptionsProp(this.options, 'retryAttempts') ||\r\n      this.retryAttemptsCount >=\r\n        this.getOptionsProp(this.options, 'retryAttempts')\r\n    ) {\r\n      return undefined;\r\n    }\r\n    ++this.retryAttemptsCount;\r\n    return setTimeout(\r\n      () => this.server.listen(this.port, this.host),\r\n      this.getOptionsProp(this.options, 'retryDelay') || 0,\r\n    );\r\n  }\r\n\r\n  private init() {\r\n    if (this.tlsOptions) {\r\n      // TLS enabled, use tls server\r\n      this.server = tlsCreateServer(\r\n        this.tlsOptions,\r\n        this.bindHandler.bind(this),\r\n      );\r\n    } else {\r\n      // TLS disabled, use net server\r\n      this.server = net.createServer(this.bindHandler.bind(this));\r\n    }\r\n    this.server.on(ERROR_EVENT, this.handleError.bind(this));\r\n    this.server.on(CLOSE_EVENT, this.handleClose.bind(this));\r\n  }\r\n\r\n  private getSocketInstance(socket: Socket): TcpSocket {\r\n    return new this.socketClass(socket);\r\n  }\r\n}\r\n"]}