{"version":3,"file":"server-kafka.js","sourceRoot":"","sources":["server-kafka.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger } from '@nestjs/common/services/logger.service';\r\nimport { isNil } from '@nestjs/common/utils/shared.utils';\r\nimport { isObservable, lastValueFrom, Observable, ReplaySubject } from 'rxjs';\r\nimport {\r\n  KAFKA_DEFAULT_BROKER,\r\n  KAFKA_DEFAULT_CLIENT,\r\n  KAFKA_DEFAULT_GROUP,\r\n  NO_EVENT_HANDLER,\r\n  NO_MESSAGE_HANDLER,\r\n} from '../constants';\r\nimport { KafkaContext } from '../ctx-host';\r\nimport { KafkaRequestDeserializer } from '../deserializers/kafka-request.deserializer';\r\nimport { KafkaHeaders, Transport } from '../enums';\r\nimport { KafkaRetriableException } from '../exceptions';\r\nimport {\r\n  BrokersFunction,\r\n  Consumer,\r\n  ConsumerConfig,\r\n  EachMessagePayload,\r\n  Kafka,\r\n  KafkaConfig,\r\n  KafkaMessage,\r\n  Message,\r\n  Producer,\r\n  RecordMetadata,\r\n} from '../external/kafka.interface';\r\nimport { KafkaLogger, KafkaParser } from '../helpers';\r\nimport {\r\n  CustomTransportStrategy,\r\n  KafkaOptions,\r\n  OutgoingResponse,\r\n  ReadPacket,\r\n} from '../interfaces';\r\nimport { KafkaRequestSerializer } from '../serializers/kafka-request.serializer';\r\nimport { Server } from './server';\r\n\r\nlet kafkaPackage: any = {};\r\n\r\nexport class ServerKafka extends Server implements CustomTransportStrategy {\r\n  public readonly transportId = Transport.KAFKA;\r\n\r\n  protected logger = new Logger(ServerKafka.name);\r\n  protected client: Kafka = null;\r\n  protected consumer: Consumer = null;\r\n  protected producer: Producer = null;\r\n  protected parser: KafkaParser = null;\r\n\r\n  protected brokers: string[] | BrokersFunction;\r\n  protected clientId: string;\r\n  protected groupId: string;\r\n\r\n  constructor(protected readonly options: KafkaOptions['options']) {\r\n    super();\r\n\r\n    const clientOptions =\r\n      this.getOptionsProp(this.options, 'client') || ({} as KafkaConfig);\r\n    const consumerOptions =\r\n      this.getOptionsProp(this.options, 'consumer') || ({} as ConsumerConfig);\r\n    const postfixId =\r\n      this.getOptionsProp(this.options, 'postfixId') ?? '-server';\r\n\r\n    this.brokers = clientOptions.brokers || [KAFKA_DEFAULT_BROKER];\r\n\r\n    // append a unique id to the clientId and groupId\r\n    // so they don't collide with a microservices client\r\n    this.clientId =\r\n      (clientOptions.clientId || KAFKA_DEFAULT_CLIENT) + postfixId;\r\n    this.groupId = (consumerOptions.groupId || KAFKA_DEFAULT_GROUP) + postfixId;\r\n\r\n    kafkaPackage = this.loadPackage('kafkajs', ServerKafka.name, () =>\r\n      require('kafkajs'),\r\n    );\r\n\r\n    this.parser = new KafkaParser((options && options.parser) || undefined);\r\n\r\n    this.initializeSerializer(options);\r\n    this.initializeDeserializer(options);\r\n  }\r\n\r\n  public async listen(\r\n    callback: (err?: unknown, ...optionalParams: unknown[]) => void,\r\n  ): Promise<void> {\r\n    try {\r\n      this.client = this.createClient();\r\n      await this.start(callback);\r\n    } catch (err) {\r\n      callback(err);\r\n    }\r\n  }\r\n\r\n  public async close(): Promise<void> {\r\n    this.consumer && (await this.consumer.disconnect());\r\n    this.producer && (await this.producer.disconnect());\r\n    this.consumer = null;\r\n    this.producer = null;\r\n    this.client = null;\r\n  }\r\n\r\n  public async start(callback: () => void): Promise<void> {\r\n    const consumerOptions = Object.assign(this.options.consumer || {}, {\r\n      groupId: this.groupId,\r\n    });\r\n    this.consumer = this.client.consumer(consumerOptions);\r\n    this.producer = this.client.producer(this.options.producer);\r\n\r\n    await this.consumer.connect();\r\n    await this.producer.connect();\r\n    await this.bindEvents(this.consumer);\r\n    callback();\r\n  }\r\n\r\n  public createClient<T = any>(): T {\r\n    return new kafkaPackage.Kafka(\r\n      Object.assign(\r\n        { logCreator: KafkaLogger.bind(null, this.logger) },\r\n        this.options.client,\r\n        { clientId: this.clientId, brokers: this.brokers },\r\n      ) as KafkaConfig,\r\n    );\r\n  }\r\n\r\n  public async bindEvents(consumer: Consumer) {\r\n    const registeredPatterns = [...this.messageHandlers.keys()];\r\n    const consumerSubscribeOptions = this.options.subscribe || {};\r\n\r\n    if (registeredPatterns.length > 0) {\r\n      await this.consumer.subscribe({\r\n        ...consumerSubscribeOptions,\r\n        topics: registeredPatterns,\r\n      });\r\n    }\r\n\r\n    const consumerRunOptions = Object.assign(this.options.run || {}, {\r\n      eachMessage: this.getMessageHandler(),\r\n    });\r\n    await consumer.run(consumerRunOptions);\r\n  }\r\n\r\n  public getMessageHandler() {\r\n    return async (payload: EachMessagePayload) => this.handleMessage(payload);\r\n  }\r\n\r\n  public getPublisher(\r\n    replyTopic: string,\r\n    replyPartition: string,\r\n    correlationId: string,\r\n  ): (data: any) => Promise<RecordMetadata[]> {\r\n    return (data: any) =>\r\n      this.sendMessage(data, replyTopic, replyPartition, correlationId);\r\n  }\r\n\r\n  public async handleMessage(payload: EachMessagePayload) {\r\n    const channel = payload.topic;\r\n    const rawMessage = this.parser.parse<KafkaMessage>(\r\n      Object.assign(payload.message, {\r\n        topic: payload.topic,\r\n        partition: payload.partition,\r\n      }),\r\n    );\r\n    const headers = rawMessage.headers as unknown as Record<string, any>;\r\n    const correlationId = headers[KafkaHeaders.CORRELATION_ID];\r\n    const replyTopic = headers[KafkaHeaders.REPLY_TOPIC];\r\n    const replyPartition = headers[KafkaHeaders.REPLY_PARTITION];\r\n\r\n    const packet = await this.deserializer.deserialize(rawMessage, { channel });\r\n    const kafkaContext = new KafkaContext([\r\n      rawMessage,\r\n      payload.partition,\r\n      payload.topic,\r\n      this.consumer,\r\n      payload.heartbeat,\r\n      this.producer,\r\n    ]);\r\n    const handler = this.getHandlerByPattern(packet.pattern);\r\n    // if the correlation id or reply topic is not set\r\n    // then this is an event (events could still have correlation id)\r\n    if (handler?.isEventHandler || !correlationId || !replyTopic) {\r\n      return this.handleEvent(packet.pattern, packet, kafkaContext);\r\n    }\r\n\r\n    const publish = this.getPublisher(\r\n      replyTopic,\r\n      replyPartition,\r\n      correlationId,\r\n    );\r\n\r\n    if (!handler) {\r\n      return publish({\r\n        id: correlationId,\r\n        err: NO_MESSAGE_HANDLER,\r\n      });\r\n    }\r\n\r\n    const response$ = this.transformToObservable(\r\n      handler(packet.data, kafkaContext),\r\n    );\r\n\r\n    const replayStream$ = new ReplaySubject();\r\n    await this.combineStreamsAndThrowIfRetriable(response$, replayStream$);\r\n\r\n    this.send(replayStream$, publish);\r\n  }\r\n\r\n  private combineStreamsAndThrowIfRetriable(\r\n    response$: Observable<any>,\r\n    replayStream$: ReplaySubject<unknown>,\r\n  ) {\r\n    return new Promise<void>((resolve, reject) => {\r\n      let isPromiseResolved = false;\r\n      response$.subscribe({\r\n        next: val => {\r\n          replayStream$.next(val);\r\n          if (!isPromiseResolved) {\r\n            isPromiseResolved = true;\r\n            resolve();\r\n          }\r\n        },\r\n        error: err => {\r\n          if (err instanceof KafkaRetriableException && !isPromiseResolved) {\r\n            isPromiseResolved = true;\r\n            reject(err);\r\n          } else {\r\n            resolve();\r\n          }\r\n          replayStream$.error(err);\r\n        },\r\n        complete: () => replayStream$.complete(),\r\n      });\r\n    });\r\n  }\r\n\r\n  public async sendMessage(\r\n    message: OutgoingResponse,\r\n    replyTopic: string,\r\n    replyPartition: string,\r\n    correlationId: string,\r\n  ): Promise<RecordMetadata[]> {\r\n    const outgoingMessage = await this.serializer.serialize(message.response);\r\n    this.assignReplyPartition(replyPartition, outgoingMessage);\r\n    this.assignCorrelationIdHeader(correlationId, outgoingMessage);\r\n    this.assignErrorHeader(message, outgoingMessage);\r\n    this.assignIsDisposedHeader(message, outgoingMessage);\r\n\r\n    const replyMessage = Object.assign(\r\n      {\r\n        topic: replyTopic,\r\n        messages: [outgoingMessage],\r\n      },\r\n      this.options.send || {},\r\n    );\r\n    return this.producer.send(replyMessage);\r\n  }\r\n\r\n  public assignIsDisposedHeader(\r\n    outgoingResponse: OutgoingResponse,\r\n    outgoingMessage: Message,\r\n  ) {\r\n    if (!outgoingResponse.isDisposed) {\r\n      return;\r\n    }\r\n    outgoingMessage.headers[KafkaHeaders.NEST_IS_DISPOSED] = Buffer.alloc(1);\r\n  }\r\n\r\n  public assignErrorHeader(\r\n    outgoingResponse: OutgoingResponse,\r\n    outgoingMessage: Message,\r\n  ) {\r\n    if (!outgoingResponse.err) {\r\n      return;\r\n    }\r\n    const stringifiedError =\r\n      typeof outgoingResponse.err === 'object'\r\n        ? JSON.stringify(outgoingResponse.err)\r\n        : outgoingResponse.err;\r\n    outgoingMessage.headers[KafkaHeaders.NEST_ERR] =\r\n      Buffer.from(stringifiedError);\r\n  }\r\n\r\n  public assignCorrelationIdHeader(\r\n    correlationId: string,\r\n    outgoingMessage: Message,\r\n  ) {\r\n    outgoingMessage.headers[KafkaHeaders.CORRELATION_ID] =\r\n      Buffer.from(correlationId);\r\n  }\r\n\r\n  public assignReplyPartition(\r\n    replyPartition: string,\r\n    outgoingMessage: Message,\r\n  ) {\r\n    if (isNil(replyPartition)) {\r\n      return;\r\n    }\r\n    outgoingMessage.partition = parseFloat(replyPartition);\r\n  }\r\n\r\n  public async handleEvent(\r\n    pattern: string,\r\n    packet: ReadPacket,\r\n    context: KafkaContext,\r\n  ): Promise<any> {\r\n    const handler = this.getHandlerByPattern(pattern);\r\n    if (!handler) {\r\n      return this.logger.error(NO_EVENT_HANDLER`${pattern}`);\r\n    }\r\n    const resultOrStream = await handler(packet.data, context);\r\n    if (isObservable(resultOrStream)) {\r\n      await lastValueFrom(resultOrStream);\r\n    }\r\n  }\r\n\r\n  protected initializeSerializer(options: KafkaOptions['options']) {\r\n    this.serializer =\r\n      (options && options.serializer) || new KafkaRequestSerializer();\r\n  }\r\n\r\n  protected initializeDeserializer(options: KafkaOptions['options']) {\r\n    this.deserializer = options?.deserializer ?? new KafkaRequestDeserializer();\r\n  }\r\n}\r\n"]}