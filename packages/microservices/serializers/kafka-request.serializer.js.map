{"version":3,"file":"kafka-request.serializer.js","sourceRoot":"","sources":["kafka-request.serializer.ts"],"names":[],"mappings":";;;AAAA,oEAM2C;AAS3C;;GAEG;AACH,MAAa,sBAAsB;IAGjC,SAAS,CAAC,KAAU;QAClB,MAAM,iBAAiB,GACrB,IAAA,oBAAK,EAAC,KAAK,CAAC;YACZ,CAAC,IAAA,uBAAQ,EAAC,KAAK,CAAC;YAChB,CAAC,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC,CAAC;QAE7C,IAAI,iBAAiB,EAAE;YACrB,KAAK,GAAG,EAAE,KAAK,EAAE,CAAC;SACnB;QACD,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACvC,IAAI,CAAC,IAAA,oBAAK,EAAC,KAAK,CAAC,GAAG,CAAC,EAAE;YACrB,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;SACpC;QACD,IAAI,IAAA,oBAAK,EAAC,KAAK,CAAC,OAAO,CAAC,EAAE;YACxB,KAAK,CAAC,OAAO,GAAG,EAAE,CAAC;SACpB;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAEM,MAAM,CAAC,KAAU;QACtB,MAAM,eAAe,GACnB,CAAC,IAAA,oBAAK,EAAC,KAAK,CAAC,IAAI,CAAC,IAAA,uBAAQ,EAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAE/D,IAAI,eAAe,EAAE;YACnB,OAAO,IAAA,4BAAa,EAAC,KAAK,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC;gBACjD,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;gBACvB,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;SACtB;aAAM,IAAI,IAAA,0BAAW,EAAC,KAAK,CAAC,EAAE;YAC7B,OAAO,IAAI,CAAC;SACb;QACD,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AAnCD,wDAmCC","sourcesContent":["import {\r\n  isNil,\r\n  isObject,\r\n  isPlainObject,\r\n  isString,\r\n  isUndefined,\r\n} from '@nestjs/common/utils/shared.utils';\r\nimport { Serializer } from '../interfaces/serializer.interface';\r\n\r\nexport interface KafkaRequest<T = any> {\r\n  key: Buffer | string | null;\r\n  value: T;\r\n  headers: Record<string, any>;\r\n}\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport class KafkaRequestSerializer\r\n  implements Serializer<any, KafkaRequest | Promise<KafkaRequest>>\r\n{\r\n  serialize(value: any) {\r\n    const isNotKafkaMessage =\r\n      isNil(value) ||\r\n      !isObject(value) ||\r\n      (!('key' in value) && !('value' in value));\r\n\r\n    if (isNotKafkaMessage) {\r\n      value = { value };\r\n    }\r\n    value.value = this.encode(value.value);\r\n    if (!isNil(value.key)) {\r\n      value.key = this.encode(value.key);\r\n    }\r\n    if (isNil(value.headers)) {\r\n      value.headers = {};\r\n    }\r\n    return value;\r\n  }\r\n\r\n  public encode(value: any): Buffer | string | null {\r\n    const isObjectOrArray =\r\n      !isNil(value) && !isString(value) && !Buffer.isBuffer(value);\r\n\r\n    if (isObjectOrArray) {\r\n      return isPlainObject(value) || Array.isArray(value)\r\n        ? JSON.stringify(value)\r\n        : value.toString();\r\n    } else if (isUndefined(value)) {\r\n      return null;\r\n    }\r\n    return value;\r\n  }\r\n}\r\n"]}