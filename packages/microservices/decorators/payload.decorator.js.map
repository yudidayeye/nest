{"version":3,"file":"payload.decorator.js","sourceRoot":"","sources":["payload.decorator.ts"],"names":[],"mappings":";;;AACA,oEAA2D;AAC3D,sDAAoE;AAmDpE,SAAgB,OAAO,CACrB,cAA+D,EAC/D,GAAG,KAA8C;IAEjD,OAAO,IAAA,0CAA4B,EAAC,iCAAY,CAAC,OAAO,CAAC,CACvD,cAAc,EACd,GAAG,KAAK,CACT,CAAC;AACJ,CAAC;AARD,0BAQC","sourcesContent":["import { PipeTransform, Type } from '@nestjs/common';\r\nimport { RpcParamtype } from '../enums/rpc-paramtype.enum';\r\nimport { createPipesRpcParamDecorator } from '../utils/param.utils';\r\n\r\n/**\r\n * Microservice message pattern payload parameter decorator.\r\n *\r\n * @publicApi\r\n */\r\nexport function Payload(): ParameterDecorator;\r\n/**\r\n * Microservice message pattern payload parameter decorator.\r\n *\r\n * Example:\r\n * ```typescript\r\n * create(@Payload(new ValidationPipe()) createDto: CreateCatDto)\r\n * ```\r\n * @param pipes one or more pipes - either instances or classes - to apply to\r\n * the bound parameter.\r\n *\r\n * @publicApi\r\n */\r\nexport function Payload(\r\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\r\n): ParameterDecorator;\r\n/**\r\n * Microservice message pattern payload parameter decorator. Extracts a property from the\r\n * payload object. May also apply pipes to the bound parameter.\r\n *\r\n * For example, extracting all params:\r\n * ```typescript\r\n * findMany(@Payload() ids: string[])\r\n * ```\r\n *\r\n * For example, extracting a single param:\r\n * ```typescript\r\n * create(@Payload('data') createDto: { data: string })\r\n * ```\r\n *\r\n * For example, extracting a single param with pipe:\r\n * ```typescript\r\n * create(@Payload('data', new ValidationPipe()) createDto: { data: string })\r\n * ```\r\n * @param propertyKey name of single property to extract from the message payload\r\n * @param pipes one or more pipes - either instances or classes - to apply to\r\n * the bound parameter.\r\n *\r\n * @publicApi\r\n */\r\nexport function Payload(\r\n  propertyKey?: string,\r\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\r\n): ParameterDecorator;\r\nexport function Payload(\r\n  propertyOrPipe?: string | (Type<PipeTransform> | PipeTransform),\r\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\r\n): ParameterDecorator {\r\n  return createPipesRpcParamDecorator(RpcParamtype.PAYLOAD)(\r\n    propertyOrPipe,\r\n    ...pipes,\r\n  );\r\n}\r\n"]}