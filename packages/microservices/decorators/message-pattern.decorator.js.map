{"version":3,"file":"message-pattern.decorator.js","sourceRoot":"","sources":["message-pattern.decorator.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  isObject,\r\n  isNumber,\r\n  isNil,\r\n  isSymbol,\r\n} from '@nestjs/common/utils/shared.utils';\r\n/* eslint-disable @typescript-eslint/no-use-before-define */\r\nimport {\r\n  PATTERN_HANDLER_METADATA,\r\n  PATTERN_METADATA,\r\n  TRANSPORT_METADATA,\r\n  PATTERN_EXTRAS_METADATA,\r\n} from '../constants';\r\nimport { PatternHandler } from '../enums/pattern-handler.enum';\r\nimport { PatternMetadata } from '../interfaces/pattern-metadata.interface';\r\nimport { Transport } from '../enums';\r\n\r\nexport enum GrpcMethodStreamingType {\r\n  NO_STREAMING = 'no_stream',\r\n  RX_STREAMING = 'rx_stream',\r\n  PT_STREAMING = 'pt_stream',\r\n}\r\n\r\n/**\r\n * Subscribes to incoming messages which fulfils chosen pattern.\r\n *\r\n * @publicApi\r\n */\r\nexport const MessagePattern: {\r\n  <T = PatternMetadata | string>(metadata?: T): MethodDecorator;\r\n  <T = PatternMetadata | string>(\r\n    metadata?: T,\r\n    transport?: Transport | symbol,\r\n  ): MethodDecorator;\r\n  <T = PatternMetadata | string>(\r\n    metadata?: T,\r\n    extras?: Record<string, any>,\r\n  ): MethodDecorator;\r\n  <T = PatternMetadata | string>(\r\n    metadata?: T,\r\n    transport?: Transport | symbol,\r\n    extras?: Record<string, any>,\r\n  ): MethodDecorator;\r\n} = <T = PatternMetadata | string>(\r\n  metadata?: T,\r\n  transportOrExtras?: Transport | symbol | Record<string, any>,\r\n  maybeExtras?: Record<string, any>,\r\n): MethodDecorator => {\r\n  let transport: Transport | symbol;\r\n  let extras: Record<string, any>;\r\n  if (\r\n    (isNumber(transportOrExtras) || isSymbol(transportOrExtras)) &&\r\n    isNil(maybeExtras)\r\n  ) {\r\n    transport = transportOrExtras;\r\n  } else if (isObject(transportOrExtras) && isNil(maybeExtras)) {\r\n    extras = transportOrExtras;\r\n  } else {\r\n    transport = transportOrExtras as Transport | symbol;\r\n    extras = maybeExtras;\r\n  }\r\n  return (\r\n    target: object,\r\n    key: string | symbol,\r\n    descriptor: PropertyDescriptor,\r\n  ) => {\r\n    Reflect.defineMetadata(\r\n      PATTERN_METADATA,\r\n      [].concat(metadata),\r\n      descriptor.value,\r\n    );\r\n    Reflect.defineMetadata(\r\n      PATTERN_HANDLER_METADATA,\r\n      PatternHandler.MESSAGE,\r\n      descriptor.value,\r\n    );\r\n    Reflect.defineMetadata(TRANSPORT_METADATA, transport, descriptor.value);\r\n    Reflect.defineMetadata(\r\n      PATTERN_EXTRAS_METADATA,\r\n      {\r\n        ...Reflect.getMetadata(PATTERN_EXTRAS_METADATA, descriptor.value),\r\n        ...extras,\r\n      },\r\n      descriptor.value,\r\n    );\r\n    return descriptor;\r\n  };\r\n};\r\n\r\n/**\r\n * Registers gRPC method handler for specified service.\r\n */\r\nexport function GrpcMethod(service?: string): MethodDecorator;\r\nexport function GrpcMethod(service: string, method?: string): MethodDecorator;\r\nexport function GrpcMethod(service: string, method?: string): MethodDecorator {\r\n  return (\r\n    target: object,\r\n    key: string | symbol,\r\n    descriptor: PropertyDescriptor,\r\n  ) => {\r\n    const metadata = createGrpcMethodMetadata(target, key, service, method);\r\n    return MessagePattern(metadata, Transport.GRPC)(target, key, descriptor);\r\n  };\r\n}\r\n\r\n/**\r\n * Registers gRPC call through RX handler for service and method\r\n *\r\n * @param service String parameter reflecting the name of service definition from proto file\r\n */\r\nexport function GrpcStreamMethod(service?: string): MethodDecorator;\r\n/**\r\n * @param service String parameter reflecting the name of service definition from proto file\r\n * @param method Optional string parameter reflecting the name of method inside of a service definition coming after rpc keyword\r\n */\r\nexport function GrpcStreamMethod(\r\n  service: string,\r\n  method?: string,\r\n): MethodDecorator;\r\nexport function GrpcStreamMethod(\r\n  service: string,\r\n  method?: string,\r\n): MethodDecorator {\r\n  return (\r\n    target: object,\r\n    key: string | symbol,\r\n    descriptor: PropertyDescriptor,\r\n  ) => {\r\n    const metadata = createGrpcMethodMetadata(\r\n      target,\r\n      key,\r\n      service,\r\n      method,\r\n      GrpcMethodStreamingType.RX_STREAMING,\r\n    );\r\n    return MessagePattern(metadata, Transport.GRPC)(target, key, descriptor);\r\n  };\r\n}\r\n\r\n/**\r\n * Registers gRPC call pass through handler for service and method\r\n *\r\n * @param service String parameter reflecting the name of service definition from proto file\r\n */\r\nexport function GrpcStreamCall(service?: string): MethodDecorator;\r\n/**\r\n * @param service String parameter reflecting the name of service definition from proto file\r\n * @param method Optional string parameter reflecting the name of method inside of a service definition coming after rpc keyword\r\n */\r\nexport function GrpcStreamCall(\r\n  service: string,\r\n  method?: string,\r\n): MethodDecorator;\r\nexport function GrpcStreamCall(\r\n  service: string,\r\n  method?: string,\r\n): MethodDecorator {\r\n  return (\r\n    target: object,\r\n    key: string | symbol,\r\n    descriptor: PropertyDescriptor,\r\n  ) => {\r\n    const metadata = createGrpcMethodMetadata(\r\n      target,\r\n      key,\r\n      service,\r\n      method,\r\n      GrpcMethodStreamingType.PT_STREAMING,\r\n    );\r\n    return MessagePattern(metadata, Transport.GRPC)(target, key, descriptor);\r\n  };\r\n}\r\n\r\nexport function createGrpcMethodMetadata(\r\n  target: object,\r\n  key: string | symbol,\r\n  service: string | undefined,\r\n  method: string | undefined,\r\n  streaming = GrpcMethodStreamingType.NO_STREAMING,\r\n) {\r\n  const capitalizeFirstLetter = (str: string) =>\r\n    str.charAt(0).toUpperCase() + str.slice(1);\r\n\r\n  if (!service) {\r\n    const { name } = target.constructor;\r\n    return {\r\n      service: name,\r\n      rpc: capitalizeFirstLetter(key as string),\r\n      streaming,\r\n    };\r\n  }\r\n  if (service && !method) {\r\n    return { service, rpc: capitalizeFirstLetter(key as string), streaming };\r\n  }\r\n  return { service, rpc: method, streaming };\r\n}\r\n"]}