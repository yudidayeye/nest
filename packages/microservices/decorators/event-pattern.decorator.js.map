{"version":3,"file":"event-pattern.decorator.js","sourceRoot":"","sources":["event-pattern.decorator.ts"],"names":[],"mappings":";;;AAAA,oEAK2C;AAC3C,4CAKsB;AACtB,wEAA+D;AAG/D;;;;GAIG;AACI,MAAM,YAAY,GASrB,CACF,QAAY,EACZ,iBAA4D,EAC5D,WAAiC,EAChB,EAAE;IACnB,IAAI,SAA6B,CAAC;IAClC,IAAI,MAA2B,CAAC;IAChC,IACE,CAAC,IAAA,uBAAQ,EAAC,iBAAiB,CAAC,IAAI,IAAA,uBAAQ,EAAC,iBAAiB,CAAC,CAAC;QAC5D,IAAA,oBAAK,EAAC,WAAW,CAAC,EAClB;QACA,SAAS,GAAG,iBAAiB,CAAC;KAC/B;SAAM,IAAI,IAAA,uBAAQ,EAAC,iBAAiB,CAAC,IAAI,IAAA,oBAAK,EAAC,WAAW,CAAC,EAAE;QAC5D,MAAM,GAAG,iBAAiB,CAAC;KAC5B;SAAM;QACL,SAAS,GAAG,iBAAuC,CAAC;QACpD,MAAM,GAAG,WAAW,CAAC;KACtB;IACD,OAAO,CACL,MAAc,EACd,GAAoB,EACpB,UAA8B,EAC9B,EAAE;QACF,OAAO,CAAC,cAAc,CACpB,4BAAgB,EAChB,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,EACnB,UAAU,CAAC,KAAK,CACjB,CAAC;QACF,OAAO,CAAC,cAAc,CACpB,oCAAwB,EACxB,qCAAc,CAAC,KAAK,EACpB,UAAU,CAAC,KAAK,CACjB,CAAC;QACF,OAAO,CAAC,cAAc,CAAC,8BAAkB,EAAE,SAAS,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC;QACxE,OAAO,CAAC,cAAc,CACpB,mCAAuB,EACvB;YACE,GAAG,OAAO,CAAC,WAAW,CAAC,mCAAuB,EAAE,UAAU,CAAC,KAAK,CAAC;YACjE,GAAG,MAAM;SACV,EACD,UAAU,CAAC,KAAK,CACjB,CAAC;QACF,OAAO,UAAU,CAAC;IACpB,CAAC,CAAC;AACJ,CAAC,CAAC;AArDW,QAAA,YAAY,gBAqDvB","sourcesContent":["import {\r\n  isObject,\r\n  isNumber,\r\n  isNil,\r\n  isSymbol,\r\n} from '@nestjs/common/utils/shared.utils';\r\nimport {\r\n  PATTERN_HANDLER_METADATA,\r\n  PATTERN_METADATA,\r\n  TRANSPORT_METADATA,\r\n  PATTERN_EXTRAS_METADATA,\r\n} from '../constants';\r\nimport { PatternHandler } from '../enums/pattern-handler.enum';\r\nimport { Transport } from '../enums';\r\n\r\n/**\r\n * Subscribes to incoming events which fulfils chosen pattern.\r\n *\r\n * @publicApi\r\n */\r\nexport const EventPattern: {\r\n  <T = string>(metadata?: T): MethodDecorator;\r\n  <T = string>(metadata?: T, transport?: Transport | symbol): MethodDecorator;\r\n  <T = string>(metadata?: T, extras?: Record<string, any>): MethodDecorator;\r\n  <T = string>(\r\n    metadata?: T,\r\n    transport?: Transport | symbol,\r\n    extras?: Record<string, any>,\r\n  ): MethodDecorator;\r\n} = <T = string>(\r\n  metadata?: T,\r\n  transportOrExtras?: Transport | symbol | Record<string, any>,\r\n  maybeExtras?: Record<string, any>,\r\n): MethodDecorator => {\r\n  let transport: Transport | symbol;\r\n  let extras: Record<string, any>;\r\n  if (\r\n    (isNumber(transportOrExtras) || isSymbol(transportOrExtras)) &&\r\n    isNil(maybeExtras)\r\n  ) {\r\n    transport = transportOrExtras;\r\n  } else if (isObject(transportOrExtras) && isNil(maybeExtras)) {\r\n    extras = transportOrExtras;\r\n  } else {\r\n    transport = transportOrExtras as Transport | symbol;\r\n    extras = maybeExtras;\r\n  }\r\n  return (\r\n    target: object,\r\n    key: string | symbol,\r\n    descriptor: PropertyDescriptor,\r\n  ) => {\r\n    Reflect.defineMetadata(\r\n      PATTERN_METADATA,\r\n      [].concat(metadata),\r\n      descriptor.value,\r\n    );\r\n    Reflect.defineMetadata(\r\n      PATTERN_HANDLER_METADATA,\r\n      PatternHandler.EVENT,\r\n      descriptor.value,\r\n    );\r\n    Reflect.defineMetadata(TRANSPORT_METADATA, transport, descriptor.value);\r\n    Reflect.defineMetadata(\r\n      PATTERN_EXTRAS_METADATA,\r\n      {\r\n        ...Reflect.getMetadata(PATTERN_EXTRAS_METADATA, descriptor.value),\r\n        ...extras,\r\n      },\r\n      descriptor.value,\r\n    );\r\n    return descriptor;\r\n  };\r\n};\r\n"]}