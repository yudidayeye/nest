{"version":3,"file":"client.decorator.js","sourceRoot":"","sources":["client.decorator.ts"],"names":[],"mappings":";;;AAAA,4CAA8E;AAG9E;;;;;;;GAOG;AACH,SAAgB,MAAM,CAAC,QAAwB;IAC7C,OAAO,CAAC,MAAc,EAAE,WAA4B,EAAQ,EAAE;QAC5D,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;QACvC,OAAO,CAAC,cAAc,CAAC,2BAAe,EAAE,IAAI,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC;QACnE,OAAO,CAAC,cAAc,CACpB,yCAA6B,EAC7B,QAAQ,EACR,MAAM,EACN,WAAW,CACZ,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC;AAXD,wBAWC","sourcesContent":["import { CLIENT_CONFIGURATION_METADATA, CLIENT_METADATA } from '../constants';\r\nimport { ClientOptions } from '../interfaces/client-metadata.interface';\r\n\r\n/**\r\n * Attaches the `ClientProxy` instance to the given property\r\n *\r\n * @param  {ClientOptions} metadata optional client metadata\r\n *\r\n * @publicApi\r\n *\r\n */\r\nexport function Client(metadata?: ClientOptions): PropertyDecorator {\r\n  return (target: object, propertyKey: string | symbol): void => {\r\n    Reflect.set(target, propertyKey, null);\r\n    Reflect.defineMetadata(CLIENT_METADATA, true, target, propertyKey);\r\n    Reflect.defineMetadata(\r\n      CLIENT_CONFIGURATION_METADATA,\r\n      metadata,\r\n      target,\r\n      propertyKey,\r\n    );\r\n  };\r\n}\r\n"]}