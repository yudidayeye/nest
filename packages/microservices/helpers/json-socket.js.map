{"version":3,"file":"json-socket.js","sourceRoot":"","sources":["json-socket.ts"],"names":[],"mappings":";;;AAAA,mCAAgC;AAChC,mDAA+C;AAC/C,mGAA6F;AAC7F,6CAAyC;AAEzC,MAAa,UAAW,SAAQ,sBAAS;IAAzC;;QACU,kBAAa,GAAkB,IAAI,CAAC;QACpC,WAAM,GAAG,EAAE,CAAC;QAEH,kBAAa,GAAG,IAAI,8BAAa,EAAE,CAAC;QACpC,cAAS,GAAG,GAAG,CAAC;IAwDnC,CAAC;IAtDW,UAAU,CAAC,OAAY,EAAE,QAA8B;QAC/D,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;IACxE,CAAC;IAES,UAAU,CAAC,OAAwB;QAC3C,MAAM,IAAI,GAAG,eAAM,CAAC,QAAQ,CAAC,OAAO,CAAC;YACnC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,OAAO,CAAC;YACnC,CAAC,CAAC,OAAO,CAAC;QACZ,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC;QAEpB,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,EAAE;YAC9B,MAAM,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAC9C;;;eAGG;YACH,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;gBACZ,MAAM,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACrD,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC;gBAEpD,IAAI,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE;oBAC7B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;oBAC1B,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;oBACjB,MAAM,IAAI,kEAA8B,CAAC,gBAAgB,CAAC,CAAC;iBAC5D;gBACD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;aAC5C;SACF;QAED,IAAI,IAAI,CAAC,aAAa,KAAK,IAAI,EAAE;YAC/B,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;YAClC,IAAI,MAAM,KAAK,IAAI,CAAC,aAAa,EAAE;gBACjC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aACjC;iBAAM,IAAI,MAAM,GAAG,IAAI,CAAC,aAAa,EAAE;gBACtC,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;gBAC7D,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;gBACvD,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;gBAC5B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;aACvB;SACF;IACH,CAAC;IAEO,aAAa,CAAC,OAAY;QAChC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAC1B,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IAC5B,CAAC;IAEO,iBAAiB,CAAC,OAAY;QACpC,MAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QAC5C,MAAM,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC;QAClC,MAAM,IAAI,GAAG,MAAM,GAAG,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC;QACnD,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AA7DD,gCA6DC","sourcesContent":["import { Buffer } from 'buffer';\r\nimport { StringDecoder } from 'string_decoder';\r\nimport { CorruptedPacketLengthException } from '../errors/corrupted-packet-length.exception';\r\nimport { TcpSocket } from './tcp-socket';\r\n\r\nexport class JsonSocket extends TcpSocket {\r\n  private contentLength: number | null = null;\r\n  private buffer = '';\r\n\r\n  private readonly stringDecoder = new StringDecoder();\r\n  private readonly delimiter = '#';\r\n\r\n  protected handleSend(message: any, callback?: (err?: any) => void) {\r\n    this.socket.write(this.formatMessageData(message), 'utf-8', callback);\r\n  }\r\n\r\n  protected handleData(dataRaw: Buffer | string) {\r\n    const data = Buffer.isBuffer(dataRaw)\r\n      ? this.stringDecoder.write(dataRaw)\r\n      : dataRaw;\r\n    this.buffer += data;\r\n\r\n    if (this.contentLength == null) {\r\n      const i = this.buffer.indexOf(this.delimiter);\r\n      /**\r\n       * Check if the buffer has the delimiter (#),\r\n       * if not, the end of the buffer string might be in the middle of a content length string\r\n       */\r\n      if (i !== -1) {\r\n        const rawContentLength = this.buffer.substring(0, i);\r\n        this.contentLength = parseInt(rawContentLength, 10);\r\n\r\n        if (isNaN(this.contentLength)) {\r\n          this.contentLength = null;\r\n          this.buffer = '';\r\n          throw new CorruptedPacketLengthException(rawContentLength);\r\n        }\r\n        this.buffer = this.buffer.substring(i + 1);\r\n      }\r\n    }\r\n\r\n    if (this.contentLength !== null) {\r\n      const length = this.buffer.length;\r\n      if (length === this.contentLength) {\r\n        this.handleMessage(this.buffer);\r\n      } else if (length > this.contentLength) {\r\n        const message = this.buffer.substring(0, this.contentLength);\r\n        const rest = this.buffer.substring(this.contentLength);\r\n        this.handleMessage(message);\r\n        this.handleData(rest);\r\n      }\r\n    }\r\n  }\r\n\r\n  private handleMessage(message: any) {\r\n    this.contentLength = null;\r\n    this.buffer = '';\r\n    this.emitMessage(message);\r\n  }\r\n\r\n  private formatMessageData(message: any) {\r\n    const messageData = JSON.stringify(message);\r\n    const length = messageData.length;\r\n    const data = length + this.delimiter + messageData;\r\n    return data;\r\n  }\r\n}\r\n"]}