{"version":3,"file":"client-kafka.js","sourceRoot":"","sources":["client-kafka.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger } from '@nestjs/common/services/logger.service';\r\nimport { loadPackage } from '@nestjs/common/utils/load-package.util';\r\nimport { isUndefined } from '@nestjs/common/utils/shared.utils';\r\nimport {\r\n  KAFKA_DEFAULT_BROKER,\r\n  KAFKA_DEFAULT_CLIENT,\r\n  KAFKA_DEFAULT_GROUP,\r\n} from '../constants';\r\nimport { KafkaResponseDeserializer } from '../deserializers/kafka-response.deserializer';\r\nimport { KafkaHeaders } from '../enums';\r\nimport { InvalidKafkaClientTopicException } from '../errors/invalid-kafka-client-topic.exception';\r\nimport {\r\n  BrokersFunction,\r\n  Consumer,\r\n  ConsumerConfig,\r\n  ConsumerGroupJoinEvent,\r\n  EachMessagePayload,\r\n  Kafka,\r\n  KafkaConfig,\r\n  KafkaMessage,\r\n  Producer,\r\n  TopicPartitionOffsetAndMetadata,\r\n} from '../external/kafka.interface';\r\nimport {\r\n  KafkaLogger,\r\n  KafkaParser,\r\n  KafkaReplyPartitionAssigner,\r\n} from '../helpers';\r\nimport {\r\n  KafkaOptions,\r\n  OutgoingEvent,\r\n  ReadPacket,\r\n  WritePacket,\r\n} from '../interfaces';\r\nimport {\r\n  KafkaRequest,\r\n  KafkaRequestSerializer,\r\n} from '../serializers/kafka-request.serializer';\r\nimport { ClientProxy } from './client-proxy';\r\n\r\nlet kafkaPackage: any = {};\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport class ClientKafka extends ClientProxy {\r\n  protected logger = new Logger(ClientKafka.name);\r\n  protected client: Kafka | null = null;\r\n  protected consumer: Consumer | null = null;\r\n  protected producer: Producer | null = null;\r\n  protected parser: KafkaParser | null = null;\r\n  protected initialized: Promise<void> | null = null;\r\n  protected responsePatterns: string[] = [];\r\n  protected consumerAssignments: { [key: string]: number } = {};\r\n  protected brokers: string[] | BrokersFunction;\r\n  protected clientId: string;\r\n  protected groupId: string;\r\n  protected producerOnlyMode: boolean;\r\n\r\n  constructor(protected readonly options: KafkaOptions['options']) {\r\n    super();\r\n\r\n    const clientOptions = this.getOptionsProp(\r\n      this.options,\r\n      'client',\r\n      {} as KafkaConfig,\r\n    );\r\n    const consumerOptions = this.getOptionsProp(\r\n      this.options,\r\n      'consumer',\r\n      {} as ConsumerConfig,\r\n    );\r\n    const postfixId = this.getOptionsProp(this.options, 'postfixId', '-client');\r\n    this.producerOnlyMode = this.getOptionsProp(\r\n      this.options,\r\n      'producerOnlyMode',\r\n      false,\r\n    );\r\n\r\n    this.brokers = clientOptions.brokers || [KAFKA_DEFAULT_BROKER];\r\n\r\n    // Append a unique id to the clientId and groupId\r\n    // so they don't collide with a microservices client\r\n    this.clientId =\r\n      (clientOptions.clientId || KAFKA_DEFAULT_CLIENT) + postfixId;\r\n    this.groupId = (consumerOptions.groupId || KAFKA_DEFAULT_GROUP) + postfixId;\r\n\r\n    kafkaPackage = loadPackage('kafkajs', ClientKafka.name, () =>\r\n      require('kafkajs'),\r\n    );\r\n\r\n    this.parser = new KafkaParser((options && options.parser) || undefined);\r\n\r\n    this.initializeSerializer(options);\r\n    this.initializeDeserializer(options);\r\n  }\r\n\r\n  public subscribeToResponseOf(pattern: any): void {\r\n    const request = this.normalizePattern(pattern);\r\n    this.responsePatterns.push(this.getResponsePatternName(request));\r\n  }\r\n\r\n  public async close(): Promise<void> {\r\n    this.producer && (await this.producer.disconnect());\r\n    this.consumer && (await this.consumer.disconnect());\r\n    this.producer = null;\r\n    this.consumer = null;\r\n    this.initialized = null;\r\n    this.client = null;\r\n  }\r\n\r\n  public async connect(): Promise<Producer> {\r\n    if (this.initialized) {\r\n      return this.initialized.then(() => this.producer);\r\n    }\r\n    this.initialized = new Promise(async (resolve, reject) => {\r\n      try {\r\n        this.client = this.createClient();\r\n\r\n        if (!this.producerOnlyMode) {\r\n          const partitionAssigners = [\r\n            (\r\n              config: ConstructorParameters<\r\n                typeof KafkaReplyPartitionAssigner\r\n              >[1],\r\n            ) => new KafkaReplyPartitionAssigner(this, config),\r\n          ];\r\n\r\n          const consumerOptions = Object.assign(\r\n            {\r\n              partitionAssigners,\r\n            },\r\n            this.options.consumer || {},\r\n            {\r\n              groupId: this.groupId,\r\n            },\r\n          );\r\n\r\n          this.consumer = this.client.consumer(consumerOptions);\r\n          // set member assignments on join and rebalance\r\n          this.consumer.on(\r\n            this.consumer.events.GROUP_JOIN,\r\n            this.setConsumerAssignments.bind(this),\r\n          );\r\n          await this.consumer.connect();\r\n          await this.bindTopics();\r\n        }\r\n\r\n        this.producer = this.client.producer(this.options.producer || {});\r\n        await this.producer.connect();\r\n\r\n        resolve();\r\n      } catch (err) {\r\n        reject(err);\r\n      }\r\n    });\r\n    return this.initialized.then(() => this.producer);\r\n  }\r\n\r\n  public async bindTopics(): Promise<void> {\r\n    if (!this.consumer) {\r\n      throw Error('No consumer initialized');\r\n    }\r\n\r\n    const consumerSubscribeOptions = this.options.subscribe || {};\r\n\r\n    if (this.responsePatterns.length > 0) {\r\n      await this.consumer.subscribe({\r\n        ...consumerSubscribeOptions,\r\n        topics: this.responsePatterns,\r\n      });\r\n    }\r\n\r\n    await this.consumer.run(\r\n      Object.assign(this.options.run || {}, {\r\n        eachMessage: this.createResponseCallback(),\r\n      }),\r\n    );\r\n  }\r\n\r\n  public createClient<T = any>(): T {\r\n    const kafkaConfig: KafkaConfig = Object.assign(\r\n      { logCreator: KafkaLogger.bind(null, this.logger) },\r\n      this.options.client,\r\n      { brokers: this.brokers, clientId: this.clientId },\r\n    );\r\n\r\n    return new kafkaPackage.Kafka(kafkaConfig);\r\n  }\r\n\r\n  public createResponseCallback(): (payload: EachMessagePayload) => any {\r\n    return async (payload: EachMessagePayload) => {\r\n      const rawMessage = this.parser.parse<KafkaMessage>(\r\n        Object.assign(payload.message, {\r\n          topic: payload.topic,\r\n          partition: payload.partition,\r\n        }),\r\n      );\r\n      if (isUndefined(rawMessage.headers[KafkaHeaders.CORRELATION_ID])) {\r\n        return;\r\n      }\r\n      const { err, response, isDisposed, id } =\r\n        await this.deserializer.deserialize(rawMessage);\r\n      const callback = this.routingMap.get(id);\r\n      if (!callback) {\r\n        return;\r\n      }\r\n      if (err || isDisposed) {\r\n        return callback({\r\n          err,\r\n          response,\r\n          isDisposed,\r\n        });\r\n      }\r\n      callback({\r\n        err,\r\n        response,\r\n      });\r\n    };\r\n  }\r\n\r\n  public getConsumerAssignments() {\r\n    return this.consumerAssignments;\r\n  }\r\n\r\n  protected async dispatchEvent(packet: OutgoingEvent): Promise<any> {\r\n    const pattern = this.normalizePattern(packet.pattern);\r\n    const outgoingEvent = await this.serializer.serialize(packet.data, {\r\n      pattern,\r\n    });\r\n    const message = Object.assign(\r\n      {\r\n        topic: pattern,\r\n        messages: [outgoingEvent],\r\n      },\r\n      this.options.send || {},\r\n    );\r\n\r\n    return this.producer.send(message);\r\n  }\r\n\r\n  protected getReplyTopicPartition(topic: string): string {\r\n    const minimumPartition = this.consumerAssignments[topic];\r\n    if (isUndefined(minimumPartition)) {\r\n      throw new InvalidKafkaClientTopicException(topic);\r\n    }\r\n\r\n    // get the minimum partition\r\n    return minimumPartition.toString();\r\n  }\r\n\r\n  protected publish(\r\n    partialPacket: ReadPacket,\r\n    callback: (packet: WritePacket) => any,\r\n  ): () => void {\r\n    const packet = this.assignPacketId(partialPacket);\r\n    this.routingMap.set(packet.id, callback);\r\n\r\n    const cleanup = () => this.routingMap.delete(packet.id);\r\n    const errorCallback = (err: unknown) => {\r\n      cleanup();\r\n      callback({ err });\r\n    };\r\n\r\n    try {\r\n      const pattern = this.normalizePattern(partialPacket.pattern);\r\n      const replyTopic = this.getResponsePatternName(pattern);\r\n      const replyPartition = this.getReplyTopicPartition(replyTopic);\r\n\r\n      Promise.resolve(this.serializer.serialize(packet.data, { pattern }))\r\n        .then((serializedPacket: KafkaRequest) => {\r\n          serializedPacket.headers[KafkaHeaders.CORRELATION_ID] = packet.id;\r\n          serializedPacket.headers[KafkaHeaders.REPLY_TOPIC] = replyTopic;\r\n          serializedPacket.headers[KafkaHeaders.REPLY_PARTITION] =\r\n            replyPartition;\r\n\r\n          const message = Object.assign(\r\n            {\r\n              topic: pattern,\r\n              messages: [serializedPacket],\r\n            },\r\n            this.options.send || {},\r\n          );\r\n\r\n          return this.producer.send(message);\r\n        })\r\n        .catch(err => errorCallback(err));\r\n\r\n      return cleanup;\r\n    } catch (err) {\r\n      errorCallback(err);\r\n    }\r\n  }\r\n\r\n  protected getResponsePatternName(pattern: string): string {\r\n    return `${pattern}.reply`;\r\n  }\r\n\r\n  protected setConsumerAssignments(data: ConsumerGroupJoinEvent): void {\r\n    const consumerAssignments: { [key: string]: number } = {};\r\n\r\n    // only need to set the minimum\r\n    Object.keys(data.payload.memberAssignment).forEach(topic => {\r\n      const memberPartitions = data.payload.memberAssignment[topic];\r\n\r\n      if (memberPartitions.length) {\r\n        consumerAssignments[topic] = Math.min(...memberPartitions);\r\n      }\r\n    });\r\n\r\n    this.consumerAssignments = consumerAssignments;\r\n  }\r\n\r\n  protected initializeSerializer(options: KafkaOptions['options']) {\r\n    this.serializer =\r\n      (options && options.serializer) || new KafkaRequestSerializer();\r\n  }\r\n\r\n  protected initializeDeserializer(options: KafkaOptions['options']) {\r\n    this.deserializer =\r\n      (options && options.deserializer) || new KafkaResponseDeserializer();\r\n  }\r\n\r\n  public commitOffsets(\r\n    topicPartitions: TopicPartitionOffsetAndMetadata[],\r\n  ): Promise<void> {\r\n    if (this.consumer) {\r\n      return this.consumer.commitOffsets(topicPartitions);\r\n    } else {\r\n      throw new Error('No consumer initialized');\r\n    }\r\n  }\r\n}\r\n"]}