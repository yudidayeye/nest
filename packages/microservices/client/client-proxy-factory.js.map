{"version":3,"file":"client-proxy-factory.js","sourceRoot":"","sources":["client-proxy-factory.ts"],"names":[],"mappings":";;;AAAA,4DAAoD;AAepD,+CAAgD;AAChD,iDAA6C;AAC7C,+CAA2C;AAC3C,+CAA2C;AAE3C,iDAA6C;AAC7C,6CAAyC;AACzC,6CAAyC;AAMzC;;GAEG;AACH,MAAa,kBAAkB;IAQtB,MAAM,CAAC,MAAM,CAClB,aAAkD;QAElD,IAAI,IAAI,CAAC,qBAAqB,CAAC,aAAa,CAAC,EAAE;YAC7C,MAAM,EAAE,WAAW,EAAE,OAAO,EAAE,GAAG,aAAa,CAAC;YAC/C,OAAO,IAAI,WAAW,CAAC,OAAO,CAAC,CAAC;SACjC;QACD,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,aAAa,IAAI,EAAE,CAAC;QACnD,QAAQ,SAAS,EAAE;YACjB,KAAK,0BAAS,CAAC,KAAK;gBAClB,OAAO,IAAI,0BAAW,CAAC,OAAkC,CAAC,CAAC;YAC7D,KAAK,0BAAS,CAAC,IAAI;gBACjB,OAAO,IAAI,wBAAU,CAAC,OAAiC,CAAC,CAAC;YAC3D,KAAK,0BAAS,CAAC,IAAI;gBACjB,OAAO,IAAI,wBAAU,CAAC,OAAiC,CAAC,CAAC;YAC3D,KAAK,0BAAS,CAAC,IAAI;gBACjB,OAAO,IAAI,6BAAe,CAAC,OAAiC,CAAC,CAAC;YAChE,KAAK,0BAAS,CAAC,GAAG;gBAChB,OAAO,IAAI,sBAAS,CAAC,OAAgC,CAAC,CAAC;YACzD,KAAK,0BAAS,CAAC,KAAK;gBAClB,OAAO,IAAI,0BAAW,CAAC,OAAkC,CAAC,CAAC;YAC7D;gBACE,OAAO,IAAI,sBAAS,CAAC,OAAsC,CAAC,CAAC;SAChE;IACH,CAAC;IAEO,MAAM,CAAC,qBAAqB,CAClC,OAA4C;QAE5C,OAAO,CAAC,CAAE,OAA+B,CAAC,WAAW,CAAC;IACxD,CAAC;CACF;AAvCD,gDAuCC","sourcesContent":["import { Transport } from '../enums/transport.enum';\r\nimport {\r\n  ClientOptions,\r\n  CustomClientOptions,\r\n  TcpClientOptions,\r\n} from '../interfaces/client-metadata.interface';\r\nimport { Closeable } from '../interfaces/closeable.interface';\r\nimport {\r\n  GrpcOptions,\r\n  KafkaOptions,\r\n  MqttOptions,\r\n  NatsOptions,\r\n  RedisOptions,\r\n  RmqOptions,\r\n} from '../interfaces/microservice-configuration.interface';\r\nimport { ClientGrpcProxy } from './client-grpc';\r\nimport { ClientKafka } from './client-kafka';\r\nimport { ClientMqtt } from './client-mqtt';\r\nimport { ClientNats } from './client-nats';\r\nimport { ClientProxy } from './client-proxy';\r\nimport { ClientRedis } from './client-redis';\r\nimport { ClientRMQ } from './client-rmq';\r\nimport { ClientTCP } from './client-tcp';\r\n\r\nexport interface IClientProxyFactory {\r\n  create(clientOptions: ClientOptions): ClientProxy & Closeable;\r\n}\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport class ClientProxyFactory {\r\n  public static create(\r\n    clientOptions: { transport: Transport.GRPC } & ClientOptions,\r\n  ): ClientGrpcProxy;\r\n  public static create(clientOptions: ClientOptions): ClientProxy & Closeable;\r\n  public static create(\r\n    clientOptions: CustomClientOptions,\r\n  ): ClientProxy & Closeable;\r\n  public static create(\r\n    clientOptions: ClientOptions | CustomClientOptions,\r\n  ): ClientProxy & Closeable {\r\n    if (this.isCustomClientOptions(clientOptions)) {\r\n      const { customClass, options } = clientOptions;\r\n      return new customClass(options);\r\n    }\r\n    const { transport, options } = clientOptions || {};\r\n    switch (transport) {\r\n      case Transport.REDIS:\r\n        return new ClientRedis(options as RedisOptions['options']);\r\n      case Transport.NATS:\r\n        return new ClientNats(options as NatsOptions['options']);\r\n      case Transport.MQTT:\r\n        return new ClientMqtt(options as MqttOptions['options']);\r\n      case Transport.GRPC:\r\n        return new ClientGrpcProxy(options as GrpcOptions['options']);\r\n      case Transport.RMQ:\r\n        return new ClientRMQ(options as RmqOptions['options']);\r\n      case Transport.KAFKA:\r\n        return new ClientKafka(options as KafkaOptions['options']);\r\n      default:\r\n        return new ClientTCP(options as TcpClientOptions['options']);\r\n    }\r\n  }\r\n\r\n  private static isCustomClientOptions(\r\n    options: ClientOptions | CustomClientOptions,\r\n  ): options is CustomClientOptions {\r\n    return !!(options as CustomClientOptions).customClass;\r\n  }\r\n}\r\n"]}