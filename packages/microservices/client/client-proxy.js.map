{"version":3,"file":"client-proxy.js","sourceRoot":"","sources":["client-proxy.ts"],"names":[],"mappings":"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","sourcesContent":["import { randomStringGenerator } from '@nestjs/common/utils/random-string-generator.util';\r\nimport { isNil } from '@nestjs/common/utils/shared.utils';\r\nimport {\r\n  connectable,\r\n  defer,\r\n  fromEvent,\r\n  merge,\r\n  Observable,\r\n  Observer,\r\n  Subject,\r\n  throwError as _throw,\r\n} from 'rxjs';\r\nimport { map, mergeMap, take } from 'rxjs/operators';\r\nimport { CONNECT_EVENT, ERROR_EVENT } from '../constants';\r\nimport { IncomingResponseDeserializer } from '../deserializers/incoming-response.deserializer';\r\nimport { InvalidMessageException } from '../errors/invalid-message.exception';\r\nimport {\r\n  ClientOptions,\r\n  KafkaOptions,\r\n  MqttOptions,\r\n  MsPattern,\r\n  NatsOptions,\r\n  PacketId,\r\n  ReadPacket,\r\n  RedisOptions,\r\n  RmqOptions,\r\n  TcpClientOptions,\r\n  WritePacket,\r\n} from '../interfaces';\r\nimport { ProducerDeserializer } from '../interfaces/deserializer.interface';\r\nimport { ProducerSerializer } from '../interfaces/serializer.interface';\r\nimport { IdentitySerializer } from '../serializers/identity.serializer';\r\nimport { transformPatternToRoute } from '../utils';\r\n\r\nexport abstract class ClientProxy {\r\n  public abstract connect(): Promise<any>;\r\n  public abstract close(): any;\r\n\r\n  protected routingMap = new Map<string, Function>();\r\n  protected serializer: ProducerSerializer;\r\n  protected deserializer: ProducerDeserializer;\r\n\r\n  public send<TResult = any, TInput = any>(\r\n    pattern: any,\r\n    data: TInput,\r\n  ): Observable<TResult> {\r\n    if (isNil(pattern) || isNil(data)) {\r\n      return _throw(() => new InvalidMessageException());\r\n    }\r\n    return defer(async () => this.connect()).pipe(\r\n      mergeMap(\r\n        () =>\r\n          new Observable((observer: Observer<TResult>) => {\r\n            const callback = this.createObserver(observer);\r\n            return this.publish({ pattern, data }, callback);\r\n          }),\r\n      ),\r\n    );\r\n  }\r\n\r\n  public emit<TResult = any, TInput = any>(\r\n    pattern: any,\r\n    data: TInput,\r\n  ): Observable<TResult> {\r\n    if (isNil(pattern) || isNil(data)) {\r\n      return _throw(() => new InvalidMessageException());\r\n    }\r\n    const source = defer(async () => this.connect()).pipe(\r\n      mergeMap(() => this.dispatchEvent({ pattern, data })),\r\n    );\r\n    const connectableSource = connectable(source, {\r\n      connector: () => new Subject(),\r\n      resetOnDisconnect: false,\r\n    });\r\n    connectableSource.connect();\r\n    return connectableSource;\r\n  }\r\n\r\n  protected abstract publish(\r\n    packet: ReadPacket,\r\n    callback: (packet: WritePacket) => void,\r\n  ): () => void;\r\n\r\n  protected abstract dispatchEvent<T = any>(packet: ReadPacket): Promise<T>;\r\n\r\n  protected createObserver<T>(\r\n    observer: Observer<T>,\r\n  ): (packet: WritePacket) => void {\r\n    return ({ err, response, isDisposed }: WritePacket) => {\r\n      if (err) {\r\n        return observer.error(this.serializeError(err));\r\n      } else if (response !== undefined && isDisposed) {\r\n        observer.next(this.serializeResponse(response));\r\n        return observer.complete();\r\n      } else if (isDisposed) {\r\n        return observer.complete();\r\n      }\r\n      observer.next(this.serializeResponse(response));\r\n    };\r\n  }\r\n\r\n  protected serializeError(err: any): any {\r\n    return err;\r\n  }\r\n\r\n  protected serializeResponse(response: any): any {\r\n    return response;\r\n  }\r\n\r\n  protected assignPacketId(packet: ReadPacket): ReadPacket & PacketId {\r\n    const id = randomStringGenerator();\r\n    return Object.assign(packet, { id });\r\n  }\r\n\r\n  protected connect$(\r\n    instance: any,\r\n    errorEvent = ERROR_EVENT,\r\n    connectEvent = CONNECT_EVENT,\r\n  ): Observable<any> {\r\n    const error$ = fromEvent(instance, errorEvent).pipe(\r\n      map((err: any) => {\r\n        throw err;\r\n      }),\r\n    );\r\n    const connect$ = fromEvent(instance, connectEvent);\r\n    return merge(error$, connect$).pipe(take(1));\r\n  }\r\n\r\n  protected getOptionsProp<\r\n    T extends ClientOptions['options'],\r\n    K extends keyof T,\r\n  >(obj: T, prop: K, defaultValue: T[K] = undefined) {\r\n    return obj && prop in obj ? obj[prop] : defaultValue;\r\n  }\r\n\r\n  protected normalizePattern(pattern: MsPattern): string {\r\n    return transformPatternToRoute(pattern);\r\n  }\r\n\r\n  protected initializeSerializer(options: ClientOptions['options']) {\r\n    this.serializer =\r\n      (options &&\r\n        (\r\n          options as\r\n            | RedisOptions['options']\r\n            | NatsOptions['options']\r\n            | MqttOptions['options']\r\n            | TcpClientOptions['options']\r\n            | RmqOptions['options']\r\n            | KafkaOptions['options']\r\n        ).serializer) ||\r\n      new IdentitySerializer();\r\n  }\r\n\r\n  protected initializeDeserializer(options: ClientOptions['options']) {\r\n    this.deserializer =\r\n      (options &&\r\n        (\r\n          options as\r\n            | RedisOptions['options']\r\n            | NatsOptions['options']\r\n            | MqttOptions['options']\r\n            | TcpClientOptions['options']\r\n            | RmqOptions['options']\r\n            | KafkaOptions['options']\r\n        ).deserializer) ||\r\n      new IncomingResponseDeserializer();\r\n  }\r\n}\r\n"]}