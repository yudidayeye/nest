{"version":3,"file":"client-mqtt.js","sourceRoot":"","sources":["client-mqtt.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger } from '@nestjs/common/services/logger.service';\r\nimport { loadPackage } from '@nestjs/common/utils/load-package.util';\r\nimport { EmptyError, fromEvent, lastValueFrom, merge, Observable } from 'rxjs';\r\nimport { first, map, share, tap } from 'rxjs/operators';\r\nimport {\r\n  CLOSE_EVENT,\r\n  ECONNREFUSED,\r\n  ERROR_EVENT,\r\n  MESSAGE_EVENT,\r\n  MQTT_DEFAULT_URL,\r\n} from '../constants';\r\nimport { MqttClient } from '../external/mqtt-client.interface';\r\nimport { MqttOptions, ReadPacket, WritePacket } from '../interfaces';\r\nimport {\r\n  MqttRecord,\r\n  MqttRecordOptions,\r\n} from '../record-builders/mqtt.record-builder';\r\nimport { MqttRecordSerializer } from '../serializers/mqtt-record.serializer';\r\nimport { ClientProxy } from './client-proxy';\r\n\r\nlet mqttPackage: any = {};\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport class ClientMqtt extends ClientProxy {\r\n  protected readonly logger = new Logger(ClientProxy.name);\r\n  protected readonly subscriptionsCount = new Map<string, number>();\r\n  protected readonly url: string;\r\n  protected mqttClient: MqttClient;\r\n  protected connection: Promise<any>;\r\n\r\n  constructor(protected readonly options: MqttOptions['options']) {\r\n    super();\r\n    this.url = this.getOptionsProp(this.options, 'url') || MQTT_DEFAULT_URL;\r\n\r\n    mqttPackage = loadPackage('mqtt', ClientMqtt.name, () => require('mqtt'));\r\n\r\n    this.initializeSerializer(options);\r\n    this.initializeDeserializer(options);\r\n  }\r\n\r\n  public getRequestPattern(pattern: string): string {\r\n    return pattern;\r\n  }\r\n\r\n  public getResponsePattern(pattern: string): string {\r\n    return `${pattern}/reply`;\r\n  }\r\n\r\n  public close() {\r\n    this.mqttClient && this.mqttClient.end();\r\n    this.mqttClient = null;\r\n    this.connection = null;\r\n  }\r\n\r\n  public connect(): Promise<any> {\r\n    if (this.mqttClient) {\r\n      return this.connection;\r\n    }\r\n    this.mqttClient = this.createClient();\r\n    this.handleError(this.mqttClient);\r\n\r\n    const connect$ = this.connect$(this.mqttClient);\r\n    this.connection = lastValueFrom(\r\n      this.mergeCloseEvent(this.mqttClient, connect$).pipe(\r\n        tap(() =>\r\n          this.mqttClient.on(MESSAGE_EVENT, this.createResponseCallback()),\r\n        ),\r\n        share(),\r\n      ),\r\n    ).catch(err => {\r\n      if (err instanceof EmptyError) {\r\n        return;\r\n      }\r\n      throw err;\r\n    });\r\n    return this.connection;\r\n  }\r\n\r\n  public mergeCloseEvent<T = any>(\r\n    instance: MqttClient,\r\n    source$: Observable<T>,\r\n  ): Observable<T> {\r\n    const close$ = fromEvent(instance, CLOSE_EVENT).pipe(\r\n      map((err: any) => {\r\n        throw err;\r\n      }),\r\n    );\r\n    return merge(source$, close$).pipe(first());\r\n  }\r\n\r\n  public createClient(): MqttClient {\r\n    return mqttPackage.connect(this.url, this.options as MqttOptions);\r\n  }\r\n\r\n  public handleError(client: MqttClient) {\r\n    client.addListener(\r\n      ERROR_EVENT,\r\n      (err: any) => err.code !== ECONNREFUSED && this.logger.error(err),\r\n    );\r\n  }\r\n\r\n  public createResponseCallback(): (channel: string, buffer: Buffer) => any {\r\n    return async (channel: string, buffer: Buffer) => {\r\n      const packet = JSON.parse(buffer.toString());\r\n      const { err, response, isDisposed, id } =\r\n        await this.deserializer.deserialize(packet);\r\n\r\n      const callback = this.routingMap.get(id);\r\n      if (!callback) {\r\n        return undefined;\r\n      }\r\n      if (isDisposed || err) {\r\n        return callback({\r\n          err,\r\n          response,\r\n          isDisposed: true,\r\n        });\r\n      }\r\n      callback({\r\n        err,\r\n        response,\r\n      });\r\n    };\r\n  }\r\n\r\n  protected publish(\r\n    partialPacket: ReadPacket,\r\n    callback: (packet: WritePacket) => any,\r\n  ): () => void {\r\n    try {\r\n      const packet = this.assignPacketId(partialPacket);\r\n      const pattern = this.normalizePattern(partialPacket.pattern);\r\n      const serializedPacket: ReadPacket & Partial<MqttRecord> =\r\n        this.serializer.serialize(packet);\r\n\r\n      const responseChannel = this.getResponsePattern(pattern);\r\n      let subscriptionsCount =\r\n        this.subscriptionsCount.get(responseChannel) || 0;\r\n\r\n      const publishPacket = () => {\r\n        subscriptionsCount = this.subscriptionsCount.get(responseChannel) || 0;\r\n        this.subscriptionsCount.set(responseChannel, subscriptionsCount + 1);\r\n        this.routingMap.set(packet.id, callback);\r\n\r\n        const options = serializedPacket.options;\r\n        delete serializedPacket.options;\r\n\r\n        this.mqttClient.publish(\r\n          this.getRequestPattern(pattern),\r\n          JSON.stringify(serializedPacket),\r\n          this.mergePacketOptions(options),\r\n        );\r\n      };\r\n\r\n      if (subscriptionsCount <= 0) {\r\n        this.mqttClient.subscribe(\r\n          responseChannel,\r\n          (err: any) => !err && publishPacket(),\r\n        );\r\n      } else {\r\n        publishPacket();\r\n      }\r\n\r\n      return () => {\r\n        this.unsubscribeFromChannel(responseChannel);\r\n        this.routingMap.delete(packet.id);\r\n      };\r\n    } catch (err) {\r\n      callback({ err });\r\n    }\r\n  }\r\n\r\n  protected dispatchEvent(packet: ReadPacket): Promise<any> {\r\n    const pattern = this.normalizePattern(packet.pattern);\r\n    const serializedPacket: ReadPacket & Partial<MqttRecord> =\r\n      this.serializer.serialize(packet);\r\n\r\n    const options = serializedPacket.options;\r\n    delete serializedPacket.options;\r\n\r\n    return new Promise<void>((resolve, reject) =>\r\n      this.mqttClient.publish(\r\n        pattern,\r\n        JSON.stringify(serializedPacket),\r\n        this.mergePacketOptions(options),\r\n        (err: any) => (err ? reject(err) : resolve()),\r\n      ),\r\n    );\r\n  }\r\n\r\n  protected unsubscribeFromChannel(channel: string) {\r\n    const subscriptionCount = this.subscriptionsCount.get(channel);\r\n    this.subscriptionsCount.set(channel, subscriptionCount - 1);\r\n\r\n    if (subscriptionCount - 1 <= 0) {\r\n      this.mqttClient.unsubscribe(channel);\r\n    }\r\n  }\r\n\r\n  protected initializeSerializer(options: MqttOptions['options']) {\r\n    this.serializer = options?.serializer ?? new MqttRecordSerializer();\r\n  }\r\n\r\n  protected mergePacketOptions(\r\n    requestOptions?: MqttRecordOptions,\r\n  ): MqttRecordOptions | undefined {\r\n    if (!requestOptions && !this.options?.userProperties) {\r\n      return undefined;\r\n    }\r\n\r\n    return {\r\n      ...requestOptions,\r\n      properties: {\r\n        ...requestOptions?.properties,\r\n        userProperties: {\r\n          ...this.options?.userProperties,\r\n          ...requestOptions?.properties?.userProperties,\r\n        },\r\n      },\r\n    };\r\n  }\r\n}\r\n"]}