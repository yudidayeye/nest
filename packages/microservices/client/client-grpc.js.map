{"version":3,"file":"client-grpc.js","sourceRoot":"","sources":["client-grpc.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger } from '@nestjs/common/services/logger.service';\r\nimport { loadPackage } from '@nestjs/common/utils/load-package.util';\r\nimport { isFunction, isObject } from '@nestjs/common/utils/shared.utils';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { GRPC_DEFAULT_PROTO_LOADER, GRPC_DEFAULT_URL } from '../constants';\r\nimport { InvalidGrpcPackageException } from '../errors/invalid-grpc-package.exception';\r\nimport { InvalidGrpcServiceException } from '../errors/invalid-grpc-service.exception';\r\nimport { InvalidProtoDefinitionException } from '../errors/invalid-proto-definition.exception';\r\nimport { ClientGrpc, GrpcOptions } from '../interfaces';\r\nimport { ClientProxy } from './client-proxy';\r\nimport { GRPC_CANCELLED } from './constants';\r\nimport { ChannelOptions } from '../external/grpc-options.interface';\r\n\r\nlet grpcPackage: any = {};\r\nlet grpcProtoLoaderPackage: any = {};\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport class ClientGrpcProxy extends ClientProxy implements ClientGrpc {\r\n  protected readonly logger = new Logger(ClientProxy.name);\r\n  protected readonly clients = new Map<string, any>();\r\n  protected readonly url: string;\r\n  protected grpcClients = [];\r\n\r\n  constructor(protected readonly options: GrpcOptions['options']) {\r\n    super();\r\n    this.url = this.getOptionsProp(options, 'url') || GRPC_DEFAULT_URL;\r\n\r\n    const protoLoader =\r\n      this.getOptionsProp(options, 'protoLoader') || GRPC_DEFAULT_PROTO_LOADER;\r\n\r\n    grpcPackage = loadPackage('@grpc/grpc-js', ClientGrpcProxy.name, () =>\r\n      require('@grpc/grpc-js'),\r\n    );\r\n\r\n    grpcProtoLoaderPackage = loadPackage(\r\n      protoLoader,\r\n      ClientGrpcProxy.name,\r\n      () =>\r\n        protoLoader === GRPC_DEFAULT_PROTO_LOADER\r\n          ? require('@grpc/proto-loader')\r\n          : require(protoLoader),\r\n    );\r\n    this.grpcClients = this.createClients();\r\n  }\r\n\r\n  public getService<T extends {}>(name: string): T {\r\n    const grpcClient = this.createClientByServiceName(name);\r\n    const clientRef = this.getClient(name);\r\n    if (!clientRef) {\r\n      throw new InvalidGrpcServiceException(name);\r\n    }\r\n\r\n    const protoMethods = Object.keys(clientRef[name].prototype);\r\n    const grpcService = {} as T;\r\n\r\n    protoMethods.forEach(m => {\r\n      grpcService[m] = this.createServiceMethod(grpcClient, m);\r\n    });\r\n    return grpcService;\r\n  }\r\n\r\n  public getClientByServiceName<T = unknown>(name: string): T {\r\n    return this.clients.get(name) || this.createClientByServiceName(name);\r\n  }\r\n\r\n  public createClientByServiceName(name: string) {\r\n    const clientRef = this.getClient(name);\r\n    if (!clientRef) {\r\n      throw new InvalidGrpcServiceException(name);\r\n    }\r\n\r\n    const channelOptions: ChannelOptions =\r\n      this.options && this.options.channelOptions\r\n        ? this.options.channelOptions\r\n        : {};\r\n    if (this.options && this.options.maxSendMessageLength) {\r\n      channelOptions['grpc.max_send_message_length'] =\r\n        this.options.maxSendMessageLength;\r\n    }\r\n    if (this.options && this.options.maxReceiveMessageLength) {\r\n      channelOptions['grpc.max_receive_message_length'] =\r\n        this.options.maxReceiveMessageLength;\r\n    }\r\n    if (this.options && this.options.maxMetadataSize) {\r\n      channelOptions['grpc.max_metadata_size'] = this.options.maxMetadataSize;\r\n    }\r\n\r\n    const keepaliveOptions = this.getKeepaliveOptions();\r\n    const options: Record<string, string | number> = {\r\n      ...channelOptions,\r\n      ...keepaliveOptions,\r\n    };\r\n\r\n    const credentials =\r\n      this.options.credentials || grpcPackage.credentials.createInsecure();\r\n\r\n    const grpcClient = new clientRef[name](this.url, credentials, options);\r\n    this.clients.set(name, grpcClient);\r\n    return grpcClient;\r\n  }\r\n\r\n  public getKeepaliveOptions() {\r\n    if (!isObject(this.options.keepalive)) {\r\n      return {};\r\n    }\r\n    const keepaliveKeys: Record<\r\n      keyof GrpcOptions['options']['keepalive'],\r\n      string\r\n    > = {\r\n      keepaliveTimeMs: 'grpc.keepalive_time_ms',\r\n      keepaliveTimeoutMs: 'grpc.keepalive_timeout_ms',\r\n      keepalivePermitWithoutCalls: 'grpc.keepalive_permit_without_calls',\r\n      http2MaxPingsWithoutData: 'grpc.http2.max_pings_without_data',\r\n      http2MinTimeBetweenPingsMs: 'grpc.http2.min_time_between_pings_ms',\r\n      http2MinPingIntervalWithoutDataMs:\r\n        'grpc.http2.min_ping_interval_without_data_ms',\r\n      http2MaxPingStrikes: 'grpc.http2.max_ping_strikes',\r\n    };\r\n\r\n    const keepaliveOptions = {};\r\n    for (const [optionKey, optionValue] of Object.entries(\r\n      this.options.keepalive,\r\n    )) {\r\n      const key = keepaliveKeys[optionKey];\r\n      if (key === undefined) {\r\n        continue;\r\n      }\r\n      keepaliveOptions[key] = optionValue;\r\n    }\r\n    return keepaliveOptions;\r\n  }\r\n\r\n  public createServiceMethod(\r\n    client: any,\r\n    methodName: string,\r\n  ): (...args: unknown[]) => Observable<unknown> {\r\n    return client[methodName].responseStream\r\n      ? this.createStreamServiceMethod(client, methodName)\r\n      : this.createUnaryServiceMethod(client, methodName);\r\n  }\r\n\r\n  public createStreamServiceMethod(\r\n    client: unknown,\r\n    methodName: string,\r\n  ): (...args: any[]) => Observable<any> {\r\n    return (...args: any[]) => {\r\n      const isRequestStream = client[methodName].requestStream;\r\n      const stream = new Observable(observer => {\r\n        let isClientCanceled = false;\r\n        let upstreamSubscription: Subscription;\r\n\r\n        const upstreamSubjectOrData = args[0];\r\n        const maybeMetadata = args[1];\r\n\r\n        const isUpstreamSubject =\r\n          upstreamSubjectOrData && isFunction(upstreamSubjectOrData.subscribe);\r\n\r\n        const call =\r\n          isRequestStream && isUpstreamSubject\r\n            ? client[methodName](maybeMetadata)\r\n            : client[methodName](...args);\r\n\r\n        if (isRequestStream && isUpstreamSubject) {\r\n          upstreamSubscription = upstreamSubjectOrData.subscribe(\r\n            (val: unknown) => call.write(val),\r\n            (err: unknown) => call.emit('error', err),\r\n            () => call.end(),\r\n          );\r\n        }\r\n        call.on('data', (data: any) => observer.next(data));\r\n        call.on('error', (error: any) => {\r\n          if (error.details === GRPC_CANCELLED) {\r\n            call.destroy();\r\n            if (isClientCanceled) {\r\n              return;\r\n            }\r\n          }\r\n          observer.error(this.serializeError(error));\r\n        });\r\n        call.on('end', () => {\r\n          if (upstreamSubscription) {\r\n            upstreamSubscription.unsubscribe();\r\n            upstreamSubscription = null;\r\n          }\r\n          call.removeAllListeners();\r\n          observer.complete();\r\n        });\r\n        return () => {\r\n          if (upstreamSubscription) {\r\n            upstreamSubscription.unsubscribe();\r\n            upstreamSubscription = null;\r\n          }\r\n\r\n          if (call.finished) {\r\n            return undefined;\r\n          }\r\n          isClientCanceled = true;\r\n          call.cancel();\r\n        };\r\n      });\r\n      return stream;\r\n    };\r\n  }\r\n\r\n  public createUnaryServiceMethod(\r\n    client: any,\r\n    methodName: string,\r\n  ): (...args: any[]) => Observable<any> {\r\n    return (...args: any[]) => {\r\n      const isRequestStream = client[methodName].requestStream;\r\n      const upstreamSubjectOrData = args[0];\r\n      const isUpstreamSubject =\r\n        upstreamSubjectOrData && isFunction(upstreamSubjectOrData.subscribe);\r\n\r\n      if (isRequestStream && isUpstreamSubject) {\r\n        return new Observable(observer => {\r\n          let isClientCanceled = false;\r\n          const callArgs = [\r\n            (error: any, data: unknown) => {\r\n              if (error) {\r\n                if (error.details === GRPC_CANCELLED || error.code === 1) {\r\n                  call.destroy();\r\n                  if (isClientCanceled) {\r\n                    return;\r\n                  }\r\n                }\r\n                return observer.error(this.serializeError(error));\r\n              }\r\n              observer.next(data);\r\n              observer.complete();\r\n            },\r\n          ];\r\n          const maybeMetadata = args[1];\r\n          if (maybeMetadata) {\r\n            callArgs.unshift(maybeMetadata);\r\n          }\r\n          const call = client[methodName](...callArgs);\r\n\r\n          const upstreamSubscription: Subscription =\r\n            upstreamSubjectOrData.subscribe(\r\n              (val: unknown) => call.write(val),\r\n              (err: unknown) => call.emit('error', err),\r\n              () => call.end(),\r\n            );\r\n\r\n          return () => {\r\n            upstreamSubscription.unsubscribe();\r\n            if (!call.finished) {\r\n              isClientCanceled = true;\r\n              call.cancel();\r\n            }\r\n          };\r\n        });\r\n      }\r\n      return new Observable(observer => {\r\n        const call = client[methodName](...args, (error: any, data: any) => {\r\n          if (error) {\r\n            return observer.error(this.serializeError(error));\r\n          }\r\n          observer.next(data);\r\n          observer.complete();\r\n        });\r\n\r\n        return () => {\r\n          if (!call.finished) {\r\n            call.cancel();\r\n          }\r\n        };\r\n      });\r\n    };\r\n  }\r\n\r\n  public createClients(): any[] {\r\n    const grpcContext = this.loadProto();\r\n    const packageOption = this.getOptionsProp(this.options, 'package');\r\n    const grpcPackages = [];\r\n    const packageNames = Array.isArray(packageOption)\r\n      ? packageOption\r\n      : [packageOption];\r\n\r\n    for (const packageName of packageNames) {\r\n      const grpcPkg = this.lookupPackage(grpcContext, packageName);\r\n\r\n      if (!grpcPkg) {\r\n        const invalidPackageError = new InvalidGrpcPackageException(\r\n          packageName,\r\n        );\r\n        this.logger.error(\r\n          invalidPackageError.message,\r\n          invalidPackageError.stack,\r\n        );\r\n        throw invalidPackageError;\r\n      }\r\n      grpcPackages.push(grpcPkg);\r\n    }\r\n    return grpcPackages;\r\n  }\r\n\r\n  public loadProto(): any {\r\n    try {\r\n      const file = this.getOptionsProp(this.options, 'protoPath');\r\n      const loader = this.getOptionsProp(this.options, 'loader');\r\n\r\n      const packageDefinition =\r\n        this.getOptionsProp(this.options, 'packageDefinition') ||\r\n        grpcProtoLoaderPackage.loadSync(file, loader);\r\n\r\n      const packageObject =\r\n        grpcPackage.loadPackageDefinition(packageDefinition);\r\n      return packageObject;\r\n    } catch (err) {\r\n      const invalidProtoError = new InvalidProtoDefinitionException(err.path);\r\n      const message =\r\n        err && err.message ? err.message : invalidProtoError.message;\r\n\r\n      this.logger.error(message, invalidProtoError.stack);\r\n      throw invalidProtoError;\r\n    }\r\n  }\r\n\r\n  public lookupPackage(root: any, packageName: string) {\r\n    /** Reference: https://github.com/kondi/rxjs-grpc */\r\n    let pkg = root;\r\n\r\n    if (packageName) {\r\n      for (const name of packageName.split('.')) {\r\n        pkg = pkg[name];\r\n      }\r\n    }\r\n\r\n    return pkg;\r\n  }\r\n\r\n  public close() {\r\n    this.grpcClients\r\n      .filter(client => client && isFunction(client.close))\r\n      .forEach(client => client.close());\r\n    this.grpcClients = [];\r\n  }\r\n\r\n  public async connect(): Promise<any> {\r\n    throw new Error('The \"connect()\" method is not supported in gRPC mode.');\r\n  }\r\n\r\n  public send<TResult = any, TInput = any>(\r\n    pattern: any,\r\n    data: TInput,\r\n  ): Observable<TResult> {\r\n    throw new Error(\r\n      'Method is not supported in gRPC mode. Use ClientGrpc instead (learn more in the documentation).',\r\n    );\r\n  }\r\n\r\n  protected getClient(name: string): any {\r\n    return this.grpcClients.find(client => client.hasOwnProperty(name));\r\n  }\r\n\r\n  protected publish(packet: any, callback: (packet: any) => any): any {\r\n    throw new Error(\r\n      'Method is not supported in gRPC mode. Use ClientGrpc instead (learn more in the documentation).',\r\n    );\r\n  }\r\n\r\n  protected async dispatchEvent(packet: any): Promise<any> {\r\n    throw new Error(\r\n      'Method is not supported in gRPC mode. Use ClientGrpc instead (learn more in the documentation).',\r\n    );\r\n  }\r\n}\r\n"]}