{"version":3,"file":"transform-pattern.utils.js","sourceRoot":"","sources":["transform-pattern.utils.ts"],"names":[],"mappings":";;;AAAA,oEAI2C;AAG3C;;;;;;;;;;;GAWG;AACH,SAAgB,uBAAuB,CAAC,OAAkB;IACxD,IAAI,IAAA,uBAAQ,EAAC,OAAO,CAAC,IAAI,IAAA,uBAAQ,EAAC,OAAO,CAAC,EAAE;QAC1C,OAAO,GAAG,OAAO,EAAE,CAAC;KACrB;IACD,IAAI,CAAC,IAAA,uBAAQ,EAAC,OAAO,CAAC,EAAE;QACtB,OAAO,OAAO,CAAC;KAChB;IAED,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CACpD,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAC1B,CAAC;IAEF,sFAAsF;IACtF,MAAM,mBAAmB,GAAG,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;QAC/C,IAAI,YAAY,GAAG,IAAI,GAAG,IAAI,CAAC;QAC/B,YAAY,IAAI,IAAA,uBAAQ,EAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YACpC,CAAC,CAAC,IAAI,uBAAuB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG;YAC9C,CAAC,CAAC,uBAAuB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;QAC1C,OAAO,YAAY,CAAC;IACtB,CAAC,CAAC,CAAC;IAEH,MAAM,KAAK,GAAG,mBAAmB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC5C,OAAO,IAAI,KAAK,GAAG,CAAC;AACtB,CAAC;AAvBD,0DAuBC","sourcesContent":["import {\r\n  isObject,\r\n  isString,\r\n  isNumber,\r\n} from '@nestjs/common/utils/shared.utils';\r\nimport { MsPattern } from '../interfaces';\r\n\r\n/**\r\n * Transforms the Pattern to Route.\r\n * 1. If Pattern is a `string`, it will be returned as it is.\r\n * 2. If Pattern is a `number`, it will be converted to `string`.\r\n * 3. If Pattern is a `JSON` object, it will be transformed to Route. For that end,\r\n * the function will sort properties of `JSON` Object and creates `route` string\r\n * according to the following template:\r\n * <key1>:<value1>/<key2>:<value2>/.../<keyN>:<valueN>\r\n *\r\n * @param  {MsPattern} pattern - client pattern\r\n * @returns string\r\n */\r\nexport function transformPatternToRoute(pattern: MsPattern): string {\r\n  if (isString(pattern) || isNumber(pattern)) {\r\n    return `${pattern}`;\r\n  }\r\n  if (!isObject(pattern)) {\r\n    return pattern;\r\n  }\r\n\r\n  const sortedKeys = Object.keys(pattern).sort((a, b) =>\r\n    ('' + a).localeCompare(b),\r\n  );\r\n\r\n  // Creates the array of Pattern params from sorted keys and their corresponding values\r\n  const sortedPatternParams = sortedKeys.map(key => {\r\n    let partialRoute = `\"${key}\":`;\r\n    partialRoute += isString(pattern[key])\r\n      ? `\"${transformPatternToRoute(pattern[key])}\"`\r\n      : transformPatternToRoute(pattern[key]);\r\n    return partialRoute;\r\n  });\r\n\r\n  const route = sortedPatternParams.join(',');\r\n  return `{${route}}`;\r\n}\r\n"]}