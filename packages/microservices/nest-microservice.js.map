{"version":3,"file":"nest-microservice.js","sourceRoot":"","sources":["nest-microservice.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  CanActivate,\r\n  ExceptionFilter,\r\n  INestMicroservice,\r\n  NestInterceptor,\r\n  PipeTransform,\r\n  WebSocketAdapter,\r\n} from '@nestjs/common';\r\nimport { NestMicroserviceOptions } from '@nestjs/common/interfaces/microservices/nest-microservice-options.interface';\r\nimport { Logger } from '@nestjs/common/services/logger.service';\r\nimport { ApplicationConfig } from '@nestjs/core/application-config';\r\nimport { MESSAGES } from '@nestjs/core/constants';\r\nimport { optionalRequire } from '@nestjs/core/helpers/optional-require';\r\nimport { NestContainer } from '@nestjs/core/injector/container';\r\nimport { Injector } from '@nestjs/core/injector/injector';\r\nimport { GraphInspector } from '@nestjs/core/inspector/graph-inspector';\r\nimport { NestApplicationContext } from '@nestjs/core/nest-application-context';\r\nimport { Transport } from './enums/transport.enum';\r\nimport { CustomTransportStrategy } from './interfaces/custom-transport-strategy.interface';\r\nimport { MicroserviceOptions } from './interfaces/microservice-configuration.interface';\r\nimport { MicroservicesModule } from './microservices-module';\r\nimport { Server } from './server/server';\r\nimport { ServerFactory } from './server/server-factory';\r\n\r\nconst { SocketModule } = optionalRequire(\r\n  '@nestjs/websockets/socket-module',\r\n  () => require('@nestjs/websockets/socket-module'),\r\n);\r\n\r\nexport class NestMicroservice\r\n  extends NestApplicationContext<NestMicroserviceOptions>\r\n  implements INestMicroservice\r\n{\r\n  protected readonly logger = new Logger(NestMicroservice.name, {\r\n    timestamp: true,\r\n  });\r\n  private readonly microservicesModule = new MicroservicesModule();\r\n  private readonly socketModule = SocketModule ? new SocketModule() : null;\r\n  private microserviceConfig: NestMicroserviceOptions & MicroserviceOptions;\r\n  private server: Server & CustomTransportStrategy;\r\n  private isTerminated = false;\r\n  private isInitHookCalled = false;\r\n\r\n  constructor(\r\n    container: NestContainer,\r\n    config: NestMicroserviceOptions & MicroserviceOptions = {},\r\n    private readonly graphInspector: GraphInspector,\r\n    private readonly applicationConfig: ApplicationConfig,\r\n  ) {\r\n    super(container, config);\r\n\r\n    this.injector = new Injector({ preview: config.preview });\r\n    this.microservicesModule.register(\r\n      container,\r\n      this.graphInspector,\r\n      this.applicationConfig,\r\n      this.appOptions,\r\n    );\r\n    this.createServer(config);\r\n    this.selectContextModule();\r\n  }\r\n\r\n  public createServer(config: NestMicroserviceOptions & MicroserviceOptions) {\r\n    try {\r\n      this.microserviceConfig = {\r\n        transport: Transport.TCP,\r\n        ...config,\r\n      } as any;\r\n      const { strategy } = config as any;\r\n      this.server = strategy\r\n        ? strategy\r\n        : ServerFactory.create(this.microserviceConfig);\r\n    } catch (e) {\r\n      this.logger.error(e);\r\n      throw e;\r\n    }\r\n  }\r\n\r\n  public async registerModules(): Promise<any> {\r\n    this.socketModule &&\r\n      this.socketModule.register(\r\n        this.container,\r\n        this.applicationConfig,\r\n        this.graphInspector,\r\n        this.appOptions,\r\n      );\r\n\r\n    if (!this.appOptions.preview) {\r\n      this.microservicesModule.setupClients(this.container);\r\n      this.registerListeners();\r\n    }\r\n\r\n    this.setIsInitialized(true);\r\n\r\n    if (!this.isInitHookCalled) {\r\n      await this.callInitHook();\r\n      await this.callBootstrapHook();\r\n    }\r\n  }\r\n\r\n  public registerListeners() {\r\n    this.microservicesModule.setupListeners(this.container, this.server);\r\n  }\r\n\r\n  public useWebSocketAdapter(adapter: WebSocketAdapter): this {\r\n    this.applicationConfig.setIoAdapter(adapter);\r\n    return this;\r\n  }\r\n\r\n  public useGlobalFilters(...filters: ExceptionFilter[]): this {\r\n    this.applicationConfig.useGlobalFilters(...filters);\r\n    filters.forEach(item =>\r\n      this.graphInspector.insertOrphanedEnhancer({\r\n        subtype: 'filter',\r\n        ref: item,\r\n      }),\r\n    );\r\n    return this;\r\n  }\r\n\r\n  public useGlobalPipes(...pipes: PipeTransform<any>[]): this {\r\n    this.applicationConfig.useGlobalPipes(...pipes);\r\n    pipes.forEach(item =>\r\n      this.graphInspector.insertOrphanedEnhancer({\r\n        subtype: 'pipe',\r\n        ref: item,\r\n      }),\r\n    );\r\n    return this;\r\n  }\r\n\r\n  public useGlobalInterceptors(...interceptors: NestInterceptor[]): this {\r\n    this.applicationConfig.useGlobalInterceptors(...interceptors);\r\n    interceptors.forEach(item =>\r\n      this.graphInspector.insertOrphanedEnhancer({\r\n        subtype: 'interceptor',\r\n        ref: item,\r\n      }),\r\n    );\r\n    return this;\r\n  }\r\n\r\n  public useGlobalGuards(...guards: CanActivate[]): this {\r\n    this.applicationConfig.useGlobalGuards(...guards);\r\n    guards.forEach(item =>\r\n      this.graphInspector.insertOrphanedEnhancer({\r\n        subtype: 'guard',\r\n        ref: item,\r\n      }),\r\n    );\r\n    return this;\r\n  }\r\n\r\n  public async init(): Promise<this> {\r\n    if (this.isInitialized) {\r\n      return this;\r\n    }\r\n    await super.init();\r\n    await this.registerModules();\r\n    return this;\r\n  }\r\n\r\n  public async listen() {\r\n    this.assertNotInPreviewMode('listen');\r\n    !this.isInitialized && (await this.registerModules());\r\n\r\n    return new Promise<any>((resolve, reject) => {\r\n      this.server.listen((err, info) => {\r\n        if (this.microserviceConfig?.autoFlushLogs ?? true) {\r\n          this.flushLogs();\r\n        }\r\n        if (err) {\r\n          return reject(err);\r\n        }\r\n        this.logger.log(MESSAGES.MICROSERVICE_READY);\r\n        resolve(info);\r\n      });\r\n    });\r\n  }\r\n\r\n  public async close(): Promise<any> {\r\n    await this.server.close();\r\n    if (this.isTerminated) {\r\n      return;\r\n    }\r\n    this.setIsTerminated(true);\r\n    await this.closeApplication();\r\n  }\r\n\r\n  public setIsInitialized(isInitialized: boolean) {\r\n    this.isInitialized = isInitialized;\r\n  }\r\n\r\n  public setIsTerminated(isTerminated: boolean) {\r\n    this.isTerminated = isTerminated;\r\n  }\r\n\r\n  public setIsInitHookCalled(isInitHookCalled: boolean) {\r\n    this.isInitHookCalled = isInitHookCalled;\r\n  }\r\n\r\n  protected async closeApplication(): Promise<any> {\r\n    this.socketModule && (await this.socketModule.close());\r\n    this.microservicesModule && (await this.microservicesModule.close());\r\n\r\n    await super.close();\r\n    this.setIsTerminated(true);\r\n  }\r\n\r\n  protected async dispose(): Promise<void> {\r\n    if (this.isTerminated) {\r\n      return;\r\n    }\r\n    await this.server.close();\r\n    this.socketModule && (await this.socketModule.close());\r\n    this.microservicesModule && (await this.microservicesModule.close());\r\n  }\r\n}\r\n"]}