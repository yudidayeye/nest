{"version":3,"file":"nats-client.interface.js","sourceRoot":"","sources":["nats-client.interface.ts"],"names":[],"mappings":"","sourcesContent":["/**\r\n * @see https://github.com/nats-io/nats.js\r\n *\r\n * @publicApi\r\n */\r\nexport interface NatsCodec<T> {\r\n  encode(d: T): Uint8Array;\r\n  decode(a: Uint8Array): T;\r\n}\r\n\r\ninterface RequestOptions {\r\n  timeout: number;\r\n  headers?: any;\r\n  noMux?: boolean;\r\n  reply?: string;\r\n}\r\ninterface PublishOptions {\r\n  reply?: string;\r\n  headers?: any;\r\n}\r\ninterface SubOpts<T> {\r\n  queue?: string;\r\n  max?: number;\r\n  timeout?: number;\r\n  callback?: (err: object | null, msg: T) => void;\r\n}\r\n\r\ndeclare type SubscriptionOptions = SubOpts<NatsMsg>;\r\n\r\nexport interface NatsMsg {\r\n  subject: string;\r\n  sid: number;\r\n  reply?: string;\r\n  data: Uint8Array;\r\n  headers?: any;\r\n  respond(data?: Uint8Array, opts?: PublishOptions): boolean;\r\n}\r\n\r\ninterface Sub<T> extends AsyncIterable<T> {\r\n  unsubscribe(max?: number): void;\r\n  drain(): Promise<void>;\r\n  isDraining(): boolean;\r\n  isClosed(): boolean;\r\n  callback(err: object | null, msg: NatsMsg): void;\r\n  getSubject(): string;\r\n  getReceived(): number;\r\n  getProcessed(): number;\r\n  getPending(): number;\r\n  getID(): number;\r\n  getMax(): number | undefined;\r\n}\r\n\r\ndeclare type Subscription = Sub<NatsMsg>;\r\n\r\ndeclare enum Events {\r\n  Disconnect = 'disconnect',\r\n  Reconnect = 'reconnect',\r\n  Update = 'update',\r\n  LDM = 'ldm',\r\n  Error = 'error',\r\n}\r\ninterface Status {\r\n  type: Events | DebugEvents;\r\n  data: string | number;\r\n}\r\n\r\ndeclare enum DebugEvents {\r\n  Reconnecting = 'reconnecting',\r\n  PingTimer = 'pingTimer',\r\n  StaleConnection = 'staleConnection',\r\n}\r\n\r\nexport declare class Client {\r\n  info?: Record<string, any>;\r\n  closed(): Promise<void | Error>;\r\n  close(): Promise<void>;\r\n  publish(subject: string, data?: Uint8Array, options?: PublishOptions): void;\r\n  subscribe(subject: string, opts?: SubscriptionOptions): Subscription;\r\n  request(\r\n    subject: string,\r\n    data?: Uint8Array,\r\n    opts?: RequestOptions,\r\n  ): Promise<NatsMsg>;\r\n  flush(): Promise<void>;\r\n  drain(): Promise<void>;\r\n  isClosed(): boolean;\r\n  isDraining(): boolean;\r\n  getServer(): string;\r\n  status(): AsyncIterable<Status>;\r\n  stats(): Record<string, any>;\r\n  jetstreamManager(opts?: Record<string, any>): Promise<any>;\r\n  jetstream(opts?: Record<string, any>): any;\r\n}\r\n"]}