{"version":3,"file":"microservice-configuration.interface.js","sourceRoot":"","sources":["microservice-configuration.interface.ts"],"names":[],"mappings":"","sourcesContent":["import { Type } from '@nestjs/common';\r\nimport { ConnectionOptions } from 'tls';\r\nimport { Transport } from '../enums/transport.enum';\r\nimport { ChannelOptions } from '../external/grpc-options.interface';\r\nimport {\r\n  ConsumerConfig,\r\n  ConsumerRunConfig,\r\n  ConsumerSubscribeTopics,\r\n  KafkaConfig,\r\n  ProducerConfig,\r\n  ProducerRecord,\r\n} from '../external/kafka.interface';\r\nimport { MqttClientOptions, QoS } from '../external/mqtt-options.interface';\r\nimport { IORedisOptions } from '../external/redis.interface';\r\nimport { RmqUrl } from '../external/rmq-url.interface';\r\nimport { TcpSocket } from '../helpers';\r\nimport { CustomTransportStrategy } from './custom-transport-strategy.interface';\r\nimport { Deserializer } from './deserializer.interface';\r\nimport { Serializer } from './serializer.interface';\r\n\r\nexport type MicroserviceOptions =\r\n  | GrpcOptions\r\n  | TcpOptions\r\n  | RedisOptions\r\n  | NatsOptions\r\n  | MqttOptions\r\n  | RmqOptions\r\n  | KafkaOptions\r\n  | CustomStrategy;\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport interface CustomStrategy {\r\n  strategy: CustomTransportStrategy;\r\n  options?: {};\r\n}\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport interface GrpcOptions {\r\n  transport?: Transport.GRPC;\r\n  options: {\r\n    url?: string;\r\n    maxSendMessageLength?: number;\r\n    maxReceiveMessageLength?: number;\r\n    maxMetadataSize?: number;\r\n    keepalive?: {\r\n      keepaliveTimeMs?: number;\r\n      keepaliveTimeoutMs?: number;\r\n      keepalivePermitWithoutCalls?: number;\r\n      http2MaxPingsWithoutData?: number;\r\n      http2MinTimeBetweenPingsMs?: number;\r\n      http2MinPingIntervalWithoutDataMs?: number;\r\n      http2MaxPingStrikes?: number;\r\n    };\r\n    channelOptions?: ChannelOptions;\r\n    credentials?: any;\r\n    protoPath: string | string[];\r\n    package: string | string[];\r\n    protoLoader?: string;\r\n    packageDefinition?: any;\r\n    gracefulShutdown?: boolean;\r\n    loader?: {\r\n      keepCase?: boolean;\r\n      alternateCommentMode?: boolean;\r\n      longs?: Function;\r\n      enums?: Function;\r\n      bytes?: Function;\r\n      defaults?: boolean;\r\n      arrays?: boolean;\r\n      objects?: boolean;\r\n      oneofs?: boolean;\r\n      json?: boolean;\r\n      includeDirs?: string[];\r\n    };\r\n  };\r\n}\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport interface TcpOptions {\r\n  transport?: Transport.TCP;\r\n  options?: {\r\n    host?: string;\r\n    port?: number;\r\n    retryAttempts?: number;\r\n    retryDelay?: number;\r\n    serializer?: Serializer;\r\n    tlsOptions?: ConnectionOptions;\r\n    deserializer?: Deserializer;\r\n    socketClass?: Type<TcpSocket>;\r\n  };\r\n}\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport interface RedisOptions {\r\n  transport?: Transport.REDIS;\r\n  options?: {\r\n    host?: string;\r\n    port?: number;\r\n    retryAttempts?: number;\r\n    retryDelay?: number;\r\n    /**\r\n     * Use `psubscribe`/`pmessage` to enable wildcards in the patterns\r\n     */\r\n    wildcards?: boolean;\r\n    serializer?: Serializer;\r\n    deserializer?: Deserializer;\r\n  } & IORedisOptions;\r\n}\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport interface MqttOptions {\r\n  transport?: Transport.MQTT;\r\n  options?: MqttClientOptions & {\r\n    url?: string;\r\n    serializer?: Serializer;\r\n    deserializer?: Deserializer;\r\n    subscribeOptions?: {\r\n      /**\r\n       * The QoS\r\n       */\r\n      qos: QoS;\r\n      /*\r\n       * No local flag\r\n       * */\r\n      nl?: boolean;\r\n      /*\r\n       * Retain as Published flag\r\n       * */\r\n      rap?: boolean;\r\n      /*\r\n       * Retain Handling option\r\n       * */\r\n      rh?: number;\r\n    };\r\n    userProperties?: Record<string, string | string[]>;\r\n  };\r\n}\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport interface NatsOptions {\r\n  transport?: Transport.NATS;\r\n  options?: {\r\n    headers?: Record<string, string>;\r\n    authenticator?: any;\r\n    debug?: boolean;\r\n    ignoreClusterUpdates?: boolean;\r\n    inboxPrefix?: string;\r\n    encoding?: string;\r\n    name?: string;\r\n    user?: string;\r\n    pass?: string;\r\n    maxPingOut?: number;\r\n    maxReconnectAttempts?: number;\r\n    reconnectTimeWait?: number;\r\n    reconnectJitter?: number;\r\n    reconnectJitterTLS?: number;\r\n    reconnectDelayHandler?: any;\r\n    servers?: string[] | string;\r\n    nkey?: any;\r\n    reconnect?: boolean;\r\n    pedantic?: boolean;\r\n    tls?: any;\r\n    queue?: string;\r\n    serializer?: Serializer;\r\n    deserializer?: Deserializer;\r\n    userJWT?: string;\r\n    nonceSigner?: any;\r\n    userCreds?: any;\r\n    useOldRequestStyle?: boolean;\r\n    pingInterval?: number;\r\n    preserveBuffers?: boolean;\r\n    waitOnFirstConnect?: boolean;\r\n    verbose?: boolean;\r\n    noEcho?: boolean;\r\n    noRandomize?: boolean;\r\n    timeout?: number;\r\n    token?: string;\r\n    yieldTime?: number;\r\n    tokenHandler?: any;\r\n    [key: string]: any;\r\n  };\r\n}\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport interface RmqOptions {\r\n  transport?: Transport.RMQ;\r\n  options?: {\r\n    urls?: string[] | RmqUrl[];\r\n    queue?: string;\r\n    prefetchCount?: number;\r\n    isGlobalPrefetchCount?: boolean;\r\n    queueOptions?: any; // AmqplibQueueOptions;\r\n    socketOptions?: any; // AmqpConnectionManagerSocketOptions;\r\n    noAck?: boolean;\r\n    serializer?: Serializer;\r\n    deserializer?: Deserializer;\r\n    replyQueue?: string;\r\n    persistent?: boolean;\r\n    headers?: Record<string, string>;\r\n    noAssert?: boolean;\r\n    /**\r\n     * Maximum number of connection attempts.\r\n     * Applies only to the consumer configuration.\r\n     * -1 === infinite\r\n     * @default -1\r\n     */\r\n    maxConnectionAttempts?: number;\r\n  };\r\n}\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport interface KafkaParserConfig {\r\n  keepBinary?: boolean;\r\n}\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport interface KafkaOptions {\r\n  transport?: Transport.KAFKA;\r\n  options?: {\r\n    /**\r\n     * Defaults to `\"-server\"` on server side and `\"-client\"` on client side.\r\n     */\r\n    postfixId?: string;\r\n    client?: KafkaConfig;\r\n    consumer?: ConsumerConfig;\r\n    run?: Omit<ConsumerRunConfig, 'eachBatch' | 'eachMessage'>;\r\n    subscribe?: Omit<ConsumerSubscribeTopics, 'topics'>;\r\n    producer?: ProducerConfig;\r\n    send?: Omit<ProducerRecord, 'topic' | 'messages'>;\r\n    serializer?: Serializer;\r\n    deserializer?: Deserializer;\r\n    parser?: KafkaParserConfig;\r\n    producerOnlyMode?: boolean;\r\n  };\r\n}\r\n"]}