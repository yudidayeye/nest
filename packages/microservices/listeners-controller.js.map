{"version":3,"file":"listeners-controller.js","sourceRoot":"","sources":["listeners-controller.ts"],"names":[],"mappings":";;;AAEA,oEAAgE;AAChE,gFAA2E;AAC3E,wFAAmF;AACnF,+DAAiE;AASjE,oEAAgE;AAChE,qFAAmF;AACnF,+BAQc;AAId,yEAAoE;AAEpE,6EAG0C;AAE1C,mCAAoC;AAQpC,6EAGsC;AACtC,qCAAsC;AAGtC,MAAa,mBAAmB;IAM9B,YACmB,gBAAkC,EAClC,cAAiC,EACjC,SAAwB,EACxB,QAAkB,EAClB,aAAkC,EAClC,uBAAgD,EAChD,cAA8B;QAN9B,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,mBAAc,GAAd,cAAc,CAAmB;QACjC,cAAS,GAAT,SAAS,CAAe;QACxB,aAAQ,GAAR,QAAQ,CAAU;QAClB,kBAAa,GAAb,aAAa,CAAqB;QAClC,4BAAuB,GAAvB,uBAAuB,CAAyB;QAChD,mBAAc,GAAd,cAAc,CAAgB;QAZhC,qBAAgB,GAAG,IAAI,qDAAwB,CAC9D,IAAI,kCAAe,EAAE,CACtB,CAAC;QACe,0BAAqB,GAAG,IAAI,OAAO,EAAE,CAAC;IAUpD,CAAC;IAEG,uBAAuB,CAC5B,eAAyD,EACzD,MAAwC,EACxC,SAAiB;QAEjB,MAAM,EAAE,QAAQ,EAAE,GAAG,eAAe,CAAC;QAErC,MAAM,QAAQ,GAAG,eAAe,CAAC,sBAAsB,EAAE,CAAC;QAC1D,MAAM,eAAe,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,QAAkB,CAAC,CAAC;QAC1E,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QAC3D,MAAM,mBAAmB,GACvB,MAAM,YAAY,mBAAU;YAC1B,CAAC,CAAC,uDAA8B;YAChC,CAAC,CAAC,kDAAyB,CAAC;QAEhC,eAAe;aACZ,MAAM,CACL,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE,CAChB,IAAA,0BAAW,EAAC,SAAS,CAAC;YACtB,IAAA,0BAAW,EAAC,MAAM,CAAC,WAAW,CAAC;YAC/B,SAAS,KAAK,MAAM,CAAC,WAAW,CACnC;aACA,MAAM,CAAC,CAAC,GAAG,EAAE,OAAO,EAAE,EAAE;YACvB,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CACjC,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,OAAO,EAAE,QAAQ,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,CAC9C,CAAC;YACF,OAAO,GAAG,CAAC;QACb,CAAC,EAAE,EAAE,CAAC;aACL,OAAO,CAAC,CAAC,UAA4C,EAAE,EAAE;YACxD,MAAM,EACJ,QAAQ,EAAE,CAAC,OAAO,CAAC,EACnB,cAAc,EACd,SAAS,EACT,MAAM,EACN,cAAc,GACf,GAAG,UAAU,CAAC;YAEf,IAAI,CAAC,0BAA0B,CAC7B,eAAe,EACf,UAAU,EACV,MAAM,CAAC,WAAW,CACnB,CAAC;YAEF,IAAI,QAAQ,EAAE;gBACZ,MAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CACtC,QAAkB,EAClB,cAAc,EACd,SAAS,EACT,SAAS,EACT,0BAAc,EACd,SAAS,EACT,mBAAmB,CACpB,CAAC;gBACF,IAAI,cAAc,EAAE;oBAClB,MAAM,YAAY,GAAmB,KAAK,EAAE,GAAG,IAAe,EAAE,EAAE;wBAChE,MAAM,YAAY,GAAG,IAAI,CAAC;wBAC1B,MAAM,CAAC,iBAAiB,CAAC,GAAG,YAAY,CAAC;wBACzC,IAAI,iBAAiB,YAAY,yCAAkB,EAAE;4BACnD,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;yBACnC;wBACD,MAAM,WAAW,GAAG,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC;wBACnC,OAAO,IAAI,CAAC,0BAA0B,CACpC,WAAW,EACX,YAAY,EACZ,YAAY,CACb,CAAC;oBACJ,CAAC,CAAC;oBACF,OAAO,MAAM,CAAC,UAAU,CACtB,OAAO,EACP,YAAY,EACZ,cAAc,EACd,MAAM,CACP,CAAC;iBACH;qBAAM;oBACL,OAAO,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,EAAE,cAAc,EAAE,MAAM,CAAC,CAAC;iBAClE;aACF;YACD,MAAM,YAAY,GAAG,IAAI,CAAC,0BAA0B,CAClD,eAAe,EACf,OAAO,EACP,SAAS,EACT,SAAS,EACT,SAAS,EACT,mBAAmB,EACnB,cAAc,CACf,CAAC;YACF,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,YAAY,EAAE,cAAc,EAAE,MAAM,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,0BAA0B,CAC/B,eAAgC,EAChC,UAA4C,EAC5C,WAA+B;QAE/B,IAAI,CAAC,cAAc,CAAC,0BAA0B,CAC5C;YACE,IAAI,EAAE,cAAc;YACpB,UAAU,EAAE,UAAU,CAAC,SAAS;YAChC,SAAS,EAAE,eAAe,CAAC,QAAQ,EAAE,IAAI;YACzC,WAAW,EAAE,eAAe,CAAC,EAAE;YAC/B,QAAQ,EAAE;gBACR,GAAG,EAAE,UAAU,CAAC,QAAQ,CAAC,QAAQ,EAAE;gBACnC,WAAW,EACT,OAAO,WAAW,KAAK,QAAQ;oBAC7B,CAAC,CAAE,iBAAS,CAAC,WAAW,CAA4B;oBACpD,CAAC,CAAC,WAAW;gBACjB,QAAQ,EAAE,UAAU,CAAC,QAAQ;gBAC7B,cAAc,EAAE,UAAU,CAAC,cAAc;gBACzC,MAAM,EAAE,UAAU,CAAC,MAAM;aAC1B;SACF,EACD,eAAe,CAAC,EAAE,CACnB,CAAC;IACJ,CAAC;IAEM,0BAA0B,CAC/B,kBAA0D,EAC1D,YAAuB,EACvB,UAA0B;QAE1B,IAAI,UAAU,CAAC,IAAI,EAAE;YACnB,MAAM,oBAAoB,GAAG,UAAU,CAAC,IAAI,CAC1C,GAAI,YAA2C,CAChD,CAAC;YACF,OAAO,IAAA,eAAQ,EAAC;gBACd,OAAO,EAAE,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,CAAC;gBACvD,IAAI,EAAE,IAAI,CAAC,qBAAqB,CAAC,oBAAoB,CAAC;aACvD,CAAC,CAAC;SACJ;QACD,OAAO,kBAAkB,CAAC;IAC5B,CAAC;IAEM,yBAAyB,CAAC,QAAiC;QAChE,KAAK,MAAM,EACT,QAAQ,EACR,QAAQ,GACT,IAAI,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,QAAkB,CAAC,EAAE;YACjE,MAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YACnD,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YAExC,IAAI,CAAC,sBAAsB,CAAC,QAAkB,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;SACnE;IACH,CAAC;IAEM,sBAAsB,CAC3B,QAAiC,EACjC,QAAgB,EAChB,MAAS;QAET,OAAO,CAAC,GAAG,CAAC,QAAkB,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;IACpD,CAAC;IAEM,0BAA0B,CAC/B,OAAwB,EACxB,OAAwB,EACxB,SAAiB,EACjB,SAAiB,EACjB,SAAiB,EACjB,sBAA2C,kDAAyB,EACpE,cAAc,GAAG,KAAK;QAEtB,MAAM,UAAU,GAAG,SAAS,CAAC,WAAW,CAAC;QACzC,MAAM,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC;QAE7B,MAAM,aAAa,GAAG,OAAO,CAAC,uBAAuB,EAAE,CAAC;QAExD,MAAM,oBAAoB,GAAmB,KAAK,EAAE,GAAG,IAAe,EAAE,EAAE;YACxE,IAAI;gBACF,IAAI,SAAoB,CAAC;gBAEzB,IAAI,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC;gBAC/B,IAAI,iBAAiB,YAAY,yCAAkB,EAAE;oBACnD,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE,aAAa,CAAC,CAAC;oBAChE,IAAI,CAAC,KAAK,EAAE,CAAC;iBACd;qBAAM;oBACL,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,GAAG,IAAI,CAAC;oBAC5B,MAAM,OAAO,GAAG,yCAAkB,CAAC,MAAM,CACvC,OAAO,EACP,IAAI,EACJ,MAAwB,CACzB,CAAC;oBACF,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;oBACtD,iBAAiB,GAAG,OAAO,CAAC;iBAC7B;gBAED,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,cAAc,CACxD,QAAQ,EACR,SAAS,EACT,UAAU,EACV,SAAS,CACV,CAAC;gBACF,MAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CACtC,eAAe,EACf,eAAe,CAAC,SAAS,CAAC,EAC1B,SAAS,EACT,SAAS,EACT,SAAS,EACT,OAAO,CAAC,EAAE,EACV,mBAAmB,CACpB,CAAC;gBAEF,MAAM,WAAW,GAAG,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC;gBACnC,IAAI,cAAc,EAAE;oBAClB,OAAO,IAAI,CAAC,0BAA0B,CACpC,WAAW,EACX,CAAC,iBAAiB,EAAE,GAAG,IAAI,CAAC,EAC5B,oBAAoB,CACrB,CAAC;iBACH;gBACD,OAAO,WAAW,CAAC;aACpB;YAAC,OAAO,GAAG,EAAE;gBACZ,IAAI,eAAe,GAAG,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAClD,QAAQ,CAAC,SAAS,CAAC,CACpB,CAAC;gBACF,IAAI,CAAC,eAAe,EAAE;oBACpB,eAAe,GAAG,IAAI,CAAC,uBAAuB,CAAC,MAAM,CACnD,QAAQ,EACR,QAAQ,CAAC,SAAS,CAAC,EACnB,SAAS,CACV,CAAC;oBACF,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,eAAe,CAAC,CAAC;iBACtE;gBACD,MAAM,IAAI,GAAG,IAAI,6CAAoB,CAAC,IAAI,CAAC,CAAC;gBAC5C,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBACpB,OAAO,eAAe,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;aAC1C;QACH,CAAC,CAAC;QACF,OAAO,oBAAoB,CAAC;IAC9B,CAAC;IAEO,YAAY,CAClB,OAAU,EACV,aAAsB;QAEtB,MAAM,SAAS,GAAG,qCAAgB,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;QACzD,IAAI,CAAC,OAAO,CAAC,sCAAyB,CAAC,EAAE;YACvC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,sCAAkB,EAAE;gBACjD,KAAK,EAAE,SAAS;gBAChB,UAAU,EAAE,KAAK;gBACjB,QAAQ,EAAE,KAAK;gBACf,YAAY,EAAE,KAAK;aACpB,CAAC,CAAC;YAEH,MAAM,oBAAoB,GAAG,aAAa,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC;YACzE,IAAI,CAAC,SAAS,CAAC,uBAAuB,CAAC,oBAAoB,EAAE,SAAS,CAAC,CAAC;SACzE;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;IAUM,qBAAqB,CAAC,gBAAqB;QAChD,IAAI,gBAAgB,YAAY,OAAO,EAAE;YACvC,OAAO,IAAA,WAAW,EAAC,gBAAgB,CAAC,CAAC,IAAI,CACvC,IAAA,eAAQ,EAAC,GAAG,CAAC,EAAE,CAAC,CAAC,IAAA,mBAAY,EAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAA,SAAE,EAAC,GAAG,CAAC,CAAC,CAAC,CACrD,CAAC;SACH;QAED,IAAI,IAAA,mBAAY,EAAC,gBAAgB,CAAC,EAAE;YAClC,OAAO,gBAAgB,CAAC;SACzB;QAED,OAAO,IAAA,SAAE,EAAC,gBAAgB,CAAC,CAAC;IAC9B,CAAC;CACF;AA/RD,kDA+RC","sourcesContent":["import { Injectable } from '@nestjs/common/interfaces';\r\nimport { Controller } from '@nestjs/common/interfaces/controllers/controller.interface';\r\nimport { isUndefined } from '@nestjs/common/utils/shared.utils';\r\nimport { ContextIdFactory } from '@nestjs/core/helpers/context-id-factory';\r\nimport { ExecutionContextHost } from '@nestjs/core/helpers/execution-context-host';\r\nimport { STATIC_CONTEXT } from '@nestjs/core/injector/constants';\r\nimport { NestContainer } from '@nestjs/core/injector/container';\r\nimport { Injector } from '@nestjs/core/injector/injector';\r\nimport {\r\n  ContextId,\r\n  InstanceWrapper,\r\n} from '@nestjs/core/injector/instance-wrapper';\r\nimport { Module } from '@nestjs/core/injector/module';\r\nimport { GraphInspector } from '@nestjs/core/inspector/graph-inspector';\r\nimport { MetadataScanner } from '@nestjs/core/metadata-scanner';\r\nimport { REQUEST_CONTEXT_ID } from '@nestjs/core/router/request/request-constants';\r\nimport {\r\n  forkJoin,\r\n  from as fromPromise,\r\n  isObservable,\r\n  mergeMap,\r\n  Observable,\r\n  ObservedValueOf,\r\n  of,\r\n} from 'rxjs';\r\nimport { IClientProxyFactory } from './client/client-proxy-factory';\r\nimport { ClientsContainer } from './container';\r\nimport { ExceptionFiltersContext } from './context/exception-filters-context';\r\nimport { RequestContextHost } from './context/request-context-host';\r\nimport { RpcContextCreator } from './context/rpc-context-creator';\r\nimport {\r\n  DEFAULT_CALLBACK_METADATA,\r\n  DEFAULT_GRPC_CALLBACK_METADATA,\r\n} from './context/rpc-metadata-constants';\r\nimport { BaseRpcContext } from './ctx-host/base-rpc.context';\r\nimport { Transport } from './enums';\r\nimport {\r\n  CustomTransportStrategy,\r\n  MessageHandler,\r\n  PatternMetadata,\r\n  RequestContext,\r\n} from './interfaces';\r\nimport { MicroserviceEntrypointMetadata } from './interfaces/microservice-entrypoint-metadata.interface';\r\nimport {\r\n  EventOrMessageListenerDefinition,\r\n  ListenerMetadataExplorer,\r\n} from './listener-metadata-explorer';\r\nimport { ServerGrpc } from './server';\r\nimport { Server } from './server/server';\r\n\r\nexport class ListenersController {\r\n  private readonly metadataExplorer = new ListenerMetadataExplorer(\r\n    new MetadataScanner(),\r\n  );\r\n  private readonly exceptionFiltersCache = new WeakMap();\r\n\r\n  constructor(\r\n    private readonly clientsContainer: ClientsContainer,\r\n    private readonly contextCreator: RpcContextCreator,\r\n    private readonly container: NestContainer,\r\n    private readonly injector: Injector,\r\n    private readonly clientFactory: IClientProxyFactory,\r\n    private readonly exceptionFiltersContext: ExceptionFiltersContext,\r\n    private readonly graphInspector: GraphInspector,\r\n  ) {}\r\n\r\n  public registerPatternHandlers(\r\n    instanceWrapper: InstanceWrapper<Controller | Injectable>,\r\n    server: Server & CustomTransportStrategy,\r\n    moduleKey: string,\r\n  ) {\r\n    const { instance } = instanceWrapper;\r\n\r\n    const isStatic = instanceWrapper.isDependencyTreeStatic();\r\n    const patternHandlers = this.metadataExplorer.explore(instance as object);\r\n    const moduleRef = this.container.getModuleByKey(moduleKey);\r\n    const defaultCallMetadata =\r\n      server instanceof ServerGrpc\r\n        ? DEFAULT_GRPC_CALLBACK_METADATA\r\n        : DEFAULT_CALLBACK_METADATA;\r\n\r\n    patternHandlers\r\n      .filter(\r\n        ({ transport }) =>\r\n          isUndefined(transport) ||\r\n          isUndefined(server.transportId) ||\r\n          transport === server.transportId,\r\n      )\r\n      .reduce((acc, handler) => {\r\n        handler.patterns.forEach(pattern =>\r\n          acc.push({ ...handler, patterns: [pattern] }),\r\n        );\r\n        return acc;\r\n      }, [])\r\n      .forEach((definition: EventOrMessageListenerDefinition) => {\r\n        const {\r\n          patterns: [pattern],\r\n          targetCallback,\r\n          methodKey,\r\n          extras,\r\n          isEventHandler,\r\n        } = definition;\r\n\r\n        this.insertEntrypointDefinition(\r\n          instanceWrapper,\r\n          definition,\r\n          server.transportId,\r\n        );\r\n\r\n        if (isStatic) {\r\n          const proxy = this.contextCreator.create(\r\n            instance as object,\r\n            targetCallback,\r\n            moduleKey,\r\n            methodKey,\r\n            STATIC_CONTEXT,\r\n            undefined,\r\n            defaultCallMetadata,\r\n          );\r\n          if (isEventHandler) {\r\n            const eventHandler: MessageHandler = async (...args: unknown[]) => {\r\n              const originalArgs = args;\r\n              const [dataOrContextHost] = originalArgs;\r\n              if (dataOrContextHost instanceof RequestContextHost) {\r\n                args = args.slice(1, args.length);\r\n              }\r\n              const returnValue = proxy(...args);\r\n              return this.forkJoinHandlersIfAttached(\r\n                returnValue,\r\n                originalArgs,\r\n                eventHandler,\r\n              );\r\n            };\r\n            return server.addHandler(\r\n              pattern,\r\n              eventHandler,\r\n              isEventHandler,\r\n              extras,\r\n            );\r\n          } else {\r\n            return server.addHandler(pattern, proxy, isEventHandler, extras);\r\n          }\r\n        }\r\n        const asyncHandler = this.createRequestScopedHandler(\r\n          instanceWrapper,\r\n          pattern,\r\n          moduleRef,\r\n          moduleKey,\r\n          methodKey,\r\n          defaultCallMetadata,\r\n          isEventHandler,\r\n        );\r\n        server.addHandler(pattern, asyncHandler, isEventHandler, extras);\r\n      });\r\n  }\r\n\r\n  public insertEntrypointDefinition(\r\n    instanceWrapper: InstanceWrapper,\r\n    definition: EventOrMessageListenerDefinition,\r\n    transportId: Transport | symbol,\r\n  ) {\r\n    this.graphInspector.insertEntrypointDefinition<MicroserviceEntrypointMetadata>(\r\n      {\r\n        type: 'microservice',\r\n        methodName: definition.methodKey,\r\n        className: instanceWrapper.metatype?.name,\r\n        classNodeId: instanceWrapper.id,\r\n        metadata: {\r\n          key: definition.patterns.toString(),\r\n          transportId:\r\n            typeof transportId === 'number'\r\n              ? (Transport[transportId] as keyof typeof Transport)\r\n              : transportId,\r\n          patterns: definition.patterns,\r\n          isEventHandler: definition.isEventHandler,\r\n          extras: definition.extras,\r\n        },\r\n      },\r\n      instanceWrapper.id,\r\n    );\r\n  }\r\n\r\n  public forkJoinHandlersIfAttached(\r\n    currentReturnValue: Promise<unknown> | Observable<unknown>,\r\n    originalArgs: unknown[],\r\n    handlerRef: MessageHandler,\r\n  ) {\r\n    if (handlerRef.next) {\r\n      const returnedValueWrapper = handlerRef.next(\r\n        ...(originalArgs as Parameters<MessageHandler>),\r\n      );\r\n      return forkJoin({\r\n        current: this.transformToObservable(currentReturnValue),\r\n        next: this.transformToObservable(returnedValueWrapper),\r\n      });\r\n    }\r\n    return currentReturnValue;\r\n  }\r\n\r\n  public assignClientsToProperties(instance: Controller | Injectable) {\r\n    for (const {\r\n      property,\r\n      metadata,\r\n    } of this.metadataExplorer.scanForClientHooks(instance as object)) {\r\n      const client = this.clientFactory.create(metadata);\r\n      this.clientsContainer.addClient(client);\r\n\r\n      this.assignClientToInstance(instance as object, property, client);\r\n    }\r\n  }\r\n\r\n  public assignClientToInstance<T = any>(\r\n    instance: Controller | Injectable,\r\n    property: string,\r\n    client: T,\r\n  ) {\r\n    Reflect.set(instance as object, property, client);\r\n  }\r\n\r\n  public createRequestScopedHandler(\r\n    wrapper: InstanceWrapper,\r\n    pattern: PatternMetadata,\r\n    moduleRef: Module,\r\n    moduleKey: string,\r\n    methodKey: string,\r\n    defaultCallMetadata: Record<string, any> = DEFAULT_CALLBACK_METADATA,\r\n    isEventHandler = false,\r\n  ) {\r\n    const collection = moduleRef.controllers;\r\n    const { instance } = wrapper;\r\n\r\n    const isTreeDurable = wrapper.isDependencyTreeDurable();\r\n\r\n    const requestScopedHandler: MessageHandler = async (...args: unknown[]) => {\r\n      try {\r\n        let contextId: ContextId;\r\n\r\n        let [dataOrContextHost] = args;\r\n        if (dataOrContextHost instanceof RequestContextHost) {\r\n          contextId = this.getContextId(dataOrContextHost, isTreeDurable);\r\n          args.shift();\r\n        } else {\r\n          const [data, reqCtx] = args;\r\n          const request = RequestContextHost.create(\r\n            pattern,\r\n            data,\r\n            reqCtx as BaseRpcContext,\r\n          );\r\n          contextId = this.getContextId(request, isTreeDurable);\r\n          dataOrContextHost = request;\r\n        }\r\n\r\n        const contextInstance = await this.injector.loadPerContext(\r\n          instance,\r\n          moduleRef,\r\n          collection,\r\n          contextId,\r\n        );\r\n        const proxy = this.contextCreator.create(\r\n          contextInstance,\r\n          contextInstance[methodKey],\r\n          moduleKey,\r\n          methodKey,\r\n          contextId,\r\n          wrapper.id,\r\n          defaultCallMetadata,\r\n        );\r\n\r\n        const returnValue = proxy(...args);\r\n        if (isEventHandler) {\r\n          return this.forkJoinHandlersIfAttached(\r\n            returnValue,\r\n            [dataOrContextHost, ...args],\r\n            requestScopedHandler,\r\n          );\r\n        }\r\n        return returnValue;\r\n      } catch (err) {\r\n        let exceptionFilter = this.exceptionFiltersCache.get(\r\n          instance[methodKey],\r\n        );\r\n        if (!exceptionFilter) {\r\n          exceptionFilter = this.exceptionFiltersContext.create(\r\n            instance,\r\n            instance[methodKey],\r\n            moduleKey,\r\n          );\r\n          this.exceptionFiltersCache.set(instance[methodKey], exceptionFilter);\r\n        }\r\n        const host = new ExecutionContextHost(args);\r\n        host.setType('rpc');\r\n        return exceptionFilter.handle(err, host);\r\n      }\r\n    };\r\n    return requestScopedHandler;\r\n  }\r\n\r\n  private getContextId<T extends RequestContext = any>(\r\n    request: T,\r\n    isTreeDurable: boolean,\r\n  ): ContextId {\r\n    const contextId = ContextIdFactory.getByRequest(request);\r\n    if (!request[REQUEST_CONTEXT_ID as any]) {\r\n      Object.defineProperty(request, REQUEST_CONTEXT_ID, {\r\n        value: contextId,\r\n        enumerable: false,\r\n        writable: false,\r\n        configurable: false,\r\n      });\r\n\r\n      const requestProviderValue = isTreeDurable ? contextId.payload : request;\r\n      this.container.registerRequestProvider(requestProviderValue, contextId);\r\n    }\r\n    return contextId;\r\n  }\r\n\r\n  public transformToObservable<T>(\r\n    resultOrDeferred: Observable<T> | Promise<T>,\r\n  ): Observable<T>;\r\n  public transformToObservable<T>(\r\n    resultOrDeferred: T,\r\n  ): never extends Observable<ObservedValueOf<T>>\r\n    ? Observable<T>\r\n    : Observable<ObservedValueOf<T>>;\r\n  public transformToObservable(resultOrDeferred: any) {\r\n    if (resultOrDeferred instanceof Promise) {\r\n      return fromPromise(resultOrDeferred).pipe(\r\n        mergeMap(val => (isObservable(val) ? val : of(val))),\r\n      );\r\n    }\r\n\r\n    if (isObservable(resultOrDeferred)) {\r\n      return resultOrDeferred;\r\n    }\r\n\r\n    return of(resultOrDeferred);\r\n  }\r\n}\r\n"]}