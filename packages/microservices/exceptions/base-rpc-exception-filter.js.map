{"version":3,"file":"base-rpc-exception-filter.js","sourceRoot":"","sources":["base-rpc-exception-filter.ts"],"names":[],"mappings":";;;AAAA,kCAAkC;AAClC,2CAA2E;AAC3E,oEAA6D;AAC7D,sDAAkD;AAClD,+BAAwD;AACxD,mDAA+C;AAE/C;;GAEG;AACH,MAAa,sBAAsB;IAK1B,KAAK,CAAC,SAAY,EAAE,IAAmB;QAC5C,MAAM,MAAM,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,CAAC,SAAS,YAAY,4BAAY,CAAC,EAAE;YACxC,OAAO,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;SACnD;QACD,MAAM,GAAG,GAAG,SAAS,CAAC,QAAQ,EAAE,CAAC;QACjC,MAAM,OAAO,GAAG,IAAA,uBAAQ,EAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC;QAC/D,OAAO,IAAA,iBAAM,EAAC,GAAG,EAAE,CAAC,OAAO,CAAC,CAAC;IAC/B,CAAC;IAEM,kBAAkB,CAAC,SAAY,EAAE,MAAc;QACpD,MAAM,YAAY,GAAG,oBAAQ,CAAC,yBAAyB,CAAC;QAExD,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;YACxC,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,EAAE,SAAS,CAAC,KAAK,CAAC;YACtC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;QAChB,MAAM,MAAM,GAAG,sBAAsB,CAAC,MAAM,CAAC;QAC7C,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,EAAE,UAAiB,CAAC,CAAC;QAE9C,OAAO,IAAA,iBAAM,EAAC,GAAG,EAAE,CAAC,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,YAAY,EAAE,CAAC,CAAC,CAAC;IAC3D,CAAC;IAEM,OAAO,CAAC,SAAc;QAC3B,OAAO,CAAC,CAAC,CAAC,IAAA,uBAAQ,EAAC,SAAS,CAAC,IAAK,SAAmB,CAAC,OAAO,CAAC,CAAC;IACjE,CAAC;;AA7BH,wDA8BC;AA3ByB,6BAAM,GAAG,IAAI,eAAM,CAAC,sBAAsB,CAAC,CAAC","sourcesContent":["/* eslint-disable prefer-spread */\r\nimport { ArgumentsHost, Logger, RpcExceptionFilter } from '@nestjs/common';\r\nimport { isObject } from '@nestjs/common/utils/shared.utils';\r\nimport { MESSAGES } from '@nestjs/core/constants';\r\nimport { Observable, throwError as _throw } from 'rxjs';\r\nimport { RpcException } from './rpc-exception';\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport class BaseRpcExceptionFilter<T = any, R = any>\r\n  implements RpcExceptionFilter<T>\r\n{\r\n  private static readonly logger = new Logger('RpcExceptionsHandler');\r\n\r\n  public catch(exception: T, host: ArgumentsHost): Observable<R> {\r\n    const status = 'error';\r\n    if (!(exception instanceof RpcException)) {\r\n      return this.handleUnknownError(exception, status);\r\n    }\r\n    const res = exception.getError();\r\n    const message = isObject(res) ? res : { status, message: res };\r\n    return _throw(() => message);\r\n  }\r\n\r\n  public handleUnknownError(exception: T, status: string) {\r\n    const errorMessage = MESSAGES.UNKNOWN_EXCEPTION_MESSAGE;\r\n\r\n    const loggerArgs = this.isError(exception)\r\n      ? [exception.message, exception.stack]\r\n      : [exception];\r\n    const logger = BaseRpcExceptionFilter.logger;\r\n    logger.error.apply(logger, loggerArgs as any);\r\n\r\n    return _throw(() => ({ status, message: errorMessage }));\r\n  }\r\n\r\n  public isError(exception: any): exception is Error {\r\n    return !!(isObject(exception) && (exception as Error).message);\r\n  }\r\n}\r\n"]}