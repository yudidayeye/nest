{"version":3,"file":"rpc-exceptions-handler.js","sourceRoot":"","sources":["rpc-exceptions-handler.ts"],"names":[],"mappings":";;;AAAA,oEAA4D;AAI5D,sHAA2G;AAC3G,0HAAoH;AAEpH,2EAAqE;AAErE;;GAEG;AACH,MAAa,oBAAqB,SAAQ,kDAAsB;IAAhE;;QACU,YAAO,GAAiC,EAAE,CAAC;IA+BrD,CAAC;IA7BQ,MAAM,CACX,SAAqC,EACrC,IAAmB;QAEnB,MAAM,aAAa,GAAG,IAAI,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QAChE,IAAI,aAAa,EAAE;YACjB,OAAO,aAAa,CAAC;SACtB;QACD,OAAO,KAAK,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IACtC,CAAC;IAEM,gBAAgB,CAAC,OAAqC;QAC3D,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YAC3B,MAAM,IAAI,oEAA+B,EAAE,CAAC;SAC7C;QACD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAEM,mBAAmB,CACxB,SAAY,EACZ,IAAmB;QAEnB,IAAI,IAAA,sBAAO,EAAC,IAAI,CAAC,OAAO,CAAC,EAAE;YACzB,OAAO,IAAI,CAAC;SACb;QAED,MAAM,MAAM,GAAG,IAAA,qEAA6B,EAAC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QACtE,OAAO,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IACtD,CAAC;CACF;AAhCD,oDAgCC","sourcesContent":["import { isEmpty } from '@nestjs/common/utils/shared.utils';\r\nimport { Observable } from 'rxjs';\r\nimport { ArgumentsHost } from '@nestjs/common/interfaces/features/arguments-host.interface';\r\nimport { RpcExceptionFilterMetadata } from '@nestjs/common/interfaces/exceptions';\r\nimport { selectExceptionFilterMetadata } from '@nestjs/common/utils/select-exception-filter-metadata.util';\r\nimport { InvalidExceptionFilterException } from '@nestjs/core/errors/exceptions/invalid-exception-filter.exception';\r\nimport { RpcException } from './rpc-exception';\r\nimport { BaseRpcExceptionFilter } from './base-rpc-exception-filter';\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport class RpcExceptionsHandler extends BaseRpcExceptionFilter {\r\n  private filters: RpcExceptionFilterMetadata[] = [];\r\n\r\n  public handle(\r\n    exception: Error | RpcException | any,\r\n    host: ArgumentsHost,\r\n  ): Observable<any> {\r\n    const filterResult$ = this.invokeCustomFilters(exception, host);\r\n    if (filterResult$) {\r\n      return filterResult$;\r\n    }\r\n    return super.catch(exception, host);\r\n  }\r\n\r\n  public setCustomFilters(filters: RpcExceptionFilterMetadata[]) {\r\n    if (!Array.isArray(filters)) {\r\n      throw new InvalidExceptionFilterException();\r\n    }\r\n    this.filters = filters;\r\n  }\r\n\r\n  public invokeCustomFilters<T = any>(\r\n    exception: T,\r\n    host: ArgumentsHost,\r\n  ): Observable<any> | null {\r\n    if (isEmpty(this.filters)) {\r\n      return null;\r\n    }\r\n\r\n    const filter = selectExceptionFilterMetadata(this.filters, exception);\r\n    return filter ? filter.func(exception, host) : null;\r\n  }\r\n}\r\n"]}