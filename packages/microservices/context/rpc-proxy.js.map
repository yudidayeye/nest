{"version":3,"file":"rpc-proxy.js","sourceRoot":"","sources":["rpc-proxy.ts"],"names":[],"mappings":";;;AAAA,wFAAmF;AACnF,+BAAgD;AAChD,8CAA4C;AAG5C,MAAa,QAAQ;IACZ,MAAM,CACX,cAAgE,EAChE,iBAAuC;QAEvC,OAAO,KAAK,EAAE,GAAG,IAAe,EAAE,EAAE;YAClC,IAAI;gBACF,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,GAAG,IAAI,CAAC,CAAC;gBAC7C,OAAO,CAAC,IAAA,mBAAY,EAAC,MAAM,CAAC;oBAC1B,CAAC,CAAC,MAAM;oBACR,CAAC,CAAC,MAAM,CAAC,IAAI,CACT,IAAA,sBAAU,EAAC,KAAK,CAAC,EAAE,CACjB,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE,IAAI,EAAE,KAAK,CAAC,CACjD,CACF,CAAC;aACP;YAAC,OAAO,KAAK,EAAE;gBACd,OAAO,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;aACzD;QACH,CAAC,CAAC;IACJ,CAAC;IAED,WAAW,CACT,iBAAuC,EACvC,IAAe,EACf,KAAQ;QAER,MAAM,IAAI,GAAG,IAAI,6CAAoB,CAAC,IAAI,CAAC,CAAC;QAC5C,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACpB,OAAO,iBAAiB,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IAC/C,CAAC;CACF;AA9BD,4BA8BC","sourcesContent":["import { ExecutionContextHost } from '@nestjs/core/helpers/execution-context-host';\r\nimport { isObservable, Observable } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { RpcExceptionsHandler } from '../exceptions/rpc-exceptions-handler';\r\n\r\nexport class RpcProxy {\r\n  public create(\r\n    targetCallback: (...args: unknown[]) => Promise<Observable<any>>,\r\n    exceptionsHandler: RpcExceptionsHandler,\r\n  ): (...args: unknown[]) => Promise<Observable<unknown>> {\r\n    return async (...args: unknown[]) => {\r\n      try {\r\n        const result = await targetCallback(...args);\r\n        return !isObservable(result)\r\n          ? result\r\n          : result.pipe(\r\n              catchError(error =>\r\n                this.handleError(exceptionsHandler, args, error),\r\n              ),\r\n            );\r\n      } catch (error) {\r\n        return this.handleError(exceptionsHandler, args, error);\r\n      }\r\n    };\r\n  }\r\n\r\n  handleError<T>(\r\n    exceptionsHandler: RpcExceptionsHandler,\r\n    args: unknown[],\r\n    error: T,\r\n  ): Observable<unknown> {\r\n    const host = new ExecutionContextHost(args);\r\n    host.setType('rpc');\r\n    return exceptionsHandler.handle(error, host);\r\n  }\r\n}\r\n"]}