{"version":3,"file":"exception-filters-context.js","sourceRoot":"","sources":["exception-filters-context.ts"],"names":[],"mappings":";;;AAAA,wDAAsE;AAEtE,oEAA4D;AAE5D,yGAAmG;AACnG,+DAAiE;AAGjE,qCAAkC;AAElC,iFAA4E;AAE5E;;GAEG;AACH,MAAa,uBAAwB,SAAQ,0DAA0B;IACrE,YACE,SAAwB,EACP,MAAyB;QAE1C,KAAK,CAAC,SAAS,CAAC,CAAC;QAFA,WAAM,GAAN,MAAM,CAAmB;IAG5C,CAAC;IAEM,MAAM,CACX,QAAoB,EACpB,QAA+C,EAC/C,MAAc,EACd,SAAS,GAAG,0BAAc,EAC1B,UAAmB;QAEnB,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC;QAE5B,MAAM,gBAAgB,GAAG,IAAI,6CAAoB,EAAE,CAAC;QACpD,MAAM,OAAO,GAAG,IAAI,CAAC,aAAa,CAChC,QAAQ,EACR,QAAQ,EACR,sCAA0B,EAC1B,SAAS,EACT,UAAU,CACX,CAAC;QACF,IAAI,IAAA,sBAAO,EAAC,OAAO,CAAC,EAAE;YACpB,OAAO,gBAAgB,CAAC;SACzB;QACD,gBAAgB,CAAC,gBAAgB,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC;QACrD,OAAO,gBAAgB,CAAC;IAC1B,CAAC;IAEM,iBAAiB,CACtB,SAAS,GAAG,0BAAc,EAC1B,UAAmB;QAEnB,MAAM,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAO,CAAC;QAC1D,IAAI,SAAS,KAAK,0BAAc,IAAI,CAAC,UAAU,EAAE;YAC/C,OAAO,aAAa,CAAC;SACtB;QACD,MAAM,oBAAoB,GACxB,IAAI,CAAC,MAAM,CAAC,uBAAuB,EAAuB,CAAC;QAC7D,MAAM,aAAa,GAAG,IAAA,iBAAO,EAAC,oBAAoB,CAAC;aAChD,GAAG,CAAC,OAAO,CAAC,EAAE,CACb,OAAO,CAAC,sBAAsB,CAC5B,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,OAAO,CAAC,EACrC,UAAU,CACX,CACF;aACA,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;aACtB,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC;aAC1B,OAAO,EAAE,CAAC;QAEb,OAAO,aAAa,CAAC,MAAM,CAAC,aAAa,CAAM,CAAC;IAClD,CAAC;CACF;AAvDD,0DAuDC","sourcesContent":["import { EXCEPTION_FILTERS_METADATA } from '@nestjs/common/constants';\r\nimport { Controller } from '@nestjs/common/interfaces/controllers/controller.interface';\r\nimport { isEmpty } from '@nestjs/common/utils/shared.utils';\r\nimport { ApplicationConfig } from '@nestjs/core/application-config';\r\nimport { BaseExceptionFilterContext } from '@nestjs/core/exceptions/base-exception-filter-context';\r\nimport { STATIC_CONTEXT } from '@nestjs/core/injector/constants';\r\nimport { NestContainer } from '@nestjs/core/injector/container';\r\nimport { InstanceWrapper } from '@nestjs/core/injector/instance-wrapper';\r\nimport { iterate } from 'iterare';\r\nimport { Observable } from 'rxjs';\r\nimport { RpcExceptionsHandler } from '../exceptions/rpc-exceptions-handler';\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport class ExceptionFiltersContext extends BaseExceptionFilterContext {\r\n  constructor(\r\n    container: NestContainer,\r\n    private readonly config: ApplicationConfig,\r\n  ) {\r\n    super(container);\r\n  }\r\n\r\n  public create(\r\n    instance: Controller,\r\n    callback: <T = any>(data: T) => Observable<any>,\r\n    module: string,\r\n    contextId = STATIC_CONTEXT,\r\n    inquirerId?: string,\r\n  ): RpcExceptionsHandler {\r\n    this.moduleContext = module;\r\n\r\n    const exceptionHandler = new RpcExceptionsHandler();\r\n    const filters = this.createContext(\r\n      instance,\r\n      callback,\r\n      EXCEPTION_FILTERS_METADATA,\r\n      contextId,\r\n      inquirerId,\r\n    );\r\n    if (isEmpty(filters)) {\r\n      return exceptionHandler;\r\n    }\r\n    exceptionHandler.setCustomFilters(filters.reverse());\r\n    return exceptionHandler;\r\n  }\r\n\r\n  public getGlobalMetadata<T extends any[]>(\r\n    contextId = STATIC_CONTEXT,\r\n    inquirerId?: string,\r\n  ): T {\r\n    const globalFilters = this.config.getGlobalFilters() as T;\r\n    if (contextId === STATIC_CONTEXT && !inquirerId) {\r\n      return globalFilters;\r\n    }\r\n    const scopedFilterWrappers =\r\n      this.config.getGlobalRequestFilters() as InstanceWrapper[];\r\n    const scopedFilters = iterate(scopedFilterWrappers)\r\n      .map(wrapper =>\r\n        wrapper.getInstanceByContextId(\r\n          this.getContextId(contextId, wrapper),\r\n          inquirerId,\r\n        ),\r\n      )\r\n      .filter(host => !!host)\r\n      .map(host => host.instance)\r\n      .toArray();\r\n\r\n    return globalFilters.concat(scopedFilters) as T;\r\n  }\r\n}\r\n"]}