{"version":3,"file":"scanner.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["scanner.ts"],"names":[],"mappings":"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","sourcesContent":["import { DynamicModule, ForwardReference, Provider } from '@nestjs/common';\r\nimport {\r\n  CATCH_WATERMARK,\r\n  CONTROLLER_WATERMARK,\r\n  ENHANCER_KEY_TO_SUBTYPE_MAP,\r\n  EXCEPTION_FILTERS_METADATA,\r\n  EnhancerSubtype,\r\n  GUARDS_METADATA,\r\n  INJECTABLE_WATERMARK,\r\n  INTERCEPTORS_METADATA,\r\n  MODULE_METADATA,\r\n  PIPES_METADATA,\r\n  ROUTE_ARGS_METADATA,\r\n} from '@nestjs/common/constants';\r\nimport {\r\n  CanActivate,\r\n  ClassProvider,\r\n  Controller,\r\n  ExceptionFilter,\r\n  ExistingProvider,\r\n  FactoryProvider,\r\n  Injectable,\r\n  InjectionToken,\r\n  NestInterceptor,\r\n  PipeTransform,\r\n  Scope,\r\n  Type,\r\n  ValueProvider,\r\n} from '@nestjs/common/interfaces';\r\nimport {\r\n  isFunction,\r\n  isNil,\r\n  isUndefined,\r\n} from '@nestjs/common/utils/shared.utils';\r\nimport { iterate } from 'iterare';\r\nimport { ApplicationConfig } from './application-config';\r\nimport {\r\n  APP_FILTER,\r\n  APP_GUARD,\r\n  APP_INTERCEPTOR,\r\n  APP_PIPE,\r\n  ENHANCER_TOKEN_TO_SUBTYPE_MAP,\r\n} from './constants';\r\nimport { CircularDependencyException } from './errors/exceptions/circular-dependency.exception';\r\nimport { InvalidClassModuleException } from './errors/exceptions/invalid-class-module.exception';\r\nimport { InvalidModuleException } from './errors/exceptions/invalid-module.exception';\r\nimport { UndefinedModuleException } from './errors/exceptions/undefined-module.exception';\r\nimport { getClassScope } from './helpers/get-class-scope';\r\nimport { NestContainer } from './injector/container';\r\nimport { InstanceWrapper } from './injector/instance-wrapper';\r\nimport { InternalCoreModuleFactory } from './injector/internal-core-module/internal-core-module-factory';\r\nimport { Module } from './injector/module';\r\nimport { GraphInspector } from './inspector/graph-inspector';\r\nimport { UuidFactory } from './inspector/uuid-factory';\r\nimport { ModuleDefinition } from './interfaces/module-definition.interface';\r\nimport { ModuleOverride } from './interfaces/module-override.interface';\r\nimport { MetadataScanner } from './metadata-scanner';\r\n\r\ninterface ApplicationProviderWrapper {\r\n  moduleKey: string;\r\n  providerKey: string;\r\n  type: InjectionToken;\r\n  scope?: Scope;\r\n}\r\n\r\ninterface ModulesScanParameters {\r\n  moduleDefinition: ModuleDefinition;\r\n  scope?: Type<unknown>[];\r\n  ctxRegistry?: (ForwardReference | DynamicModule | Type<unknown>)[];\r\n  overrides?: ModuleOverride[];\r\n  lazy?: boolean;\r\n}\r\n\r\nexport class DependenciesScanner {\r\n  private readonly applicationProvidersApplyMap: ApplicationProviderWrapper[] =\r\n    [];\r\n\r\n  constructor(\r\n    private readonly container: NestContainer,\r\n    private readonly metadataScanner: MetadataScanner,\r\n    private readonly graphInspector: GraphInspector,\r\n    private readonly applicationConfig = new ApplicationConfig(),\r\n  ) {}\r\n\r\n  public async scan(\r\n    module: Type<any>,\r\n    options?: { overrides?: ModuleOverride[] },\r\n  ) {\r\n    await this.registerCoreModule(options?.overrides);\r\n    await this.scanForModules({\r\n      moduleDefinition: module,\r\n      overrides: options?.overrides,\r\n    });\r\n    await this.scanModulesForDependencies();\r\n    this.calculateModulesDistance();\r\n\r\n    this.addScopedEnhancersMetadata();\r\n    this.container.bindGlobalScope();\r\n  }\r\n\r\n  public async scanForModules({\r\n    moduleDefinition,\r\n    lazy,\r\n    scope = [],\r\n    ctxRegistry = [],\r\n    overrides = [],\r\n  }: ModulesScanParameters): Promise<Module[]> {\r\n    const { moduleRef: moduleInstance, inserted: moduleInserted } =\r\n      (await this.insertOrOverrideModule(moduleDefinition, overrides, scope)) ??\r\n      {};\r\n\r\n    moduleDefinition =\r\n      this.getOverrideModuleByModule(moduleDefinition, overrides)?.newModule ??\r\n      moduleDefinition;\r\n\r\n    moduleDefinition =\r\n      moduleDefinition instanceof Promise\r\n        ? await moduleDefinition\r\n        : moduleDefinition;\r\n\r\n    ctxRegistry.push(moduleDefinition);\r\n\r\n    if (this.isForwardReference(moduleDefinition)) {\r\n      moduleDefinition = (moduleDefinition as ForwardReference).forwardRef();\r\n    }\r\n    const modules = !this.isDynamicModule(\r\n      moduleDefinition as Type<any> | DynamicModule,\r\n    )\r\n      ? this.reflectMetadata(\r\n          MODULE_METADATA.IMPORTS,\r\n          moduleDefinition as Type<any>,\r\n        )\r\n      : [\r\n          ...this.reflectMetadata(\r\n            MODULE_METADATA.IMPORTS,\r\n            (moduleDefinition as DynamicModule).module,\r\n          ),\r\n          ...((moduleDefinition as DynamicModule).imports || []),\r\n        ];\r\n\r\n    let registeredModuleRefs = [];\r\n    for (const [index, innerModule] of modules.entries()) {\r\n      // In case of a circular dependency (ES module system), JavaScript will resolve the type to `undefined`.\r\n      if (innerModule === undefined) {\r\n        throw new UndefinedModuleException(moduleDefinition, index, scope);\r\n      }\r\n      if (!innerModule) {\r\n        throw new InvalidModuleException(moduleDefinition, index, scope);\r\n      }\r\n      if (ctxRegistry.includes(innerModule)) {\r\n        continue;\r\n      }\r\n      const moduleRefs = await this.scanForModules({\r\n        moduleDefinition: innerModule,\r\n        scope: [].concat(scope, moduleDefinition),\r\n        ctxRegistry,\r\n        overrides,\r\n        lazy,\r\n      });\r\n      registeredModuleRefs = registeredModuleRefs.concat(moduleRefs);\r\n    }\r\n    if (!moduleInstance) {\r\n      return registeredModuleRefs;\r\n    }\r\n\r\n    if (lazy && moduleInserted) {\r\n      this.container.bindGlobalsToImports(moduleInstance);\r\n    }\r\n    return [moduleInstance].concat(registeredModuleRefs);\r\n  }\r\n\r\n  public async insertModule(\r\n    moduleDefinition: any,\r\n    scope: Type<unknown>[],\r\n  ): Promise<\r\n    | {\r\n        moduleRef: Module;\r\n        inserted: boolean;\r\n      }\r\n    | undefined\r\n  > {\r\n    const moduleToAdd = this.isForwardReference(moduleDefinition)\r\n      ? moduleDefinition.forwardRef()\r\n      : moduleDefinition;\r\n\r\n    if (\r\n      this.isInjectable(moduleToAdd) ||\r\n      this.isController(moduleToAdd) ||\r\n      this.isExceptionFilter(moduleToAdd)\r\n    ) {\r\n      throw new InvalidClassModuleException(moduleDefinition, scope);\r\n    }\r\n\r\n    return this.container.addModule(moduleToAdd, scope);\r\n  }\r\n\r\n  public async scanModulesForDependencies(\r\n    modules: Map<string, Module> = this.container.getModules(),\r\n  ) {\r\n    for (const [token, { metatype }] of modules) {\r\n      await this.reflectImports(metatype, token, metatype.name);\r\n      this.reflectProviders(metatype, token);\r\n      this.reflectControllers(metatype, token);\r\n      this.reflectExports(metatype, token);\r\n    }\r\n  }\r\n\r\n  public async reflectImports(\r\n    module: Type<unknown>,\r\n    token: string,\r\n    context: string,\r\n  ) {\r\n    const modules = [\r\n      ...this.reflectMetadata(MODULE_METADATA.IMPORTS, module),\r\n      ...this.container.getDynamicMetadataByToken(\r\n        token,\r\n        MODULE_METADATA.IMPORTS as 'imports',\r\n      ),\r\n    ];\r\n    for (const related of modules) {\r\n      await this.insertImport(related, token, context);\r\n    }\r\n  }\r\n\r\n  public reflectProviders(module: Type<any>, token: string) {\r\n    const providers = [\r\n      ...this.reflectMetadata(MODULE_METADATA.PROVIDERS, module),\r\n      ...this.container.getDynamicMetadataByToken(\r\n        token,\r\n        MODULE_METADATA.PROVIDERS as 'providers',\r\n      ),\r\n    ];\r\n    providers.forEach(provider => {\r\n      this.insertProvider(provider, token);\r\n      this.reflectDynamicMetadata(provider, token);\r\n    });\r\n  }\r\n\r\n  public reflectControllers(module: Type<any>, token: string) {\r\n    const controllers = [\r\n      ...this.reflectMetadata(MODULE_METADATA.CONTROLLERS, module),\r\n      ...this.container.getDynamicMetadataByToken(\r\n        token,\r\n        MODULE_METADATA.CONTROLLERS as 'controllers',\r\n      ),\r\n    ];\r\n    controllers.forEach(item => {\r\n      this.insertController(item, token);\r\n      this.reflectDynamicMetadata(item, token);\r\n    });\r\n  }\r\n\r\n  public reflectDynamicMetadata(cls: Type<Injectable>, token: string) {\r\n    if (!cls || !cls.prototype) {\r\n      return;\r\n    }\r\n    this.reflectInjectables(cls, token, GUARDS_METADATA);\r\n    this.reflectInjectables(cls, token, INTERCEPTORS_METADATA);\r\n    this.reflectInjectables(cls, token, EXCEPTION_FILTERS_METADATA);\r\n    this.reflectInjectables(cls, token, PIPES_METADATA);\r\n    this.reflectParamInjectables(cls, token, ROUTE_ARGS_METADATA);\r\n  }\r\n\r\n  public reflectExports(module: Type<unknown>, token: string) {\r\n    const exports = [\r\n      ...this.reflectMetadata(MODULE_METADATA.EXPORTS, module),\r\n      ...this.container.getDynamicMetadataByToken(\r\n        token,\r\n        MODULE_METADATA.EXPORTS as 'exports',\r\n      ),\r\n    ];\r\n    exports.forEach(exportedProvider =>\r\n      this.insertExportedProvider(exportedProvider, token),\r\n    );\r\n  }\r\n\r\n  public reflectInjectables(\r\n    component: Type<Injectable>,\r\n    token: string,\r\n    metadataKey: string,\r\n  ) {\r\n    const controllerInjectables = this.reflectMetadata<Type<Injectable>>(\r\n      metadataKey,\r\n      component,\r\n    );\r\n    const methodInjectables = this.metadataScanner\r\n      .getAllMethodNames(component.prototype)\r\n      .reduce((acc, method) => {\r\n        const methodInjectable = this.reflectKeyMetadata(\r\n          component,\r\n          metadataKey,\r\n          method,\r\n        );\r\n\r\n        if (methodInjectable) {\r\n          acc.push(methodInjectable);\r\n        }\r\n\r\n        return acc;\r\n      }, []);\r\n\r\n    controllerInjectables.forEach(injectable =>\r\n      this.insertInjectable(\r\n        injectable,\r\n        token,\r\n        component,\r\n        ENHANCER_KEY_TO_SUBTYPE_MAP[metadataKey],\r\n      ),\r\n    );\r\n    methodInjectables.forEach(methodInjectable => {\r\n      methodInjectable.metadata.forEach(injectable =>\r\n        this.insertInjectable(\r\n          injectable,\r\n          token,\r\n          component,\r\n          ENHANCER_KEY_TO_SUBTYPE_MAP[metadataKey],\r\n          methodInjectable.methodKey,\r\n        ),\r\n      );\r\n    });\r\n  }\r\n\r\n  public reflectParamInjectables(\r\n    component: Type<Injectable>,\r\n    token: string,\r\n    metadataKey: string,\r\n  ) {\r\n    const paramsMethods = this.metadataScanner.getAllMethodNames(\r\n      component.prototype,\r\n    );\r\n\r\n    paramsMethods.forEach(methodKey => {\r\n      const metadata: Record<\r\n        string,\r\n        {\r\n          index: number;\r\n          data: unknown;\r\n          pipes: Array<Type<PipeTransform> | PipeTransform>;\r\n        }\r\n      > = Reflect.getMetadata(metadataKey, component, methodKey);\r\n\r\n      if (!metadata) {\r\n        return;\r\n      }\r\n\r\n      const params = Object.values(metadata);\r\n      params\r\n        .map(item => item.pipes)\r\n        .flat(1)\r\n        .forEach(injectable =>\r\n          this.insertInjectable(\r\n            injectable,\r\n            token,\r\n            component,\r\n            'pipe',\r\n            methodKey,\r\n          ),\r\n        );\r\n    });\r\n  }\r\n\r\n  public reflectKeyMetadata(\r\n    component: Type<Injectable>,\r\n    key: string,\r\n    methodKey: string,\r\n  ): { methodKey: string; metadata: any } | undefined {\r\n    let prototype = component.prototype;\r\n    do {\r\n      const descriptor = Reflect.getOwnPropertyDescriptor(prototype, methodKey);\r\n      if (!descriptor) {\r\n        continue;\r\n      }\r\n      const metadata = Reflect.getMetadata(key, descriptor.value);\r\n      if (!metadata) {\r\n        return;\r\n      }\r\n      return { methodKey, metadata };\r\n    } while (\r\n      (prototype = Reflect.getPrototypeOf(prototype)) &&\r\n      prototype !== Object.prototype &&\r\n      prototype\r\n    );\r\n    return undefined;\r\n  }\r\n\r\n  public calculateModulesDistance() {\r\n    const modulesGenerator = this.container.getModules().values();\r\n\r\n    // Skip \"InternalCoreModule\" from calculating distance\r\n    modulesGenerator.next();\r\n\r\n    const modulesStack = [];\r\n    const calculateDistance = (moduleRef: Module, distance = 1) => {\r\n      if (!moduleRef || modulesStack.includes(moduleRef)) {\r\n        return;\r\n      }\r\n      modulesStack.push(moduleRef);\r\n\r\n      const moduleImports = moduleRef.imports;\r\n      moduleImports.forEach(importedModuleRef => {\r\n        if (importedModuleRef) {\r\n          if (distance > importedModuleRef.distance) {\r\n            importedModuleRef.distance = distance;\r\n          }\r\n          calculateDistance(importedModuleRef, distance + 1);\r\n        }\r\n      });\r\n    };\r\n\r\n    const rootModule = modulesGenerator.next().value as Module;\r\n    calculateDistance(rootModule);\r\n  }\r\n\r\n  public async insertImport(related: any, token: string, context: string) {\r\n    if (isUndefined(related)) {\r\n      throw new CircularDependencyException(context);\r\n    }\r\n    if (this.isForwardReference(related)) {\r\n      return this.container.addImport(related.forwardRef(), token);\r\n    }\r\n    await this.container.addImport(related, token);\r\n  }\r\n\r\n  public isCustomProvider(\r\n    provider: Provider,\r\n  ): provider is\r\n    | ClassProvider\r\n    | ValueProvider\r\n    | FactoryProvider\r\n    | ExistingProvider {\r\n    return provider && !isNil((provider as any).provide);\r\n  }\r\n\r\n  public insertProvider(provider: Provider, token: string) {\r\n    const isCustomProvider = this.isCustomProvider(provider);\r\n    if (!isCustomProvider) {\r\n      return this.container.addProvider(provider as Type<any>, token);\r\n    }\r\n    const applyProvidersMap = this.getApplyProvidersMap();\r\n    const providersKeys = Object.keys(applyProvidersMap);\r\n    const type = (\r\n      provider as\r\n        | ClassProvider\r\n        | ValueProvider\r\n        | FactoryProvider\r\n        | ExistingProvider\r\n    ).provide;\r\n\r\n    if (!providersKeys.includes(type as string)) {\r\n      return this.container.addProvider(provider as any, token);\r\n    }\r\n    const uuid = UuidFactory.get(type.toString());\r\n    const providerToken = `${type as string} (UUID: ${uuid})`;\r\n\r\n    let scope = (provider as ClassProvider | FactoryProvider).scope;\r\n    if (isNil(scope) && (provider as ClassProvider).useClass) {\r\n      scope = getClassScope((provider as ClassProvider).useClass);\r\n    }\r\n    this.applicationProvidersApplyMap.push({\r\n      type,\r\n      moduleKey: token,\r\n      providerKey: providerToken,\r\n      scope,\r\n    });\r\n\r\n    const newProvider = {\r\n      ...provider,\r\n      provide: providerToken,\r\n      scope,\r\n    } as Provider;\r\n\r\n    const enhancerSubtype =\r\n      ENHANCER_TOKEN_TO_SUBTYPE_MAP[\r\n        type as\r\n          | typeof APP_GUARD\r\n          | typeof APP_PIPE\r\n          | typeof APP_FILTER\r\n          | typeof APP_INTERCEPTOR\r\n      ];\r\n    const factoryOrClassProvider = newProvider as\r\n      | FactoryProvider\r\n      | ClassProvider;\r\n    if (this.isRequestOrTransient(factoryOrClassProvider.scope)) {\r\n      return this.container.addInjectable(newProvider, token, enhancerSubtype);\r\n    }\r\n    this.container.addProvider(newProvider, token, enhancerSubtype);\r\n  }\r\n\r\n  public insertInjectable(\r\n    injectable: Type<Injectable> | object,\r\n    token: string,\r\n    host: Type<Injectable>,\r\n    subtype: EnhancerSubtype,\r\n    methodKey?: string,\r\n  ) {\r\n    if (isFunction(injectable)) {\r\n      const instanceWrapper = this.container.addInjectable(\r\n        injectable as Type,\r\n        token,\r\n        subtype,\r\n        host,\r\n      ) as InstanceWrapper;\r\n\r\n      this.graphInspector.insertEnhancerMetadataCache({\r\n        moduleToken: token,\r\n        classRef: host,\r\n        enhancerInstanceWrapper: instanceWrapper,\r\n        targetNodeId: instanceWrapper.id,\r\n        subtype,\r\n        methodKey,\r\n      });\r\n      return instanceWrapper;\r\n    } else {\r\n      this.graphInspector.insertEnhancerMetadataCache({\r\n        moduleToken: token,\r\n        classRef: host,\r\n        enhancerRef: injectable,\r\n        methodKey,\r\n        subtype,\r\n      });\r\n    }\r\n  }\r\n\r\n  public insertExportedProvider(\r\n    exportedProvider: Type<Injectable>,\r\n    token: string,\r\n  ) {\r\n    this.container.addExportedProvider(exportedProvider, token);\r\n  }\r\n\r\n  public insertController(controller: Type<Controller>, token: string) {\r\n    this.container.addController(controller, token);\r\n  }\r\n\r\n  private insertOrOverrideModule(\r\n    moduleDefinition: ModuleDefinition,\r\n    overrides: ModuleOverride[],\r\n    scope: Type<unknown>[],\r\n  ): Promise<\r\n    | {\r\n        moduleRef: Module;\r\n        inserted: boolean;\r\n      }\r\n    | undefined\r\n  > {\r\n    const overrideModule = this.getOverrideModuleByModule(\r\n      moduleDefinition,\r\n      overrides,\r\n    );\r\n    if (overrideModule !== undefined) {\r\n      return this.overrideModule(\r\n        moduleDefinition,\r\n        overrideModule.newModule,\r\n        scope,\r\n      );\r\n    }\r\n\r\n    return this.insertModule(moduleDefinition, scope);\r\n  }\r\n\r\n  private getOverrideModuleByModule(\r\n    module: ModuleDefinition,\r\n    overrides: ModuleOverride[],\r\n  ): ModuleOverride | undefined {\r\n    if (this.isForwardReference(module)) {\r\n      return overrides.find(moduleToOverride => {\r\n        return (\r\n          moduleToOverride.moduleToReplace === module.forwardRef() ||\r\n          (\r\n            moduleToOverride.moduleToReplace as ForwardReference\r\n          ).forwardRef?.() === module.forwardRef()\r\n        );\r\n      });\r\n    }\r\n\r\n    return overrides.find(\r\n      moduleToOverride => moduleToOverride.moduleToReplace === module,\r\n    );\r\n  }\r\n\r\n  private async overrideModule(\r\n    moduleToOverride: ModuleDefinition,\r\n    newModule: ModuleDefinition,\r\n    scope: Type<unknown>[],\r\n  ): Promise<\r\n    | {\r\n        moduleRef: Module;\r\n        inserted: boolean;\r\n      }\r\n    | undefined\r\n  > {\r\n    return this.container.replaceModule(\r\n      this.isForwardReference(moduleToOverride)\r\n        ? moduleToOverride.forwardRef()\r\n        : moduleToOverride,\r\n      this.isForwardReference(newModule) ? newModule.forwardRef() : newModule,\r\n      scope,\r\n    );\r\n  }\r\n\r\n  public reflectMetadata<T = any>(\r\n    metadataKey: string,\r\n    metatype: Type<any>,\r\n  ): T[] {\r\n    return Reflect.getMetadata(metadataKey, metatype) || [];\r\n  }\r\n\r\n  public async registerCoreModule(overrides?: ModuleOverride[]) {\r\n    const moduleDefinition = InternalCoreModuleFactory.create(\r\n      this.container,\r\n      this,\r\n      this.container.getModuleCompiler(),\r\n      this.container.getHttpAdapterHostRef(),\r\n      this.graphInspector,\r\n      overrides,\r\n    );\r\n    const [instance] = await this.scanForModules({\r\n      moduleDefinition,\r\n      overrides,\r\n    });\r\n    this.container.registerCoreModuleRef(instance);\r\n  }\r\n\r\n  /**\r\n   * Add either request or transient globally scoped enhancers\r\n   * to all controllers metadata storage\r\n   */\r\n  public addScopedEnhancersMetadata() {\r\n    iterate(this.applicationProvidersApplyMap)\r\n      .filter(wrapper => this.isRequestOrTransient(wrapper.scope))\r\n      .forEach(({ moduleKey, providerKey }) => {\r\n        const modulesContainer = this.container.getModules();\r\n        const { injectables } = modulesContainer.get(moduleKey);\r\n        const instanceWrapper = injectables.get(providerKey);\r\n\r\n        const iterableIterator = modulesContainer.values();\r\n        iterate(iterableIterator)\r\n          .map(moduleRef =>\r\n            Array.from<InstanceWrapper>(moduleRef.controllers.values()).concat(\r\n              moduleRef.entryProviders,\r\n            ),\r\n          )\r\n          .flatten()\r\n          .forEach(controllerOrEntryProvider =>\r\n            controllerOrEntryProvider.addEnhancerMetadata(instanceWrapper),\r\n          );\r\n      });\r\n  }\r\n\r\n  public applyApplicationProviders() {\r\n    const applyProvidersMap = this.getApplyProvidersMap();\r\n    const applyRequestProvidersMap = this.getApplyRequestProvidersMap();\r\n\r\n    const getInstanceWrapper = (\r\n      moduleKey: string,\r\n      providerKey: string,\r\n      collectionKey: 'providers' | 'injectables',\r\n    ) => {\r\n      const modules = this.container.getModules();\r\n      const collection = modules.get(moduleKey)[collectionKey];\r\n      return collection.get(providerKey);\r\n    };\r\n\r\n    // Add global enhancers to the application config\r\n    this.applicationProvidersApplyMap.forEach(\r\n      ({ moduleKey, providerKey, type, scope }) => {\r\n        let instanceWrapper: InstanceWrapper;\r\n        if (this.isRequestOrTransient(scope)) {\r\n          instanceWrapper = getInstanceWrapper(\r\n            moduleKey,\r\n            providerKey,\r\n            'injectables',\r\n          );\r\n\r\n          this.graphInspector.insertAttachedEnhancer(instanceWrapper);\r\n          return applyRequestProvidersMap[type as string](instanceWrapper);\r\n        }\r\n        instanceWrapper = getInstanceWrapper(\r\n          moduleKey,\r\n          providerKey,\r\n          'providers',\r\n        );\r\n        this.graphInspector.insertAttachedEnhancer(instanceWrapper);\r\n        applyProvidersMap[type as string](instanceWrapper.instance);\r\n      },\r\n    );\r\n  }\r\n\r\n  public getApplyProvidersMap(): { [type: string]: Function } {\r\n    return {\r\n      [APP_INTERCEPTOR]: (interceptor: NestInterceptor) =>\r\n        this.applicationConfig.addGlobalInterceptor(interceptor),\r\n      [APP_PIPE]: (pipe: PipeTransform) =>\r\n        this.applicationConfig.addGlobalPipe(pipe),\r\n      [APP_GUARD]: (guard: CanActivate) =>\r\n        this.applicationConfig.addGlobalGuard(guard),\r\n      [APP_FILTER]: (filter: ExceptionFilter) =>\r\n        this.applicationConfig.addGlobalFilter(filter),\r\n    };\r\n  }\r\n\r\n  public getApplyRequestProvidersMap(): { [type: string]: Function } {\r\n    return {\r\n      [APP_INTERCEPTOR]: (interceptor: InstanceWrapper<NestInterceptor>) =>\r\n        this.applicationConfig.addGlobalRequestInterceptor(interceptor),\r\n      [APP_PIPE]: (pipe: InstanceWrapper<PipeTransform>) =>\r\n        this.applicationConfig.addGlobalRequestPipe(pipe),\r\n      [APP_GUARD]: (guard: InstanceWrapper<CanActivate>) =>\r\n        this.applicationConfig.addGlobalRequestGuard(guard),\r\n      [APP_FILTER]: (filter: InstanceWrapper<ExceptionFilter>) =>\r\n        this.applicationConfig.addGlobalRequestFilter(filter),\r\n    };\r\n  }\r\n\r\n  public isDynamicModule(\r\n    module: Type<any> | DynamicModule,\r\n  ): module is DynamicModule {\r\n    return module && !!(module as DynamicModule).module;\r\n  }\r\n\r\n  /**\r\n   * @param metatype\r\n   * @returns `true` if `metatype` is annotated with the `@Injectable()` decorator.\r\n   */\r\n  private isInjectable(metatype: Type<any>): boolean {\r\n    return !!Reflect.getMetadata(INJECTABLE_WATERMARK, metatype);\r\n  }\r\n\r\n  /**\r\n   * @param metatype\r\n   * @returns `true` if `metatype` is annotated with the `@Controller()` decorator.\r\n   */\r\n  private isController(metatype: Type<any>): boolean {\r\n    return !!Reflect.getMetadata(CONTROLLER_WATERMARK, metatype);\r\n  }\r\n\r\n  /**\r\n   * @param metatype\r\n   * @returns `true` if `metatype` is annotated with the `@Catch()` decorator.\r\n   */\r\n  private isExceptionFilter(metatype: Type<any>): boolean {\r\n    return !!Reflect.getMetadata(CATCH_WATERMARK, metatype);\r\n  }\r\n\r\n  private isForwardReference(\r\n    module: ModuleDefinition,\r\n  ): module is ForwardReference {\r\n    return module && !!(module as ForwardReference).forwardRef;\r\n  }\r\n\r\n  private isRequestOrTransient(scope: Scope): boolean {\r\n    return scope === Scope.REQUEST || scope === Scope.TRANSIENT;\r\n  }\r\n}\r\n"]}