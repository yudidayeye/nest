{"version":3,"file":"http-adapter.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["adapters/http-adapter.ts"],"names":[],"mappings":";;;AAQA;;GAEG;AACH,MAAsB,mBAAmB;IAQvC,YAAsB,QAAc;QAAd,aAAQ,GAAR,QAAQ,CAAM;IAAG,CAAC;IAExC,gEAAgE;IACzD,KAAK,CAAC,IAAI,KAAI,CAAC;IAEf,GAAG,CAAC,GAAG,IAAW;QACvB,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC;IACpC,CAAC;IAIM,GAAG,CAAC,GAAG,IAAW;QACvB,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC;IACpC,CAAC;IAIM,IAAI,CAAC,GAAG,IAAW;QACxB,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;IACrC,CAAC;IAIM,IAAI,CAAC,GAAG,IAAW;QACxB,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;IACrC,CAAC;IAIM,MAAM,CAAC,GAAG,IAAW;QAC1B,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC;IACvC,CAAC;IAIM,GAAG,CAAC,GAAG,IAAW;QACvB,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC;IACpC,CAAC;IAIM,KAAK,CAAC,GAAG,IAAW;QACzB,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC;IACtC,CAAC;IAIM,GAAG,CAAC,GAAG,IAAW;QACvB,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC;IACpC,CAAC;IAIM,MAAM,CAAC,IAAS,EAAE,QAAc,EAAE,QAAc;QACrD,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;IACxD,CAAC;IAIM,OAAO,CAAC,GAAG,IAAW;QAC3B,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,CAAC;IACxC,CAAC;IAIM,MAAM,CAAC,IAAS,EAAE,QAAc,EAAE,QAAc;QACrD,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;IACxD,CAAC;IAEM,aAAa;QAClB,OAAO,IAAI,CAAC,UAAqB,CAAC;IACpC,CAAC;IAEM,aAAa,CAAC,UAAmB;QACtC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC/B,CAAC;IAEM,WAAW,CAAU,QAAW;QACrC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAEM,WAAW;QAChB,OAAO,IAAI,CAAC,QAAa,CAAC;IAC5B,CAAC;CAkCF;AA7HD,kDA6HC","sourcesContent":["import { HttpServer, RequestMethod, VersioningOptions } from '@nestjs/common';\r\nimport { RequestHandler, VersionValue } from '@nestjs/common/interfaces';\r\nimport {\r\n  CorsOptions,\r\n  CorsOptionsDelegate,\r\n} from '@nestjs/common/interfaces/external/cors-options.interface';\r\nimport { NestApplicationOptions } from '@nestjs/common/interfaces/nest-application-options.interface';\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport abstract class AbstractHttpAdapter<\r\n  TServer = any,\r\n  TRequest = any,\r\n  TResponse = any,\r\n> implements HttpServer<TRequest, TResponse>\r\n{\r\n  protected httpServer: TServer;\r\n\r\n  constructor(protected instance?: any) {}\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  public async init() {}\r\n\r\n  public use(...args: any[]) {\r\n    return this.instance.use(...args);\r\n  }\r\n\r\n  public get(handler: RequestHandler);\r\n  public get(path: any, handler: RequestHandler);\r\n  public get(...args: any[]) {\r\n    return this.instance.get(...args);\r\n  }\r\n\r\n  public post(handler: RequestHandler);\r\n  public post(path: any, handler: RequestHandler);\r\n  public post(...args: any[]) {\r\n    return this.instance.post(...args);\r\n  }\r\n\r\n  public head(handler: RequestHandler);\r\n  public head(path: any, handler: RequestHandler);\r\n  public head(...args: any[]) {\r\n    return this.instance.head(...args);\r\n  }\r\n\r\n  public delete(handler: RequestHandler);\r\n  public delete(path: any, handler: RequestHandler);\r\n  public delete(...args: any[]) {\r\n    return this.instance.delete(...args);\r\n  }\r\n\r\n  public put(handler: RequestHandler);\r\n  public put(path: any, handler: RequestHandler);\r\n  public put(...args: any[]) {\r\n    return this.instance.put(...args);\r\n  }\r\n\r\n  public patch(handler: RequestHandler);\r\n  public patch(path: any, handler: RequestHandler);\r\n  public patch(...args: any[]) {\r\n    return this.instance.patch(...args);\r\n  }\r\n\r\n  public all(handler: RequestHandler);\r\n  public all(path: any, handler: RequestHandler);\r\n  public all(...args: any[]) {\r\n    return this.instance.all(...args);\r\n  }\r\n\r\n  public search(port: string | number, callback?: () => void);\r\n  public search(port: string | number, hostname: string, callback?: () => void);\r\n  public search(port: any, hostname?: any, callback?: any) {\r\n    return this.instance.search(port, hostname, callback);\r\n  }\r\n\r\n  public options(handler: RequestHandler);\r\n  public options(path: any, handler: RequestHandler);\r\n  public options(...args: any[]) {\r\n    return this.instance.options(...args);\r\n  }\r\n\r\n  public listen(port: string | number, callback?: () => void);\r\n  public listen(port: string | number, hostname: string, callback?: () => void);\r\n  public listen(port: any, hostname?: any, callback?: any) {\r\n    return this.instance.listen(port, hostname, callback);\r\n  }\r\n\r\n  public getHttpServer(): TServer {\r\n    return this.httpServer as TServer;\r\n  }\r\n\r\n  public setHttpServer(httpServer: TServer) {\r\n    this.httpServer = httpServer;\r\n  }\r\n\r\n  public setInstance<T = any>(instance: T) {\r\n    this.instance = instance;\r\n  }\r\n\r\n  public getInstance<T = any>(): T {\r\n    return this.instance as T;\r\n  }\r\n\r\n  abstract close();\r\n  abstract initHttpServer(options: NestApplicationOptions);\r\n  abstract useStaticAssets(...args: any[]);\r\n  abstract setViewEngine(engine: string);\r\n  abstract getRequestHostname(request: any);\r\n  abstract getRequestMethod(request: any);\r\n  abstract getRequestUrl(request: any);\r\n  abstract status(response: any, statusCode: number);\r\n  abstract reply(response: any, body: any, statusCode?: number);\r\n  abstract end(response: any, message?: string);\r\n  abstract render(response: any, view: string, options: any);\r\n  abstract redirect(response: any, statusCode: number, url: string);\r\n  abstract setErrorHandler(handler: Function, prefix?: string);\r\n  abstract setNotFoundHandler(handler: Function, prefix?: string);\r\n  abstract isHeadersSent(response: any);\r\n  abstract setHeader(response: any, name: string, value: string);\r\n  abstract registerParserMiddleware(prefix?: string, rawBody?: boolean);\r\n  abstract enableCors(\r\n    options: CorsOptions | CorsOptionsDelegate<TRequest>,\r\n    prefix?: string,\r\n  );\r\n  abstract createMiddlewareFactory(\r\n    requestMethod: RequestMethod,\r\n  ):\r\n    | ((path: string, callback: Function) => any)\r\n    | Promise<(path: string, callback: Function) => any>;\r\n  abstract getType(): string;\r\n  abstract applyVersionFilter(\r\n    handler: Function,\r\n    version: VersionValue,\r\n    versioningOptions: VersioningOptions,\r\n  ): (req: TRequest, res: TResponse, next: () => void) => Function;\r\n}\r\n"]}