{"version":3,"file":"messages.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["errors/messages.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ForwardReference, Type, DynamicModule } from '@nestjs/common';\r\nimport { isNil, isSymbol } from '@nestjs/common/utils/shared.utils';\r\nimport {\r\n  InjectorDependency,\r\n  InjectorDependencyContext,\r\n} from '../injector/injector';\r\nimport { Module } from '../injector/module';\r\n\r\n/**\r\n * Returns the name of an instance or `undefined`\r\n * @param instance The instance which should get the name from\r\n */\r\nconst getInstanceName = (instance: unknown): string => {\r\n  if ((instance as ForwardReference)?.forwardRef) {\r\n    return (instance as ForwardReference).forwardRef()?.name;\r\n  }\r\n\r\n  if ((instance as DynamicModule)?.module) {\r\n    return (instance as DynamicModule).module?.name;\r\n  }\r\n\r\n  return (instance as Type)?.name;\r\n};\r\n\r\n/**\r\n * Returns the name of the dependency\r\n * Tries to get the class name, otherwise the string value\r\n * (= injection token). As fallback it returns '+'\r\n * @param dependency The name of the dependency to be displayed\r\n */\r\nconst getDependencyName = (dependency: InjectorDependency): string =>\r\n  // use class name\r\n  getInstanceName(dependency) ||\r\n  // use injection token (symbol)\r\n  (isSymbol(dependency) && dependency.toString()) ||\r\n  // use string directly\r\n  (dependency as string) ||\r\n  // otherwise\r\n  '+';\r\n\r\n/**\r\n * Returns the name of the module\r\n * Tries to get the class name. As fallback it returns 'current'.\r\n * @param module The module which should get displayed\r\n */\r\nconst getModuleName = (module: Module) =>\r\n  (module && getInstanceName(module.metatype)) || 'current';\r\n\r\nconst stringifyScope = (scope: any[]): string =>\r\n  (scope || []).map(getInstanceName).join(' -> ');\r\n\r\nexport const UNKNOWN_DEPENDENCIES_MESSAGE = (\r\n  type: string | symbol,\r\n  unknownDependencyContext: InjectorDependencyContext,\r\n  module: Module,\r\n) => {\r\n  const {\r\n    index,\r\n    name = 'dependency',\r\n    dependencies,\r\n    key,\r\n  } = unknownDependencyContext;\r\n  const moduleName = getModuleName(module);\r\n  const dependencyName = getDependencyName(name);\r\n\r\n  const potentialSolutions =\r\n    // If module's name is well defined\r\n    moduleName !== 'current'\r\n      ? `\\n\r\nPotential solutions:\r\n- Is ${moduleName} a valid NestJS module?\r\n- If ${dependencyName} is a provider, is it part of the current ${moduleName}?\r\n- If ${dependencyName} is exported from a separate @Module, is that module imported within ${moduleName}?\r\n  @Module({\r\n    imports: [ /* the Module containing ${dependencyName} */ ]\r\n  })\r\n`\r\n      : `\\n\r\nPotential solutions:\r\n- If ${dependencyName} is a provider, is it part of the current Module?\r\n- If ${dependencyName} is exported from a separate @Module, is that module imported within Module?\r\n  @Module({\r\n    imports: [ /* the Module containing ${dependencyName} */ ]\r\n  })\r\n`;\r\n\r\n  let message = `Nest can't resolve dependencies of the ${type.toString()}`;\r\n\r\n  if (isNil(index)) {\r\n    message += `. Please make sure that the \"${key.toString()}\" property is available in the current context.${potentialSolutions}`;\r\n    return message;\r\n  }\r\n  const dependenciesName = (dependencies || []).map(getDependencyName);\r\n  dependenciesName[index] = '?';\r\n\r\n  message += ` (`;\r\n  message += dependenciesName.join(', ');\r\n  message += `). Please make sure that the argument ${dependencyName} at index [${index}] is available in the ${moduleName} context.`;\r\n  message += potentialSolutions;\r\n\r\n  return message;\r\n};\r\n\r\nexport const INVALID_MIDDLEWARE_MESSAGE = (\r\n  text: TemplateStringsArray,\r\n  name: string,\r\n) => `The middleware doesn't provide the 'use' method (${name})`;\r\n\r\nexport const UNDEFINED_FORWARDREF_MESSAGE = (\r\n  scope: Type<any>[],\r\n) => `Nest cannot create the module instance. Often, this is because of a circular dependency between modules. Use forwardRef() to avoid it.\r\n\r\n(Read more: https://docs.nestjs.com/fundamentals/circular-dependency)\r\nScope [${stringifyScope(scope)}]\r\n`;\r\n\r\nexport const INVALID_MODULE_MESSAGE = (\r\n  parentModule: any,\r\n  index: number,\r\n  scope: any[],\r\n) => {\r\n  const parentModuleName = parentModule?.name || 'module';\r\n\r\n  return `Nest cannot create the ${parentModuleName} instance.\r\nReceived an unexpected value at index [${index}] of the ${parentModuleName} \"imports\" array.\r\n\r\nScope [${stringifyScope(scope)}]`;\r\n};\r\n\r\nexport const USING_INVALID_CLASS_AS_A_MODULE_MESSAGE = (\r\n  metatypeUsedAsAModule: Type | ForwardReference,\r\n  scope: any[],\r\n) => {\r\n  const metatypeNameQuote =\r\n    `\"${getInstanceName(metatypeUsedAsAModule)}\"` || 'that class';\r\n\r\n  return `Classes annotated with @Injectable(), @Catch(), and @Controller() decorators must not appear in the \"imports\" array of a module.\r\nPlease remove ${metatypeNameQuote} (including forwarded occurrences, if any) from all of the \"imports\" arrays.\r\n\r\nScope [${stringifyScope(scope)}]\r\n`;\r\n};\r\n\r\nexport const UNDEFINED_MODULE_MESSAGE = (\r\n  parentModule: any,\r\n  index: number,\r\n  scope: any[],\r\n) => {\r\n  const parentModuleName = parentModule?.name || 'module';\r\n\r\n  return `Nest cannot create the ${parentModuleName} instance.\r\nThe module at index [${index}] of the ${parentModuleName} \"imports\" array is undefined.\r\n\r\nPotential causes:\r\n- A circular dependency between modules. Use forwardRef() to avoid it. Read more: https://docs.nestjs.com/fundamentals/circular-dependency\r\n- The module at index [${index}] is of type \"undefined\". Check your import statements and the type of the module.\r\n\r\nScope [${stringifyScope(scope)}]`;\r\n};\r\n\r\nexport const UNKNOWN_EXPORT_MESSAGE = (\r\n  token: string | symbol = 'item',\r\n  module: string,\r\n) => {\r\n  token = isSymbol(token) ? token.toString() : token;\r\n\r\n  return `Nest cannot export a provider/module that is not a part of the currently processed module (${module}). Please verify whether the exported ${token} is available in this particular context.\r\n\r\nPossible Solutions:\r\n- Is ${token} part of the relevant providers/imports within ${module}?\r\n`;\r\n};\r\n\r\nexport const INVALID_CLASS_MESSAGE = (text: TemplateStringsArray, value: any) =>\r\n  `ModuleRef cannot instantiate class (${value} is not constructable).`;\r\n\r\nexport const INVALID_CLASS_SCOPE_MESSAGE = (\r\n  text: TemplateStringsArray,\r\n  name: string | undefined,\r\n) =>\r\n  `${\r\n    name || 'This class'\r\n  } is marked as a scoped provider. Request and transient-scoped providers can't be used in combination with \"get()\" method. Please, use \"resolve()\" instead.`;\r\n\r\nexport const UNKNOWN_REQUEST_MAPPING = (metatype: Type) => {\r\n  const className = metatype.name;\r\n  return className\r\n    ? `An invalid controller has been detected. \"${className}\" does not have the @Controller() decorator but it is being listed in the \"controllers\" array of some module.`\r\n    : `An invalid controller has been detected. Perhaps, one of your controllers is missing the @Controller() decorator.`;\r\n};\r\n\r\nexport const INVALID_MIDDLEWARE_CONFIGURATION = `An invalid middleware configuration has been passed inside the module 'configure()' method.`;\r\nexport const UNHANDLED_RUNTIME_EXCEPTION = `Unhandled Runtime Exception.`;\r\nexport const INVALID_EXCEPTION_FILTER = `Invalid exception filters (@UseFilters()).`;\r\nexport const MICROSERVICES_PACKAGE_NOT_FOUND_EXCEPTION = `Unable to load @nestjs/microservices package. (Please make sure that it's already installed.)`;\r\n"]}