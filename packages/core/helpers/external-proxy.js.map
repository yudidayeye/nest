{"version":3,"file":"external-proxy.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["helpers/external-proxy.ts"],"names":[],"mappings":";;;AAEA,8EAAyE;AAEzE,MAAa,kBAAkB;IACtB,WAAW,CAChB,cAAuC,EACvC,iBAA4C,EAC5C,IAAe;QAEf,OAAO,KAAK,EAAE,GAAG,IAAW,EAAE,EAAE;YAC9B,IAAI;gBACF,OAAO,MAAM,cAAc,CAAC,GAAG,IAAI,CAAC,CAAC;aACtC;YAAC,OAAO,CAAC,EAAE;gBACV,MAAM,IAAI,GAAG,IAAI,6CAAoB,CAAC,IAAI,CAAC,CAAC;gBAC5C,IAAI,CAAC,OAAO,CAAW,IAAI,CAAC,CAAC;gBAC7B,OAAO,iBAAiB,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;aACxC;QACH,CAAC,CAAC;IACJ,CAAC;CACF;AAhBD,gDAgBC","sourcesContent":["import { ContextType } from '@nestjs/common/interfaces';\r\nimport { ExternalExceptionsHandler } from '../exceptions/external-exceptions-handler';\r\nimport { ExecutionContextHost } from '../helpers/execution-context-host';\r\n\r\nexport class ExternalErrorProxy {\r\n  public createProxy<TContext extends string = ContextType>(\r\n    targetCallback: (...args: any[]) => any,\r\n    exceptionsHandler: ExternalExceptionsHandler,\r\n    type?: TContext,\r\n  ) {\r\n    return async (...args: any[]) => {\r\n      try {\r\n        return await targetCallback(...args);\r\n      } catch (e) {\r\n        const host = new ExecutionContextHost(args);\r\n        host.setType<TContext>(type);\r\n        return exceptionsHandler.next(e, host);\r\n      }\r\n    };\r\n  }\r\n}\r\n"]}