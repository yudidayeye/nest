{"version":3,"file":"context-utils.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["helpers/context-utils.ts"],"names":[],"mappings":";;;AACA,wDAGkC;AAOlC,oEAA+D;AAC/D,qEAAgE;AAUhE,MAAa,YAAY;IAChB,YAAY,CAAC,GAAW;QAC7B,MAAM,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC/B,OAAO,OAAO,CAAC,CAAC,CAAC,CAAC;IACpB,CAAC;IAEM,yBAAyB,CAC9B,QAAoB,EACpB,UAAkB;QAElB,OAAO,OAAO,CAAC,WAAW,CAAC,+BAAmB,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;IACxE,CAAC;IAEM,uBAAuB,CAC5B,QAAoB,EACpB,UAAkB,EAClB,WAAmB;QAEnB,OAAO,OAAO,CAAC,WAAW,CAAC,WAAW,EAAE,QAAQ,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;IAC5E,CAAC;IAEM,kBAAkB,CAAC,QAAoB,EAAE,UAAkB;QAChE,OAAO,OAAO,CAAC,WAAW,CACxB,yCAA6B,EAC7B,QAAQ,CAAC,WAAW,EACpB,UAAU,CACX,CAAC;IACJ,CAAC;IAEM,kBAAkB,CAAI,IAAc,EAAE,QAAW;QACtD,OAAO,IAAI,CAAC,MAAM;YAChB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC;YACvD,CAAC,CAAC,CAAC,CAAC;IACR,CAAC;IAEM,eAAe,CAAC,MAAc;QACnC,MAAM,CAAC,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC;QAC5B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC;YAAE,CAAC,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC;QAClD,OAAO,CAAC,CAAC;IACX,CAAC;IAEM,oBAAoB,CACzB,gBAAmC,EACnC,UAAiB;QAEjB,IAAI,CAAC,UAAU,EAAE;YACf,OAAO,gBAAgB,CAAC;SACzB;QACD,OAAO,gBAAgB,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YACpC,GAAG,KAAK;YACR,QAAQ,EAAE,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC;SAClC,CAAC,CAAC,CAAC;IACN,CAAC;IAEM,gBAAgB,CACrB,OAAqC,EACrC,IAAa,EACb,cAAyD;QAEzD,OAAO,IAAA,yBAAU,EAAC,OAAO,CAAC;YACxB,CAAC,CAAC,CAAC,GAAG,IAAe,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,EAAE,cAAc,CAAC,IAAI,CAAC,CAAC;YAC7D,CAAC,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC;IACjB,CAAC;IAEM,iBAAiB,CACtB,WAAqB,EACrB,QAAiB,EACjB,QAAmB;QAEnB,MAAM,cAAc,GAAG,CAAC,IAAe,EAAE,EAAE;YACzC,MAAM,GAAG,GAAG,IAAI,6CAAoB,CAClC,IAAI,EACJ,QAAQ,IAAK,QAAQ,CAAC,WAA6B,EACnD,QAAQ,CACT,CAAC;YACF,GAAG,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;YACzB,OAAO,GAAG,CAAC;QACb,CAAC,CAAC;QACF,OAAO,cAAc,CAAC;IACxB,CAAC;CACF;AAhFD,oCAgFC","sourcesContent":["import { ParamData } from '@nestjs/common';\r\nimport {\r\n  PARAMTYPES_METADATA,\r\n  RESPONSE_PASSTHROUGH_METADATA,\r\n} from '@nestjs/common/constants';\r\nimport {\r\n  ContextType,\r\n  Controller,\r\n  PipeTransform,\r\n  Type,\r\n} from '@nestjs/common/interfaces';\r\nimport { isFunction } from '@nestjs/common/utils/shared.utils';\r\nimport { ExecutionContextHost } from './execution-context-host';\r\n\r\nexport interface ParamProperties<T = any, IExtractor extends Function = any> {\r\n  index: number;\r\n  type: T | string;\r\n  data: ParamData;\r\n  pipes: PipeTransform[];\r\n  extractValue: IExtractor;\r\n}\r\n\r\nexport class ContextUtils {\r\n  public mapParamType(key: string): string {\r\n    const keyPair = key.split(':');\r\n    return keyPair[0];\r\n  }\r\n\r\n  public reflectCallbackParamtypes(\r\n    instance: Controller,\r\n    methodName: string,\r\n  ): any[] {\r\n    return Reflect.getMetadata(PARAMTYPES_METADATA, instance, methodName);\r\n  }\r\n\r\n  public reflectCallbackMetadata<T = any>(\r\n    instance: Controller,\r\n    methodName: string,\r\n    metadataKey: string,\r\n  ): T {\r\n    return Reflect.getMetadata(metadataKey, instance.constructor, methodName);\r\n  }\r\n\r\n  public reflectPassthrough(instance: Controller, methodName: string): boolean {\r\n    return Reflect.getMetadata(\r\n      RESPONSE_PASSTHROUGH_METADATA,\r\n      instance.constructor,\r\n      methodName,\r\n    );\r\n  }\r\n\r\n  public getArgumentsLength<T>(keys: string[], metadata: T): number {\r\n    return keys.length\r\n      ? Math.max(...keys.map(key => metadata[key].index)) + 1\r\n      : 0;\r\n  }\r\n\r\n  public createNullArray(length: number): any[] {\r\n    const a = new Array(length);\r\n    for (let i = 0; i < length; ++i) a[i] = undefined;\r\n    return a;\r\n  }\r\n\r\n  public mergeParamsMetatypes(\r\n    paramsProperties: ParamProperties[],\r\n    paramtypes: any[],\r\n  ): (ParamProperties & { metatype?: any })[] {\r\n    if (!paramtypes) {\r\n      return paramsProperties;\r\n    }\r\n    return paramsProperties.map(param => ({\r\n      ...param,\r\n      metatype: paramtypes[param.index],\r\n    }));\r\n  }\r\n\r\n  public getCustomFactory(\r\n    factory: (...args: unknown[]) => void,\r\n    data: unknown,\r\n    contextFactory: (args: unknown[]) => ExecutionContextHost,\r\n  ): (...args: unknown[]) => unknown {\r\n    return isFunction(factory)\r\n      ? (...args: unknown[]) => factory(data, contextFactory(args))\r\n      : () => null;\r\n  }\r\n\r\n  public getContextFactory<TContext extends string = ContextType>(\r\n    contextType: TContext,\r\n    instance?: object,\r\n    callback?: Function,\r\n  ): (args: unknown[]) => ExecutionContextHost {\r\n    const contextFactory = (args: unknown[]) => {\r\n      const ctx = new ExecutionContextHost(\r\n        args,\r\n        instance && (instance.constructor as Type<unknown>),\r\n        callback,\r\n      );\r\n      ctx.setType(contextType);\r\n      return ctx;\r\n    };\r\n    return contextFactory;\r\n  }\r\n}\r\n"]}