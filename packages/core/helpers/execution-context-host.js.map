{"version":3,"file":"execution-context-host.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["helpers/execution-context-host.ts"],"names":[],"mappings":";;;AASA,MAAa,oBAAoB;IAG/B,YACmB,IAAW,EACX,iBAA4B,IAAI,EAChC,UAAoB,IAAI;QAFxB,SAAI,GAAJ,IAAI,CAAO;QACX,mBAAc,GAAd,cAAc,CAAkB;QAChC,YAAO,GAAP,OAAO,CAAiB;QALnC,gBAAW,GAAG,MAAM,CAAC;IAM1B,CAAC;IAEJ,OAAO,CAAwC,IAAc;QAC3D,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,CAAC;IACpC,CAAC;IAED,OAAO;QACL,OAAO,IAAI,CAAC,WAAuB,CAAC;IACtC,CAAC;IAED,QAAQ;QACN,OAAO,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;IAED,UAAU;QACR,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED,OAAO;QACL,OAAO,IAAI,CAAC,IAAS,CAAC;IACxB,CAAC;IAED,aAAa,CAAU,KAAa;QAClC,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAM,CAAC;IAC/B,CAAC;IAED,WAAW;QACT,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE;YACzB,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACpC,UAAU,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;SACxC,CAAC,CAAC;IACL,CAAC;IAED,YAAY;QACV,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE;YACzB,UAAU,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACvC,WAAW,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACxC,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;SACrC,CAAC,CAAC;IACL,CAAC;IAED,UAAU;QACR,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE;YACzB,SAAS,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACtC,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACpC,UAAU,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC;SAChE,CAAC,CAAC;IACL,CAAC;CACF;AAvDD,oDAuDC","sourcesContent":["import { ExecutionContext } from '@nestjs/common';\r\nimport { Type } from '@nestjs/common/interfaces';\r\nimport {\r\n  ContextType,\r\n  HttpArgumentsHost,\r\n  RpcArgumentsHost,\r\n  WsArgumentsHost,\r\n} from '@nestjs/common/interfaces/features/arguments-host.interface';\r\n\r\nexport class ExecutionContextHost implements ExecutionContext {\r\n  private contextType = 'http';\r\n\r\n  constructor(\r\n    private readonly args: any[],\r\n    private readonly constructorRef: Type<any> = null,\r\n    private readonly handler: Function = null,\r\n  ) {}\r\n\r\n  setType<TContext extends string = ContextType>(type: TContext) {\r\n    type && (this.contextType = type);\r\n  }\r\n\r\n  getType<TContext extends string = ContextType>(): TContext {\r\n    return this.contextType as TContext;\r\n  }\r\n\r\n  getClass<T = any>(): Type<T> {\r\n    return this.constructorRef;\r\n  }\r\n\r\n  getHandler(): Function {\r\n    return this.handler;\r\n  }\r\n\r\n  getArgs<T extends Array<any> = any[]>(): T {\r\n    return this.args as T;\r\n  }\r\n\r\n  getArgByIndex<T = any>(index: number): T {\r\n    return this.args[index] as T;\r\n  }\r\n\r\n  switchToRpc(): RpcArgumentsHost {\r\n    return Object.assign(this, {\r\n      getData: () => this.getArgByIndex(0),\r\n      getContext: () => this.getArgByIndex(1),\r\n    });\r\n  }\r\n\r\n  switchToHttp(): HttpArgumentsHost {\r\n    return Object.assign(this, {\r\n      getRequest: () => this.getArgByIndex(0),\r\n      getResponse: () => this.getArgByIndex(1),\r\n      getNext: () => this.getArgByIndex(2),\r\n    });\r\n  }\r\n\r\n  switchToWs(): WsArgumentsHost {\r\n    return Object.assign(this, {\r\n      getClient: () => this.getArgByIndex(0),\r\n      getData: () => this.getArgByIndex(1),\r\n      getPattern: () => this.getArgByIndex(this.getArgs().length - 1),\r\n    });\r\n  }\r\n}\r\n"]}