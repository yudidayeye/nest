{"version":3,"file":"handler-metadata-storage.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["helpers/handler-metadata-storage.ts"],"names":[],"mappings":";;;;AAGA,qDAA0D;AAK7C,QAAA,uBAAuB,GAAG,MAAM,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;AAkC5E,MAAa,sBAAsB;IAAnC;QAImB,QAAyB,GAAG,IAAI,GAAG,EAAkB,CAAC;IAiBzE,CAAC;IAfC,GAAG,CAAC,UAAgB,EAAE,UAAkB,EAAE,QAAgB;QACxD,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;QAChE,IAAI,CAAC,+BAAuB,CAAC,CAAC,GAAG,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;IAC3D,CAAC;IAED,GAAG,CAAC,UAAgB,EAAE,UAAkB;QACtC,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;QAChE,OAAO,IAAI,CAAC,+BAAuB,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IACxD,CAAC;IAEO,cAAc,CAAC,UAAsB,EAAE,UAAkB;QAC/D,MAAM,IAAI,GAAG,UAAU,CAAC,WAAW,CAAC;QACpC,MAAM,aAAa,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,6BAAiB,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;QACrE,OAAO,aAAa,GAAG,UAAU,CAAC;IACpC,CAAC;CACF;AArBD,wDAqBC;KAjBmB,+BAAuB","sourcesContent":["import { Controller, Type } from '@nestjs/common/interfaces';\r\nimport { IncomingMessage } from 'http';\r\nimport { Observable } from 'rxjs';\r\nimport { CONTROLLER_ID_KEY } from '../injector/constants';\r\nimport { ContextId } from '../injector/instance-wrapper';\r\nimport { HeaderStream } from '../router/sse-stream';\r\nimport { ParamProperties } from './context-utils';\r\n\r\nexport const HANDLER_METADATA_SYMBOL = Symbol.for('handler_metadata:cache');\r\n\r\nexport type HandleResponseFn = HandlerResponseBasicFn | HandleSseResponseFn;\r\n\r\nexport type HandlerResponseBasicFn = <TResult, TResponse>(\r\n  result: TResult,\r\n  res: TResponse,\r\n  req?: any,\r\n) => any;\r\n\r\nexport type HandleSseResponseFn = <\r\n  TResult extends Observable<unknown> = any,\r\n  TResponse extends HeaderStream = any,\r\n  TRequest extends IncomingMessage = any,\r\n>(\r\n  result: TResult,\r\n  res: TResponse,\r\n  req: TRequest,\r\n) => any;\r\n\r\nexport interface HandlerMetadata {\r\n  argsLength: number;\r\n  paramtypes: any[];\r\n  httpStatusCode: number;\r\n  responseHeaders: any[];\r\n  hasCustomHeaders: boolean;\r\n  getParamsMetadata: (\r\n    moduleKey: string,\r\n    contextId?: ContextId,\r\n    inquirerId?: string,\r\n  ) => (ParamProperties & { metatype?: any })[];\r\n  fnHandleResponse: HandleResponseFn;\r\n}\r\n\r\nexport class HandlerMetadataStorage<\r\n  TValue = HandlerMetadata,\r\n  TKey extends Type<unknown> = any,\r\n> {\r\n  private readonly [HANDLER_METADATA_SYMBOL] = new Map<string, TValue>();\r\n\r\n  set(controller: TKey, methodName: string, metadata: TValue) {\r\n    const metadataKey = this.getMetadataKey(controller, methodName);\r\n    this[HANDLER_METADATA_SYMBOL].set(metadataKey, metadata);\r\n  }\r\n\r\n  get(controller: TKey, methodName: string): TValue | undefined {\r\n    const metadataKey = this.getMetadataKey(controller, methodName);\r\n    return this[HANDLER_METADATA_SYMBOL].get(metadataKey);\r\n  }\r\n\r\n  private getMetadataKey(controller: Controller, methodName: string): string {\r\n    const ctor = controller.constructor;\r\n    const controllerKey = ctor && (ctor[CONTROLLER_ID_KEY] || ctor.name);\r\n    return controllerKey + methodName;\r\n  }\r\n}\r\n"]}