{"version":3,"file":"external-exceptions-handler.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["exceptions/external-exceptions-handler.ts"],"names":[],"mappings":";;;AAAA,oEAA4D;AAG5D,sHAA2G;AAC3G,2EAAsE;AACtE,gHAA0G;AAE1G,MAAa,yBAA0B,SAAQ,mDAAuB;IAAtE;;QACU,YAAO,GAA8B,EAAE,CAAC;IA4BlD,CAAC;IA1BQ,IAAI,CAAC,SAAsB,EAAE,IAAmB;QACrD,MAAM,MAAM,GAAG,IAAI,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QACzD,IAAI,MAAM,EAAE;YACV,OAAO,MAAM,CAAC;SACf;QACD,OAAO,KAAK,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IACtC,CAAC;IAEM,gBAAgB,CAAC,OAAkC;QACxD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YAC3B,MAAM,IAAI,oEAA+B,EAAE,CAAC;SAC7C;QACD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAEM,mBAAmB,CACxB,SAAY,EACZ,IAAmB;QAEnB,IAAI,IAAA,sBAAO,EAAC,IAAI,CAAC,OAAO,CAAC,EAAE;YACzB,OAAO,IAAI,CAAC;SACb;QAED,MAAM,MAAM,GAAG,IAAA,qEAA6B,EAAC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QACtE,OAAO,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IACtD,CAAC;CACF;AA7BD,8DA6BC","sourcesContent":["import { isEmpty } from '@nestjs/common/utils/shared.utils';\r\nimport { ArgumentsHost } from '@nestjs/common/interfaces/features/arguments-host.interface';\r\nimport { ExceptionFilterMetadata } from '@nestjs/common/interfaces/exceptions';\r\nimport { selectExceptionFilterMetadata } from '@nestjs/common/utils/select-exception-filter-metadata.util';\r\nimport { ExternalExceptionFilter } from './external-exception-filter';\r\nimport { InvalidExceptionFilterException } from '../errors/exceptions/invalid-exception-filter.exception';\r\n\r\nexport class ExternalExceptionsHandler extends ExternalExceptionFilter {\r\n  private filters: ExceptionFilterMetadata[] = [];\r\n\r\n  public next(exception: Error | any, host: ArgumentsHost): Promise<any> {\r\n    const result = this.invokeCustomFilters(exception, host);\r\n    if (result) {\r\n      return result;\r\n    }\r\n    return super.catch(exception, host);\r\n  }\r\n\r\n  public setCustomFilters(filters: ExceptionFilterMetadata[]) {\r\n    if (!Array.isArray(filters)) {\r\n      throw new InvalidExceptionFilterException();\r\n    }\r\n    this.filters = filters;\r\n  }\r\n\r\n  public invokeCustomFilters<T = any>(\r\n    exception: T,\r\n    host: ArgumentsHost,\r\n  ): Promise<any> | null {\r\n    if (isEmpty(this.filters)) {\r\n      return null;\r\n    }\r\n\r\n    const filter = selectExceptionFilterMetadata(this.filters, exception);\r\n    return filter ? filter.func(exception, host) : null;\r\n  }\r\n}\r\n"]}