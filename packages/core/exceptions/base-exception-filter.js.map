{"version":3,"file":"base-exception-filter.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["exceptions/base-exception-filter.ts"],"names":[],"mappings":";;;;AAAA,2CASwB;AACxB,oEAA6D;AAE7D,4CAAwC;AACxC,oEAA+D;AAE/D,MAAa,mBAAmB;IAO9B,YAA+B,cAA2B;QAA3B,mBAAc,GAAd,cAAc,CAAa;IAAG,CAAC;IAE9D,KAAK,CAAC,SAAY,EAAE,IAAmB;QACrC,MAAM,cAAc,GAClB,IAAI,CAAC,cAAc;YACnB,CAAC,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;QAE7D,IAAI,CAAC,CAAC,SAAS,YAAY,sBAAa,CAAC,EAAE;YACzC,OAAO,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,IAAI,EAAE,cAAc,CAAC,CAAC;SACjE;QACD,MAAM,GAAG,GAAG,SAAS,CAAC,WAAW,EAAE,CAAC;QACpC,MAAM,OAAO,GAAG,IAAA,uBAAQ,EAAC,GAAG,CAAC;YAC3B,CAAC,CAAC,GAAG;YACL,CAAC,CAAC;gBACE,UAAU,EAAE,SAAS,CAAC,SAAS,EAAE;gBACjC,OAAO,EAAE,GAAG;aACb,CAAC;QAEN,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;QACvC,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE;YAC3C,cAAc,CAAC,KAAK,CAAC,QAAQ,EAAE,OAAO,EAAE,SAAS,CAAC,SAAS,EAAE,CAAC,CAAC;SAChE;aAAM;YACL,cAAc,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;SAC9B;IACH,CAAC;IAEM,kBAAkB,CACvB,SAAY,EACZ,IAAmB,EACnB,cAAgD;QAEhD,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC;YACtC,CAAC,CAAC;gBACE,UAAU,EAAE,SAAS,CAAC,UAAU;gBAChC,OAAO,EAAE,SAAS,CAAC,OAAO;aAC3B;YACH,CAAC,CAAC;gBACE,UAAU,EAAE,mBAAU,CAAC,qBAAqB;gBAC5C,OAAO,EAAE,oBAAQ,CAAC,yBAAyB;aAC5C,CAAC;QAEN,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;QACvC,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE;YAC3C,cAAc,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;SACvD;aAAM;YACL,cAAc,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;SAC9B;QAED,IAAI,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,EAAE;YACrC,OAAO,mBAAmB,CAAC,MAAM,CAAC,KAAK,CACrC,SAAS,CAAC,OAAO,EACjB,SAAS,CAAC,KAAK,CAChB,CAAC;SACH;QACD,OAAO,mBAAmB,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IACrD,CAAC;IAEM,iBAAiB,CAAC,GAAQ;QAC/B,OAAO,IAAA,uBAAQ,EAAC,GAAG,CAAC,IAAI,CAAC,CAAE,GAAa,CAAC,OAAO,CAAC;IACnD,CAAC;IAED;;;OAGG;IACI,WAAW,CAAC,GAAQ;QACzB,OAAO,GAAG,EAAE,UAAU,IAAI,GAAG,EAAE,OAAO,CAAC;IACzC,CAAC;;AA1EH,kDA2EC;AA1EyB,0BAAM,GAAG,IAAI,eAAM,CAAC,mBAAmB,CAAC,CAAC;AAI9C;IAFlB,IAAA,iBAAQ,GAAE;IACV,IAAA,eAAM,GAAE;sCAC4B,mCAAe;4DAAC","sourcesContent":["import {\r\n  ArgumentsHost,\r\n  ExceptionFilter,\r\n  HttpException,\r\n  HttpServer,\r\n  HttpStatus,\r\n  Inject,\r\n  Logger,\r\n  Optional,\r\n} from '@nestjs/common';\r\nimport { isObject } from '@nestjs/common/utils/shared.utils';\r\nimport { AbstractHttpAdapter } from '../adapters';\r\nimport { MESSAGES } from '../constants';\r\nimport { HttpAdapterHost } from '../helpers/http-adapter-host';\r\n\r\nexport class BaseExceptionFilter<T = any> implements ExceptionFilter<T> {\r\n  private static readonly logger = new Logger('ExceptionsHandler');\r\n\r\n  @Optional()\r\n  @Inject()\r\n  protected readonly httpAdapterHost?: HttpAdapterHost;\r\n\r\n  constructor(protected readonly applicationRef?: HttpServer) {}\r\n\r\n  catch(exception: T, host: ArgumentsHost) {\r\n    const applicationRef =\r\n      this.applicationRef ||\r\n      (this.httpAdapterHost && this.httpAdapterHost.httpAdapter);\r\n\r\n    if (!(exception instanceof HttpException)) {\r\n      return this.handleUnknownError(exception, host, applicationRef);\r\n    }\r\n    const res = exception.getResponse();\r\n    const message = isObject(res)\r\n      ? res\r\n      : {\r\n          statusCode: exception.getStatus(),\r\n          message: res,\r\n        };\r\n\r\n    const response = host.getArgByIndex(1);\r\n    if (!applicationRef.isHeadersSent(response)) {\r\n      applicationRef.reply(response, message, exception.getStatus());\r\n    } else {\r\n      applicationRef.end(response);\r\n    }\r\n  }\r\n\r\n  public handleUnknownError(\r\n    exception: T,\r\n    host: ArgumentsHost,\r\n    applicationRef: AbstractHttpAdapter | HttpServer,\r\n  ) {\r\n    const body = this.isHttpError(exception)\r\n      ? {\r\n          statusCode: exception.statusCode,\r\n          message: exception.message,\r\n        }\r\n      : {\r\n          statusCode: HttpStatus.INTERNAL_SERVER_ERROR,\r\n          message: MESSAGES.UNKNOWN_EXCEPTION_MESSAGE,\r\n        };\r\n\r\n    const response = host.getArgByIndex(1);\r\n    if (!applicationRef.isHeadersSent(response)) {\r\n      applicationRef.reply(response, body, body.statusCode);\r\n    } else {\r\n      applicationRef.end(response);\r\n    }\r\n\r\n    if (this.isExceptionObject(exception)) {\r\n      return BaseExceptionFilter.logger.error(\r\n        exception.message,\r\n        exception.stack,\r\n      );\r\n    }\r\n    return BaseExceptionFilter.logger.error(exception);\r\n  }\r\n\r\n  public isExceptionObject(err: any): err is Error {\r\n    return isObject(err) && !!(err as Error).message;\r\n  }\r\n\r\n  /**\r\n   * Checks if the thrown error comes from the \"http-errors\" library.\r\n   * @param err error object\r\n   */\r\n  public isHttpError(err: any): err is { statusCode: number; message: string } {\r\n    return err?.statusCode && err?.message;\r\n  }\r\n}\r\n"]}