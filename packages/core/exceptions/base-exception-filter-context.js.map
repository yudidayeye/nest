{"version":3,"file":"base-exception-filter-context.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["exceptions/base-exception-filter-context.ts"],"names":[],"mappings":";;;AAAA,wDAAmE;AAGnE,oEAAwE;AACxE,qCAAkC;AAClC,gEAA4D;AAC5D,qDAAuD;AAIvD,MAAa,0BAA2B,SAAQ,gCAAc;IAG5D,YAA6B,SAAwB;QACnD,KAAK,EAAE,CAAC;QADmB,cAAS,GAAT,SAAS,CAAe;IAErD,CAAC;IAEM,qBAAqB,CAC1B,QAAW,EACX,SAAS,GAAG,0BAAc,EAC1B,UAAmB;QAEnB,IAAI,IAAA,sBAAO,EAAC,QAAQ,CAAC,EAAE;YACrB,OAAO,EAAO,CAAC;SAChB;QACD,OAAO,IAAA,iBAAO,EAAC,QAAQ,CAAC;aACrB,MAAM,CACL,QAAQ,CAAC,EAAE,CAAC,QAAQ,IAAI,CAAC,IAAA,yBAAU,EAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,QAAQ,CAAC,IAAI,CAAC,CACtE;aACA,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;aACpE,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;aACtB,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAChB,IAAI,EAAE,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC;YACnC,kBAAkB,EAAE,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC;SAC1D,CAAC,CAAC;aACF,OAAO,EAAO,CAAC;IACpB,CAAC;IAEM,iBAAiB,CACtB,MAAkC,EAClC,SAAS,GAAG,0BAAc,EAC1B,UAAmB;QAEnB,MAAM,QAAQ,GAAI,MAA0B,CAAC,KAAK,CAAC;QACnD,IAAI,QAAQ,EAAE;YACZ,OAAO,MAAyB,CAAC;SAClC;QACD,MAAM,eAAe,GAAG,IAAI,CAAC,qBAAqB,CAAC,MAAuB,CAAC,CAAC;QAC5E,IAAI,CAAC,eAAe,EAAE;YACpB,OAAO,IAAI,CAAC;SACb;QACD,MAAM,YAAY,GAAG,eAAe,CAAC,sBAAsB,CACzD,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,eAAe,CAAC,EAC7C,UAAU,CACX,CAAC;QACF,OAAO,YAAY,IAAI,YAAY,CAAC,QAAQ,CAAC;IAC/C,CAAC;IAEM,qBAAqB,CAC1B,QAAuB;QAEvB,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;YACvB,OAAO;SACR;QACD,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;QAC/C,MAAM,SAAS,GAAG,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACrD,IAAI,CAAC,SAAS,EAAE;YACd,OAAO;SACR;QACD,OAAO,SAAS,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC7C,CAAC;IAEM,sBAAsB,CAAC,QAAyB;QACrD,MAAM,SAAS,GAAG,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QAClD,OAAO,CACL,OAAO,CAAC,WAAW,CAAC,mCAAuB,EAAE,SAAS,CAAC,WAAW,CAAC,IAAI,EAAE,CAC1E,CAAC;IACJ,CAAC;CACF;AApED,gEAoEC","sourcesContent":["import { FILTER_CATCH_EXCEPTIONS } from '@nestjs/common/constants';\r\nimport { Type } from '@nestjs/common/interfaces';\r\nimport { ExceptionFilter } from '@nestjs/common/interfaces/exceptions/exception-filter.interface';\r\nimport { isEmpty, isFunction } from '@nestjs/common/utils/shared.utils';\r\nimport { iterate } from 'iterare';\r\nimport { ContextCreator } from '../helpers/context-creator';\r\nimport { STATIC_CONTEXT } from '../injector/constants';\r\nimport { NestContainer } from '../injector/container';\r\nimport { InstanceWrapper } from '../injector/instance-wrapper';\r\n\r\nexport class BaseExceptionFilterContext extends ContextCreator {\r\n  protected moduleContext: string;\r\n\r\n  constructor(private readonly container: NestContainer) {\r\n    super();\r\n  }\r\n\r\n  public createConcreteContext<T extends any[], R extends any[]>(\r\n    metadata: T,\r\n    contextId = STATIC_CONTEXT,\r\n    inquirerId?: string,\r\n  ): R {\r\n    if (isEmpty(metadata)) {\r\n      return [] as R;\r\n    }\r\n    return iterate(metadata)\r\n      .filter(\r\n        instance => instance && (isFunction(instance.catch) || instance.name),\r\n      )\r\n      .map(filter => this.getFilterInstance(filter, contextId, inquirerId))\r\n      .filter(item => !!item)\r\n      .map(instance => ({\r\n        func: instance.catch.bind(instance),\r\n        exceptionMetatypes: this.reflectCatchExceptions(instance),\r\n      }))\r\n      .toArray() as R;\r\n  }\r\n\r\n  public getFilterInstance(\r\n    filter: Function | ExceptionFilter,\r\n    contextId = STATIC_CONTEXT,\r\n    inquirerId?: string,\r\n  ): ExceptionFilter | null {\r\n    const isObject = (filter as ExceptionFilter).catch;\r\n    if (isObject) {\r\n      return filter as ExceptionFilter;\r\n    }\r\n    const instanceWrapper = this.getInstanceByMetatype(filter as Type<unknown>);\r\n    if (!instanceWrapper) {\r\n      return null;\r\n    }\r\n    const instanceHost = instanceWrapper.getInstanceByContextId(\r\n      this.getContextId(contextId, instanceWrapper),\r\n      inquirerId,\r\n    );\r\n    return instanceHost && instanceHost.instance;\r\n  }\r\n\r\n  public getInstanceByMetatype(\r\n    metatype: Type<unknown>,\r\n  ): InstanceWrapper | undefined {\r\n    if (!this.moduleContext) {\r\n      return;\r\n    }\r\n    const collection = this.container.getModules();\r\n    const moduleRef = collection.get(this.moduleContext);\r\n    if (!moduleRef) {\r\n      return;\r\n    }\r\n    return moduleRef.injectables.get(metatype);\r\n  }\r\n\r\n  public reflectCatchExceptions(instance: ExceptionFilter): Type<any>[] {\r\n    const prototype = Object.getPrototypeOf(instance);\r\n    return (\r\n      Reflect.getMetadata(FILTER_CATCH_EXCEPTIONS, prototype.constructor) || []\r\n    );\r\n  }\r\n}\r\n"]}