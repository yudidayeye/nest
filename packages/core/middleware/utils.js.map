{"version":3,"file":"utils.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["middleware/utils.ts"],"names":[],"mappings":";;;AAAA,2CAA+C;AAE/C,oEAI2C;AAC3C,qCAAkC;AAClC,+CAA+C;AAC/C,6BAA0B;AAE1B,2CAAkD;AAE3C,MAAM,iBAAiB,GAAG,CAC/B,MAA8B,EACN,EAAE;IAC1B,OAAO,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;QACxB,IAAI,IAAA,uBAAQ,EAAC,KAAK,CAAC,EAAE;YACnB,OAAO;gBACL,IAAI,EAAE,KAAK;gBACX,aAAa,EAAE,sBAAa,CAAC,GAAG;gBAChC,SAAS,EAAE,YAAY,CAAC,IAAA,8BAAe,EAAC,KAAK,CAAC,CAAC;aAChD,CAAC;SACH;QACD,OAAO;YACL,IAAI,EAAE,KAAK,CAAC,IAAI;YAChB,aAAa,EAAE,KAAK,CAAC,MAAM;YAC3B,SAAS,EAAE,YAAY,CAAC,IAAA,8BAAe,EAAC,KAAK,CAAC,IAAI,CAAC,CAAC;SACrD,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAjBW,QAAA,iBAAiB,qBAiB5B;AAEK,MAAM,gBAAgB,GAAG,CAC9B,UAAe,EACf,MAAmB,EACnB,WAAuB,EACvB,EAAE;IACF,MAAM,cAAc,GAAG,IAAA,yBAAiB,EAAC,MAAM,CAAC,CAAC;IACjD,OAAO,IAAA,iBAAO,EAAC,EAAE,CAAC;SACf,MAAM,CAAC,UAAU,CAAC;SAClB,MAAM,CAAC,yBAAU,CAAC;SAClB,GAAG,CAAC,CAAC,IAAO,EAAE,EAAE,CAAC,IAAA,kBAAU,EAAC,IAAI,EAAE,cAAc,EAAE,WAAW,CAAC,CAAC;SAC/D,OAAO,EAAE,CAAC;AACf,CAAC,CAAC;AAXW,QAAA,gBAAgB,oBAW3B;AAEK,MAAM,UAAU,GAAG,CACxB,UAAa,EACb,cAAsC,EACtC,WAAuB,EACvB,EAAE;IACF,IAAI,iBAAiB,CAAC,UAAU,CAAC,EAAE;QACjC,IAAI,cAAc,CAAC,MAAM,IAAI,CAAC,EAAE;YAC9B,OAAO,UAAU,CAAC;SACnB;QACD,MAAM,cAAc,GAAG,KAAM,SAAS,UAAwB;YAC5D,GAAG,CAAC,GAAG,MAAiB;gBACtB,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,MAA8C,CAAC;gBACtE,MAAM,UAAU,GAAG,yBAAyB,CAC1C,GAAG,EACH,cAAc,EACd,WAAW,CACZ,CAAC;gBACF,IAAI,UAAU,EAAE;oBACd,OAAO,IAAI,EAAE,CAAC;iBACf;gBACD,OAAO,KAAK,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC;YAC9B,CAAC;SACF,CAAC;QACF,OAAO,WAAW,CAAC,cAAc,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC;KACrD;IACD,OAAO,WAAW,CAChB;QAAA;YACE,QAAG,GAAG,CAAC,GAAG,MAAiB,EAAE,EAAE;gBAC7B,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,MAA8C,CAAC;gBACtE,MAAM,UAAU,GAAG,yBAAyB,CAC1C,GAAG,EACH,cAAc,EACd,WAAW,CACZ,CAAC;gBACF,IAAI,UAAU,EAAE;oBACd,OAAO,IAAI,EAAE,CAAC;iBACf;gBACD,OAAQ,UAAuB,CAAC,GAAG,MAAM,CAAC,CAAC;YAC7C,CAAC,CAAC;QACJ,CAAC;KAAA,CACF,CAAC;AACJ,CAAC,CAAC;AAzCW,QAAA,UAAU,cAyCrB;AAEF,SAAgB,iBAAiB,CAAC,UAAe;IAC/C,MAAM,aAAa,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC;IAC5C,IAAI,aAAa,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,OAAO,EAAE;QAC7C,OAAO,IAAI,CAAC;KACb;IACD,MAAM,aAAa,GAAG,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC/C,OAAO,CACL,aAAa,CAAC,CAAC,CAAC,KAAK,UAAU;QAC/B,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACnC,IAAA,yBAAU,EAAC,UAAU,CAAC,SAAS,EAAE,GAAG,CAAC,CACtC,CAAC;AACJ,CAAC;AAXD,8CAWC;AAED,SAAgB,WAAW,CAAC,QAAmB,EAAE,KAAK,GAAG,IAAA,SAAG,EAAC,EAAE,CAAC;IAC9D,MAAM,CAAC,cAAc,CAAC,QAAQ,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;IAC1D,OAAO,QAAQ,CAAC;AAClB,CAAC;AAHD,kCAGC;AAED,SAAgB,yBAAyB,CACvC,GAAwB,EACxB,cAAsC,EACtC,WAAuB;IAEvB,IAAI,cAAc,CAAC,MAAM,IAAI,CAAC,EAAE;QAC9B,OAAO,KAAK,CAAC;KACd;IACD,MAAM,SAAS,GAAG,WAAW,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;IACpD,MAAM,WAAW,GAAG,WAAW,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;IACnD,MAAM,gBAAgB,GAAG,WAAW,IAAI,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IACjE,MAAM,QAAQ,GACZ,gBAAgB,IAAI,CAAC;QACnB,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,gBAAgB,CAAC;QACxC,CAAC,CAAC,WAAW,CAAC;IAElB,OAAO,IAAA,uBAAe,EAAC,cAAc,EAAE,QAAQ,EAAE,sBAAa,CAAC,SAAS,CAAC,CAAC,CAAC;AAC7E,CAAC;AAjBD,8DAiBC","sourcesContent":["import { RequestMethod } from '@nestjs/common';\r\nimport { HttpServer, RouteInfo, Type } from '@nestjs/common/interfaces';\r\nimport {\r\n  addLeadingSlash,\r\n  isFunction,\r\n  isString,\r\n} from '@nestjs/common/utils/shared.utils';\r\nimport { iterate } from 'iterare';\r\nimport * as pathToRegexp from 'path-to-regexp';\r\nimport { uid } from 'uid';\r\nimport { ExcludeRouteMetadata } from '../router/interfaces/exclude-route-metadata.interface';\r\nimport { isRouteExcluded } from '../router/utils';\r\n\r\nexport const mapToExcludeRoute = (\r\n  routes: (string | RouteInfo)[],\r\n): ExcludeRouteMetadata[] => {\r\n  return routes.map(route => {\r\n    if (isString(route)) {\r\n      return {\r\n        path: route,\r\n        requestMethod: RequestMethod.ALL,\r\n        pathRegex: pathToRegexp(addLeadingSlash(route)),\r\n      };\r\n    }\r\n    return {\r\n      path: route.path,\r\n      requestMethod: route.method,\r\n      pathRegex: pathToRegexp(addLeadingSlash(route.path)),\r\n    };\r\n  });\r\n};\r\n\r\nexport const filterMiddleware = <T extends Function | Type<any> = any>(\r\n  middleware: T[],\r\n  routes: RouteInfo[],\r\n  httpAdapter: HttpServer,\r\n) => {\r\n  const excludedRoutes = mapToExcludeRoute(routes);\r\n  return iterate([])\r\n    .concat(middleware)\r\n    .filter(isFunction)\r\n    .map((item: T) => mapToClass(item, excludedRoutes, httpAdapter))\r\n    .toArray();\r\n};\r\n\r\nexport const mapToClass = <T extends Function | Type<any>>(\r\n  middleware: T,\r\n  excludedRoutes: ExcludeRouteMetadata[],\r\n  httpAdapter: HttpServer,\r\n) => {\r\n  if (isMiddlewareClass(middleware)) {\r\n    if (excludedRoutes.length <= 0) {\r\n      return middleware;\r\n    }\r\n    const MiddlewareHost = class extends (middleware as Type<any>) {\r\n      use(...params: unknown[]) {\r\n        const [req, _, next] = params as [Record<string, any>, any, Function];\r\n        const isExcluded = isMiddlewareRouteExcluded(\r\n          req,\r\n          excludedRoutes,\r\n          httpAdapter,\r\n        );\r\n        if (isExcluded) {\r\n          return next();\r\n        }\r\n        return super.use(...params);\r\n      }\r\n    };\r\n    return assignToken(MiddlewareHost, middleware.name);\r\n  }\r\n  return assignToken(\r\n    class {\r\n      use = (...params: unknown[]) => {\r\n        const [req, _, next] = params as [Record<string, any>, any, Function];\r\n        const isExcluded = isMiddlewareRouteExcluded(\r\n          req,\r\n          excludedRoutes,\r\n          httpAdapter,\r\n        );\r\n        if (isExcluded) {\r\n          return next();\r\n        }\r\n        return (middleware as Function)(...params);\r\n      };\r\n    },\r\n  );\r\n};\r\n\r\nexport function isMiddlewareClass(middleware: any): middleware is Type<any> {\r\n  const middlewareStr = middleware.toString();\r\n  if (middlewareStr.substring(0, 5) === 'class') {\r\n    return true;\r\n  }\r\n  const middlewareArr = middlewareStr.split(' ');\r\n  return (\r\n    middlewareArr[0] === 'function' &&\r\n    /[A-Z]/.test(middlewareArr[1]?.[0]) &&\r\n    isFunction(middleware.prototype?.use)\r\n  );\r\n}\r\n\r\nexport function assignToken(metatype: Type<any>, token = uid(21)): Type<any> {\r\n  Object.defineProperty(metatype, 'name', { value: token });\r\n  return metatype;\r\n}\r\n\r\nexport function isMiddlewareRouteExcluded(\r\n  req: Record<string, any>,\r\n  excludedRoutes: ExcludeRouteMetadata[],\r\n  httpAdapter: HttpServer,\r\n): boolean {\r\n  if (excludedRoutes.length <= 0) {\r\n    return false;\r\n  }\r\n  const reqMethod = httpAdapter.getRequestMethod(req);\r\n  const originalUrl = httpAdapter.getRequestUrl(req);\r\n  const queryParamsIndex = originalUrl && originalUrl.indexOf('?');\r\n  const pathname =\r\n    queryParamsIndex >= 0\r\n      ? originalUrl.slice(0, queryParamsIndex)\r\n      : originalUrl;\r\n\r\n  return isRouteExcluded(excludedRoutes, pathname, RequestMethod[reqMethod]);\r\n}\r\n"]}