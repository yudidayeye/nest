{"version":3,"file":"builder.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["middleware/builder.ts"],"names":[],"mappings":";;;AAAA,kGAAgF;AAWhF,oEAAkE;AAClE,qCAAkC;AAGlC,mCAA2C;AAE3C,MAAa,iBAAiB;IAG5B,YACmB,YAA0B,EAC1B,WAAuB,EACvB,sBAA8C;QAF9C,iBAAY,GAAZ,YAAY,CAAc;QAC1B,gBAAW,GAAX,WAAW,CAAY;QACvB,2BAAsB,GAAtB,sBAAsB,CAAwB;QALhD,yBAAoB,GAAG,IAAI,GAAG,EAA2B,CAAC;IAMxE,CAAC;IAEG,KAAK,CACV,GAAG,UAA6C;QAEhD,OAAO,IAAI,iBAAiB,CAAC,WAAW,CACtC,IAAI,EACJ,IAAA,gCAAO,EAAC,UAAU,CAAC,EACnB,IAAI,CAAC,sBAAsB,CAC5B,CAAC;IACJ,CAAC;IAEM,KAAK;QACV,OAAO,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC,CAAC;IACxC,CAAC;IAEM,cAAc;QACnB,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;;AAzBH,8CA8GC;AAnFyB,6BAAW,GAAG;IAGpC,YACmB,OAA0B,EAC1B,UAA6C,EACtD,sBAA8C;QAFrC,YAAO,GAAP,OAAO,CAAmB;QAC1B,eAAU,GAAV,UAAU,CAAmC;QACtD,2BAAsB,GAAtB,sBAAsB,CAAwB;QALhD,mBAAc,GAAgB,EAAE,CAAC;IAMtC,CAAC;IAEG,iBAAiB;QACtB,OAAO,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;IAEM,OAAO,CACZ,GAAG,MAAiC;QAEpC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YACjE,GAAG,KAAK;YACR,IAAI,EAAE,IAAI,CAAC,sBAAsB,CAAC,eAAe,CAAC,KAAK,CAAC;SACzD,CAAC,CAAC,CAAC;QACJ,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,SAAS,CACd,GAAG,MAA6C;QAEhD,MAAM,EAAE,oBAAoB,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC;QAE9C,MAAM,aAAa,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;QACrD,MAAM,SAAS,GAAG,IAAI,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAC;QAC7D,MAAM,aAAa,GAAG;YACpB,UAAU,EAAE,IAAA,wBAAgB,EAC1B,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,cAAc,EACnB,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,CAC9B;YACD,SAAS;SACV,CAAC;QACF,oBAAoB,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QACxC,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAEO,iBAAiB,CACvB,MAA6C;QAE7C,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC;QAEtC,OAAO,IAAA,iBAAO,EAAC,MAAM,CAAC;aACnB,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,YAAY,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;aACrD,OAAO,EAAE;aACT,OAAO,EAAE,CAAC;IACf,CAAC;IAEO,sBAAsB,CAAC,MAAmB;QAChD,MAAM,gBAAgB,GAAG,YAAY,CAAC;QACtC,MAAM,QAAQ,GAAG,SAAS,CAAC;QAC3B,MAAM,eAAe,GAAG,MAAM;aAC3B,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;aACzC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YACb,MAAM,EAAE,KAAK,CAAC,MAAM;YACpB,IAAI,EAAE,KAAK,CAAC,IAAI;YAChB,KAAK,EAAE,IAAI,MAAM,CACf,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,QAAQ,CAAC,GAAG,IAAI,EAC5D,GAAG,CACJ;SACF,CAAC,CAAC,CAAC;QAEN,OAAO,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;YAC3B,MAAM,YAAY,GAAG,CAAC,IAAmC,EAAW,EAAE;gBACpE,IAAI,KAAK,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,EAAE;oBAChC,OAAO,KAAK,CAAC;iBACd;gBACD,MAAM,mBAAmB,GAAG,IAAA,4BAAa,EAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBACtD,OAAO,CACL,mBAAmB,KAAK,IAAI,CAAC,IAAI;oBACjC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,mBAAmB,CAAC,CACrC,CAAC;YACJ,CAAC,CAAC;YACF,MAAM,UAAU,GAAG,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YACtD,OAAO,UAAU,KAAK,SAAS,CAAC;QAClC,CAAC,CAAC,CAAC;IACL,CAAC;CACF,AAlFkC,CAkFjC","sourcesContent":["import { flatten } from '@nestjs/common/decorators/core/dependencies.decorator';\r\nimport {\r\n  HttpServer,\r\n  MiddlewareConsumer,\r\n  Type,\r\n} from '@nestjs/common/interfaces';\r\nimport {\r\n  MiddlewareConfigProxy,\r\n  MiddlewareConfiguration,\r\n  RouteInfo,\r\n} from '@nestjs/common/interfaces/middleware';\r\nimport { stripEndSlash } from '@nestjs/common/utils/shared.utils';\r\nimport { iterate } from 'iterare';\r\nimport { RouteInfoPathExtractor } from './route-info-path-extractor';\r\nimport { RoutesMapper } from './routes-mapper';\r\nimport { filterMiddleware } from './utils';\r\n\r\nexport class MiddlewareBuilder implements MiddlewareConsumer {\r\n  private readonly middlewareCollection = new Set<MiddlewareConfiguration>();\r\n\r\n  constructor(\r\n    private readonly routesMapper: RoutesMapper,\r\n    private readonly httpAdapter: HttpServer,\r\n    private readonly routeInfoPathExtractor: RouteInfoPathExtractor,\r\n  ) {}\r\n\r\n  public apply(\r\n    ...middleware: Array<Type<any> | Function | any>\r\n  ): MiddlewareConfigProxy {\r\n    return new MiddlewareBuilder.ConfigProxy(\r\n      this,\r\n      flatten(middleware),\r\n      this.routeInfoPathExtractor,\r\n    );\r\n  }\r\n\r\n  public build(): MiddlewareConfiguration[] {\r\n    return [...this.middlewareCollection];\r\n  }\r\n\r\n  public getHttpAdapter(): HttpServer {\r\n    return this.httpAdapter;\r\n  }\r\n\r\n  private static readonly ConfigProxy = class implements MiddlewareConfigProxy {\r\n    private excludedRoutes: RouteInfo[] = [];\r\n\r\n    constructor(\r\n      private readonly builder: MiddlewareBuilder,\r\n      private readonly middleware: Array<Type<any> | Function | any>,\r\n      private routeInfoPathExtractor: RouteInfoPathExtractor,\r\n    ) {}\r\n\r\n    public getExcludedRoutes(): RouteInfo[] {\r\n      return this.excludedRoutes;\r\n    }\r\n\r\n    public exclude(\r\n      ...routes: Array<string | RouteInfo>\r\n    ): MiddlewareConfigProxy {\r\n      this.excludedRoutes = this.getRoutesFlatList(routes).map(route => ({\r\n        ...route,\r\n        path: this.routeInfoPathExtractor.extractPathFrom(route),\r\n      }));\r\n      return this;\r\n    }\r\n\r\n    public forRoutes(\r\n      ...routes: Array<string | Type<any> | RouteInfo>\r\n    ): MiddlewareConsumer {\r\n      const { middlewareCollection } = this.builder;\r\n\r\n      const flattedRoutes = this.getRoutesFlatList(routes);\r\n      const forRoutes = this.removeOverlappedRoutes(flattedRoutes);\r\n      const configuration = {\r\n        middleware: filterMiddleware(\r\n          this.middleware,\r\n          this.excludedRoutes,\r\n          this.builder.getHttpAdapter(),\r\n        ),\r\n        forRoutes,\r\n      };\r\n      middlewareCollection.add(configuration);\r\n      return this.builder;\r\n    }\r\n\r\n    private getRoutesFlatList(\r\n      routes: Array<string | Type<any> | RouteInfo>,\r\n    ): RouteInfo[] {\r\n      const { routesMapper } = this.builder;\r\n\r\n      return iterate(routes)\r\n        .map(route => routesMapper.mapRouteToRouteInfo(route))\r\n        .flatten()\r\n        .toArray();\r\n    }\r\n\r\n    private removeOverlappedRoutes(routes: RouteInfo[]) {\r\n      const regexMatchParams = /(:[^\\/]*)/g;\r\n      const wildcard = '([^/]*)';\r\n      const routesWithRegex = routes\r\n        .filter(route => route.path.includes(':'))\r\n        .map(route => ({\r\n          method: route.method,\r\n          path: route.path,\r\n          regex: new RegExp(\r\n            '^(' + route.path.replace(regexMatchParams, wildcard) + ')$',\r\n            'g',\r\n          ),\r\n        }));\r\n\r\n      return routes.filter(route => {\r\n        const isOverlapped = (item: { regex: RegExp } & RouteInfo): boolean => {\r\n          if (route.method !== item.method) {\r\n            return false;\r\n          }\r\n          const normalizedRoutePath = stripEndSlash(route.path);\r\n          return (\r\n            normalizedRoutePath !== item.path &&\r\n            item.regex.test(normalizedRoutePath)\r\n          );\r\n        };\r\n        const routeMatch = routesWithRegex.find(isOverlapped);\r\n        return routeMatch === undefined;\r\n      });\r\n    }\r\n  };\r\n}\r\n"]}