{"version":3,"file":"route-info-path-extractor.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["middleware/route-info-path-extractor.ts"],"names":[],"mappings":"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","sourcesContent":["import { VersioningType } from '@nestjs/common';\r\nimport {\r\n  RouteInfo,\r\n  VersioningOptions,\r\n  VersionValue,\r\n} from '@nestjs/common/interfaces';\r\nimport {\r\n  addLeadingSlash,\r\n  stripEndSlash,\r\n} from '@nestjs/common/utils/shared.utils';\r\nimport { ApplicationConfig } from '../application-config';\r\nimport { ExcludeRouteMetadata } from '../router/interfaces/exclude-route-metadata.interface';\r\nimport { isRouteExcluded } from '../router/utils';\r\nimport { RoutePathFactory } from './../router/route-path-factory';\r\n\r\nexport class RouteInfoPathExtractor {\r\n  private routePathFactory: RoutePathFactory;\r\n  private readonly prefixPath: string;\r\n  private readonly excludedGlobalPrefixRoutes: ExcludeRouteMetadata[];\r\n  private readonly versioningConfig?: VersioningOptions;\r\n\r\n  constructor(private readonly applicationConfig: ApplicationConfig) {\r\n    this.routePathFactory = new RoutePathFactory(applicationConfig);\r\n    this.prefixPath = stripEndSlash(\r\n      addLeadingSlash(this.applicationConfig.getGlobalPrefix()),\r\n    );\r\n    this.excludedGlobalPrefixRoutes =\r\n      this.applicationConfig.getGlobalPrefixOptions().exclude;\r\n    this.versioningConfig = this.applicationConfig.getVersioning();\r\n  }\r\n\r\n  public extractPathsFrom({ path, method, version }: RouteInfo): string[] {\r\n    const versionPath = this.extractVersionPathFrom(version);\r\n\r\n    if (this.isAWildcard(path)) {\r\n      return Array.isArray(this.excludedGlobalPrefixRoutes)\r\n        ? [\r\n            this.prefixPath + versionPath + addLeadingSlash(path),\r\n            ...this.excludedGlobalPrefixRoutes.map(\r\n              route => versionPath + addLeadingSlash(route.path),\r\n            ),\r\n          ]\r\n        : [this.prefixPath + versionPath + addLeadingSlash(path)];\r\n    }\r\n\r\n    return [this.extractNonWildcardPathFrom({ path, method, version })];\r\n  }\r\n\r\n  public extractPathFrom(route: RouteInfo): string {\r\n    if (this.isAWildcard(route.path) && !route.version) {\r\n      return addLeadingSlash(route.path);\r\n    }\r\n\r\n    return this.extractNonWildcardPathFrom(route);\r\n  }\r\n\r\n  private isAWildcard(path: string): boolean {\r\n    return ['*', '/*', '/*/', '(.*)', '/(.*)'].includes(path);\r\n  }\r\n\r\n  private extractNonWildcardPathFrom({\r\n    path,\r\n    method,\r\n    version,\r\n  }: RouteInfo): string {\r\n    const versionPath = this.extractVersionPathFrom(version);\r\n\r\n    if (\r\n      Array.isArray(this.excludedGlobalPrefixRoutes) &&\r\n      isRouteExcluded(this.excludedGlobalPrefixRoutes, path, method)\r\n    ) {\r\n      return versionPath + addLeadingSlash(path);\r\n    }\r\n\r\n    return this.prefixPath + versionPath + addLeadingSlash(path);\r\n  }\r\n\r\n  private extractVersionPathFrom(version?: VersionValue): string {\r\n    if (!version || this.versioningConfig?.type !== VersioningType.URI)\r\n      return '';\r\n\r\n    const versionPrefix = this.routePathFactory.getVersionPrefix(\r\n      this.versioningConfig,\r\n    );\r\n    return addLeadingSlash(versionPrefix + version.toString());\r\n  }\r\n}\r\n"]}