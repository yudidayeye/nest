{"version":3,"file":"container.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["middleware/container.ts"],"names":[],"mappings":";;;AAEA,gEAA2D;AAC3D,sDAAkD;AAElD,mEAA+D;AAE/D,MAAa,mBAAmB;IAU9B,YAA6B,SAAwB;QAAxB,cAAS,GAAT,SAAS,CAAe;QATpC,eAAU,GAAG,IAAI,GAAG,EAGlC,CAAC;QACa,sBAAiB,GAAG,IAAI,GAAG,EAGzC,CAAC;IAEoD,CAAC;IAElD,uBAAuB,CAC5B,SAAiB;QAEjB,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;YACnC,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;YAC3D,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,EAAE,SAAS,CAAC,WAAW,CAAC,CAAC;SACvD;QACD,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IACxC,CAAC;IAEM,iBAAiB;QACtB,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAChC,CAAC;IAEM,YAAY,CACjB,UAAqC,EACrC,SAAiB;QAEjB,MAAM,UAAU,GAAG,IAAI,CAAC,uBAAuB,CAAC,SAAS,CAAC,CAAC;QAC3D,MAAM,YAAY,GAAG,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;QAErD,MAAM,cAAc,GAAG,UAAU,IAAI,EAAE,CAAC;QACxC,MAAM,gBAAgB,GAAG,CAA0B,QAAW,EAAE,EAAE;YAChE,MAAM,KAAK,GAAG,QAAQ,CAAC;YACvB,UAAU,CAAC,GAAG,CACZ,KAAK,EACL,IAAI,kCAAe,CAAC;gBAClB,KAAK,EAAE,IAAA,+BAAa,EAAC,QAAQ,CAAC;gBAC9B,OAAO,EAAE,IAAA,sBAAS,EAAC,QAAQ,CAAC;gBAC5B,IAAI,EAAE,KAAK,EAAE,IAAI,IAAI,KAAK;gBAC1B,QAAQ;gBACR,KAAK;aACN,CAAC,CACH,CAAC;QACJ,CAAC,CAAC;QACF,cAAc,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YAC9B,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;YACnD,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,eAAe,CAAC,UAAkB;QACxC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;YAC3C,IAAI,CAAC,iBAAiB,CAAC,GAAG,CACxB,UAAU,EACV,IAAI,GAAG,EAA2B,CACnC,CAAC;SACH;QACD,OAAO,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IAChD,CAAC;CACF;AA9DD,kDA8DC","sourcesContent":["import { InjectionToken, Type } from '@nestjs/common';\r\nimport { MiddlewareConfiguration } from '@nestjs/common/interfaces/middleware/middleware-configuration.interface';\r\nimport { getClassScope } from '../helpers/get-class-scope';\r\nimport { isDurable } from '../helpers/is-durable';\r\nimport { NestContainer } from '../injector/container';\r\nimport { InstanceWrapper } from '../injector/instance-wrapper';\r\n\r\nexport class MiddlewareContainer {\r\n  private readonly middleware = new Map<\r\n    string,\r\n    Map<InjectionToken, InstanceWrapper>\r\n  >();\r\n  private readonly configurationSets = new Map<\r\n    string,\r\n    Set<MiddlewareConfiguration>\r\n  >();\r\n\r\n  constructor(private readonly container: NestContainer) {}\r\n\r\n  public getMiddlewareCollection(\r\n    moduleKey: string,\r\n  ): Map<InjectionToken, InstanceWrapper> {\r\n    if (!this.middleware.has(moduleKey)) {\r\n      const moduleRef = this.container.getModuleByKey(moduleKey);\r\n      this.middleware.set(moduleKey, moduleRef.middlewares);\r\n    }\r\n    return this.middleware.get(moduleKey);\r\n  }\r\n\r\n  public getConfigurations(): Map<string, Set<MiddlewareConfiguration>> {\r\n    return this.configurationSets;\r\n  }\r\n\r\n  public insertConfig(\r\n    configList: MiddlewareConfiguration[],\r\n    moduleKey: string,\r\n  ) {\r\n    const middleware = this.getMiddlewareCollection(moduleKey);\r\n    const targetConfig = this.getTargetConfig(moduleKey);\r\n\r\n    const configurations = configList || [];\r\n    const insertMiddleware = <T extends Type<unknown>>(metatype: T) => {\r\n      const token = metatype;\r\n      middleware.set(\r\n        token,\r\n        new InstanceWrapper({\r\n          scope: getClassScope(metatype),\r\n          durable: isDurable(metatype),\r\n          name: token?.name ?? token,\r\n          metatype,\r\n          token,\r\n        }),\r\n      );\r\n    };\r\n    configurations.forEach(config => {\r\n      [].concat(config.middleware).map(insertMiddleware);\r\n      targetConfig.add(config);\r\n    });\r\n  }\r\n\r\n  private getTargetConfig(moduleName: string) {\r\n    if (!this.configurationSets.has(moduleName)) {\r\n      this.configurationSets.set(\r\n        moduleName,\r\n        new Set<MiddlewareConfiguration>(),\r\n      );\r\n    }\r\n    return this.configurationSets.get(moduleName);\r\n  }\r\n}\r\n"]}