{"version":3,"file":"middleware-module.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["middleware/middleware-module.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpServer, InjectionToken, Logger } from '@nestjs/common';\r\nimport { RequestMethod } from '@nestjs/common/enums/request-method.enum';\r\nimport {\r\n  MiddlewareConfiguration,\r\n  NestMiddleware,\r\n  RouteInfo,\r\n} from '@nestjs/common/interfaces/middleware';\r\nimport { NestApplicationContextOptions } from '@nestjs/common/interfaces/nest-application-context-options.interface';\r\nimport { isUndefined } from '@nestjs/common/utils/shared.utils';\r\nimport { ApplicationConfig } from '../application-config';\r\nimport { InvalidMiddlewareException } from '../errors/exceptions/invalid-middleware.exception';\r\nimport { RuntimeException } from '../errors/exceptions/runtime.exception';\r\nimport { ContextIdFactory } from '../helpers/context-id-factory';\r\nimport { ExecutionContextHost } from '../helpers/execution-context-host';\r\nimport { STATIC_CONTEXT } from '../injector/constants';\r\nimport { NestContainer } from '../injector/container';\r\nimport { Injector } from '../injector/injector';\r\nimport { ContextId, InstanceWrapper } from '../injector/instance-wrapper';\r\nimport { Module } from '../injector/module';\r\nimport { GraphInspector } from '../inspector/graph-inspector';\r\nimport {\r\n  Entrypoint,\r\n  MiddlewareEntrypointMetadata,\r\n} from '../inspector/interfaces/entrypoint.interface';\r\nimport { REQUEST_CONTEXT_ID } from '../router/request/request-constants';\r\nimport { RouterExceptionFilters } from '../router/router-exception-filters';\r\nimport { RouterProxy } from '../router/router-proxy';\r\nimport { isRequestMethodAll } from '../router/utils';\r\nimport { MiddlewareBuilder } from './builder';\r\nimport { MiddlewareContainer } from './container';\r\nimport { MiddlewareResolver } from './resolver';\r\nimport { RouteInfoPathExtractor } from './route-info-path-extractor';\r\nimport { RoutesMapper } from './routes-mapper';\r\n\r\nexport class MiddlewareModule<\r\n  TAppOptions extends NestApplicationContextOptions = NestApplicationContextOptions,\r\n> {\r\n  private readonly routerProxy = new RouterProxy();\r\n  private readonly exceptionFiltersCache = new WeakMap();\r\n  private readonly logger = new Logger(MiddlewareModule.name);\r\n\r\n  private injector: Injector;\r\n  private routerExceptionFilter: RouterExceptionFilters;\r\n  private routesMapper: RoutesMapper;\r\n  private resolver: MiddlewareResolver;\r\n  private container: NestContainer;\r\n  private httpAdapter: HttpServer;\r\n  private graphInspector: GraphInspector;\r\n  private appOptions: TAppOptions;\r\n  private routeInfoPathExtractor: RouteInfoPathExtractor;\r\n\r\n  public async register(\r\n    middlewareContainer: MiddlewareContainer,\r\n    container: NestContainer,\r\n    config: ApplicationConfig,\r\n    injector: Injector,\r\n    httpAdapter: HttpServer,\r\n    graphInspector: GraphInspector,\r\n    options: TAppOptions,\r\n  ) {\r\n    this.appOptions = options;\r\n\r\n    const appRef = container.getHttpAdapterRef();\r\n    this.routerExceptionFilter = new RouterExceptionFilters(\r\n      container,\r\n      config,\r\n      appRef,\r\n    );\r\n    this.routesMapper = new RoutesMapper(container, config);\r\n    this.resolver = new MiddlewareResolver(middlewareContainer, injector);\r\n    this.routeInfoPathExtractor = new RouteInfoPathExtractor(config);\r\n    this.injector = injector;\r\n    this.container = container;\r\n    this.httpAdapter = httpAdapter;\r\n    this.graphInspector = graphInspector;\r\n\r\n    const modules = container.getModules();\r\n    await this.resolveMiddleware(middlewareContainer, modules);\r\n  }\r\n\r\n  public async resolveMiddleware(\r\n    middlewareContainer: MiddlewareContainer,\r\n    modules: Map<string, Module>,\r\n  ) {\r\n    const moduleEntries = [...modules.entries()];\r\n    const loadMiddlewareConfiguration = async ([moduleName, moduleRef]: [\r\n      string,\r\n      Module,\r\n    ]) => {\r\n      await this.loadConfiguration(middlewareContainer, moduleRef, moduleName);\r\n      await this.resolver.resolveInstances(moduleRef, moduleName);\r\n    };\r\n    await Promise.all(moduleEntries.map(loadMiddlewareConfiguration));\r\n  }\r\n\r\n  public async loadConfiguration(\r\n    middlewareContainer: MiddlewareContainer,\r\n    moduleRef: Module,\r\n    moduleKey: string,\r\n  ) {\r\n    const { instance } = moduleRef;\r\n    if (!instance.configure) {\r\n      return;\r\n    }\r\n    const middlewareBuilder = new MiddlewareBuilder(\r\n      this.routesMapper,\r\n      this.httpAdapter,\r\n      this.routeInfoPathExtractor,\r\n    );\r\n    try {\r\n      await instance.configure(middlewareBuilder);\r\n    } catch (err) {\r\n      if (!this.appOptions.preview) {\r\n        throw err;\r\n      }\r\n      const warningMessage =\r\n        `Warning! \"${moduleRef.name}\" module exposes a \"configure\" method that throws an exception in the preview mode` +\r\n        ` (possibly due to missing dependencies). Note: you can ignore this message, just be aware that some of those conditional middlewares will not be reflected in your graph.`;\r\n      this.logger.warn(warningMessage);\r\n    }\r\n\r\n    if (!(middlewareBuilder instanceof MiddlewareBuilder)) {\r\n      return;\r\n    }\r\n    const config = middlewareBuilder.build();\r\n    middlewareContainer.insertConfig(config, moduleKey);\r\n  }\r\n\r\n  public async registerMiddleware(\r\n    middlewareContainer: MiddlewareContainer,\r\n    applicationRef: any,\r\n  ) {\r\n    const configs = middlewareContainer.getConfigurations();\r\n    const registerAllConfigs = async (\r\n      moduleKey: string,\r\n      middlewareConfig: MiddlewareConfiguration[],\r\n    ) => {\r\n      for (const config of middlewareConfig) {\r\n        await this.registerMiddlewareConfig(\r\n          middlewareContainer,\r\n          config,\r\n          moduleKey,\r\n          applicationRef,\r\n        );\r\n      }\r\n    };\r\n\r\n    const entriesSortedByDistance = [...configs.entries()].sort(\r\n      ([moduleA], [moduleB]) => {\r\n        return (\r\n          this.container.getModuleByKey(moduleA).distance -\r\n          this.container.getModuleByKey(moduleB).distance\r\n        );\r\n      },\r\n    );\r\n    for (const [moduleRef, moduleConfigurations] of entriesSortedByDistance) {\r\n      await registerAllConfigs(moduleRef, [...moduleConfigurations]);\r\n    }\r\n  }\r\n\r\n  public async registerMiddlewareConfig(\r\n    middlewareContainer: MiddlewareContainer,\r\n    config: MiddlewareConfiguration,\r\n    moduleKey: string,\r\n    applicationRef: any,\r\n  ) {\r\n    const { forRoutes } = config;\r\n    for (const routeInfo of forRoutes) {\r\n      await this.registerRouteMiddleware(\r\n        middlewareContainer,\r\n        routeInfo as RouteInfo,\r\n        config,\r\n        moduleKey,\r\n        applicationRef,\r\n      );\r\n    }\r\n  }\r\n\r\n  public async registerRouteMiddleware(\r\n    middlewareContainer: MiddlewareContainer,\r\n    routeInfo: RouteInfo,\r\n    config: MiddlewareConfiguration,\r\n    moduleKey: string,\r\n    applicationRef: any,\r\n  ) {\r\n    const middlewareCollection = [].concat(config.middleware);\r\n    const moduleRef = this.container.getModuleByKey(moduleKey);\r\n\r\n    for (const metatype of middlewareCollection) {\r\n      const collection = middlewareContainer.getMiddlewareCollection(moduleKey);\r\n      const instanceWrapper = collection.get(metatype);\r\n      if (isUndefined(instanceWrapper)) {\r\n        throw new RuntimeException();\r\n      }\r\n      if (instanceWrapper.isTransient) {\r\n        return;\r\n      }\r\n      this.graphInspector.insertClassNode(\r\n        moduleRef,\r\n        instanceWrapper,\r\n        'middleware',\r\n      );\r\n      const middlewareDefinition: Entrypoint<MiddlewareEntrypointMetadata> = {\r\n        type: 'middleware',\r\n        methodName: 'use',\r\n        className: instanceWrapper.name,\r\n        classNodeId: instanceWrapper.id,\r\n        metadata: {\r\n          key: routeInfo.path,\r\n          path: routeInfo.path,\r\n          requestMethod:\r\n            (RequestMethod[routeInfo.method] as keyof typeof RequestMethod) ??\r\n            'ALL',\r\n          version: routeInfo.version,\r\n        },\r\n      };\r\n      this.graphInspector.insertEntrypointDefinition(\r\n        middlewareDefinition,\r\n        instanceWrapper.id,\r\n      );\r\n\r\n      await this.bindHandler(\r\n        instanceWrapper,\r\n        applicationRef,\r\n        routeInfo,\r\n        moduleRef,\r\n        collection,\r\n      );\r\n    }\r\n  }\r\n\r\n  private async bindHandler(\r\n    wrapper: InstanceWrapper<NestMiddleware>,\r\n    applicationRef: HttpServer,\r\n    routeInfo: RouteInfo,\r\n    moduleRef: Module,\r\n    collection: Map<InjectionToken, InstanceWrapper>,\r\n  ) {\r\n    const { instance, metatype } = wrapper;\r\n    if (isUndefined(instance?.use)) {\r\n      throw new InvalidMiddlewareException(metatype.name);\r\n    }\r\n    const isStatic = wrapper.isDependencyTreeStatic();\r\n    if (isStatic) {\r\n      const proxy = await this.createProxy(instance);\r\n      return this.registerHandler(applicationRef, routeInfo, proxy);\r\n    }\r\n\r\n    const isTreeDurable = wrapper.isDependencyTreeDurable();\r\n\r\n    await this.registerHandler(\r\n      applicationRef,\r\n      routeInfo,\r\n      async <TRequest, TResponse>(\r\n        req: TRequest,\r\n        res: TResponse,\r\n        next: () => void,\r\n      ) => {\r\n        try {\r\n          const contextId = this.getContextId(req, isTreeDurable);\r\n          const contextInstance = await this.injector.loadPerContext(\r\n            instance,\r\n            moduleRef,\r\n            collection,\r\n            contextId,\r\n          );\r\n          const proxy = await this.createProxy<TRequest, TResponse>(\r\n            contextInstance,\r\n            contextId,\r\n          );\r\n          return proxy(req, res, next);\r\n        } catch (err) {\r\n          let exceptionsHandler = this.exceptionFiltersCache.get(instance.use);\r\n          if (!exceptionsHandler) {\r\n            exceptionsHandler = this.routerExceptionFilter.create(\r\n              instance,\r\n              instance.use,\r\n              undefined,\r\n            );\r\n            this.exceptionFiltersCache.set(instance.use, exceptionsHandler);\r\n          }\r\n          const host = new ExecutionContextHost([req, res, next]);\r\n          exceptionsHandler.next(err, host);\r\n        }\r\n      },\r\n    );\r\n  }\r\n\r\n  private async createProxy<TRequest = unknown, TResponse = unknown>(\r\n    instance: NestMiddleware,\r\n    contextId = STATIC_CONTEXT,\r\n  ): Promise<(req: TRequest, res: TResponse, next: () => void) => void> {\r\n    const exceptionsHandler = this.routerExceptionFilter.create(\r\n      instance,\r\n      instance.use,\r\n      undefined,\r\n      contextId,\r\n    );\r\n    const middleware = instance.use.bind(instance);\r\n    return this.routerProxy.createProxy(middleware, exceptionsHandler);\r\n  }\r\n\r\n  private async registerHandler(\r\n    applicationRef: HttpServer,\r\n    routeInfo: RouteInfo,\r\n    proxy: <TRequest, TResponse>(\r\n      req: TRequest,\r\n      res: TResponse,\r\n      next: () => void,\r\n    ) => void,\r\n  ) {\r\n    const { method } = routeInfo;\r\n    const paths = this.routeInfoPathExtractor.extractPathsFrom(routeInfo);\r\n    const isMethodAll = isRequestMethodAll(method);\r\n    const requestMethod = RequestMethod[method];\r\n    const router = await applicationRef.createMiddlewareFactory(method);\r\n    const middlewareFunction = isMethodAll\r\n      ? proxy\r\n      : <TRequest, TResponse>(\r\n          req: TRequest,\r\n          res: TResponse,\r\n          next: () => void,\r\n        ) => {\r\n          if (applicationRef.getRequestMethod(req) === requestMethod) {\r\n            return proxy(req, res, next);\r\n          }\r\n          return next();\r\n        };\r\n    paths.forEach(path => router(path, middlewareFunction));\r\n  }\r\n\r\n  private getContextId(request: unknown, isTreeDurable: boolean): ContextId {\r\n    const contextId = ContextIdFactory.getByRequest(request);\r\n    if (!request[REQUEST_CONTEXT_ID]) {\r\n      Object.defineProperty(request, REQUEST_CONTEXT_ID, {\r\n        value: contextId,\r\n        enumerable: false,\r\n        writable: false,\r\n        configurable: false,\r\n      });\r\n\r\n      const requestProviderValue = isTreeDurable ? contextId.payload : request;\r\n      this.container.registerRequestProvider(requestProviderValue, contextId);\r\n    }\r\n    return contextId;\r\n  }\r\n}\r\n"]}