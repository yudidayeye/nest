{"version":3,"file":"routes-mapper.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["middleware/routes-mapper.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  MODULE_PATH,\r\n  PATH_METADATA,\r\n  VERSION_METADATA,\r\n} from '@nestjs/common/constants';\r\nimport {\r\n  RouteInfo,\r\n  Type,\r\n  VERSION_NEUTRAL,\r\n  VersionValue,\r\n} from '@nestjs/common/interfaces';\r\nimport {\r\n  addLeadingSlash,\r\n  isString,\r\n  isUndefined,\r\n} from '@nestjs/common/utils/shared.utils';\r\nimport { ApplicationConfig } from '../application-config';\r\nimport { NestContainer } from '../injector/container';\r\nimport { Module } from '../injector/module';\r\nimport { MetadataScanner } from '../metadata-scanner';\r\nimport { PathsExplorer, RouteDefinition } from '../router/paths-explorer';\r\nimport { targetModulesByContainer } from '../router/router-module';\r\n\r\nexport class RoutesMapper {\r\n  private readonly pathsExplorer: PathsExplorer;\r\n\r\n  constructor(\r\n    private readonly container: NestContainer,\r\n    private readonly applicationConfig: ApplicationConfig,\r\n  ) {\r\n    this.pathsExplorer = new PathsExplorer(new MetadataScanner());\r\n  }\r\n\r\n  public mapRouteToRouteInfo(\r\n    controllerOrRoute: Type<any> | RouteInfo | string,\r\n  ): RouteInfo[] {\r\n    if (isString(controllerOrRoute)) {\r\n      return this.getRouteInfoFromPath(controllerOrRoute);\r\n    }\r\n    const routePathOrPaths = this.getRoutePath(controllerOrRoute);\r\n    if (this.isRouteInfo(routePathOrPaths, controllerOrRoute)) {\r\n      return this.getRouteInfoFromObject(controllerOrRoute);\r\n    }\r\n\r\n    return this.getRouteInfoFromController(controllerOrRoute, routePathOrPaths);\r\n  }\r\n\r\n  private getRouteInfoFromPath(routePath: string): RouteInfo[] {\r\n    const defaultRequestMethod = -1;\r\n    return [\r\n      {\r\n        path: addLeadingSlash(routePath),\r\n        method: defaultRequestMethod as any,\r\n      },\r\n    ];\r\n  }\r\n\r\n  private getRouteInfoFromObject(routeInfoObject: RouteInfo): RouteInfo[] {\r\n    const routeInfo: RouteInfo = {\r\n      path: addLeadingSlash(routeInfoObject.path),\r\n      method: routeInfoObject.method,\r\n    };\r\n\r\n    if (routeInfoObject.version) {\r\n      routeInfo.version = routeInfoObject.version;\r\n    }\r\n    return [routeInfo];\r\n  }\r\n\r\n  private getRouteInfoFromController(\r\n    controller: Type<any>,\r\n    routePath: string,\r\n  ): RouteInfo[] {\r\n    const controllerPaths = this.pathsExplorer.scanForPaths(\r\n      Object.create(controller),\r\n      controller.prototype,\r\n    );\r\n    const controllerVersion = this.getVersionMetadata(controller);\r\n    const versioningConfig = this.applicationConfig.getVersioning();\r\n    const moduleRef = this.getHostModuleOfController(controller);\r\n    const modulePath = this.getModulePath(moduleRef?.metatype);\r\n\r\n    const concatPaths = <T>(acc: T[], currentValue: T[]) =>\r\n      acc.concat(currentValue);\r\n\r\n    const toUndefinedIfNeural = (version: VersionValue) =>\r\n      version === VERSION_NEUTRAL ? undefined : version;\r\n\r\n    const toRouteInfo = (item: RouteDefinition, prefix: string) =>\r\n      item.path\r\n        ?.map(p => {\r\n          let endpointPath = modulePath ?? '';\r\n          endpointPath += this.normalizeGlobalPath(prefix) + addLeadingSlash(p);\r\n\r\n          const routeInfo: RouteInfo = {\r\n            path: endpointPath,\r\n            method: item.requestMethod,\r\n          };\r\n          const version = item.version ?? controllerVersion;\r\n          if (version && versioningConfig) {\r\n            if (typeof version !== 'string' && Array.isArray(version)) {\r\n              return version.map(v => ({\r\n                ...routeInfo,\r\n                version: toUndefinedIfNeural(v),\r\n              }));\r\n            }\r\n            routeInfo.version = toUndefinedIfNeural(version);\r\n          }\r\n\r\n          return routeInfo;\r\n        })\r\n        .flat() as RouteInfo[];\r\n\r\n    return []\r\n      .concat(routePath)\r\n      .map(routePath =>\r\n        controllerPaths\r\n          .map(item => toRouteInfo(item, routePath))\r\n          .reduce(concatPaths, []),\r\n      )\r\n      .reduce(concatPaths, []);\r\n  }\r\n\r\n  private isRouteInfo(\r\n    path: string | string[] | undefined,\r\n    objectOrClass: Function | RouteInfo,\r\n  ): objectOrClass is RouteInfo {\r\n    return isUndefined(path);\r\n  }\r\n\r\n  private normalizeGlobalPath(path: string): string {\r\n    const prefix = addLeadingSlash(path);\r\n    return prefix === '/' ? '' : prefix;\r\n  }\r\n\r\n  private getRoutePath(route: Type<any> | RouteInfo): string | undefined {\r\n    return Reflect.getMetadata(PATH_METADATA, route);\r\n  }\r\n\r\n  private getHostModuleOfController(\r\n    metatype: Type<unknown>,\r\n  ): Module | undefined {\r\n    if (!metatype) {\r\n      return;\r\n    }\r\n    const modulesContainer = this.container.getModules();\r\n    const moduleRefsSet = targetModulesByContainer.get(modulesContainer);\r\n    if (!moduleRefsSet) {\r\n      return;\r\n    }\r\n\r\n    const modules = Array.from(modulesContainer.values()).filter(moduleRef =>\r\n      moduleRefsSet.has(moduleRef),\r\n    );\r\n    return modules.find(({ controllers }) => controllers.has(metatype));\r\n  }\r\n\r\n  private getModulePath(\r\n    metatype: Type<unknown> | undefined,\r\n  ): string | undefined {\r\n    if (!metatype) {\r\n      return;\r\n    }\r\n    const modulesContainer = this.container.getModules();\r\n    const modulePath = Reflect.getMetadata(\r\n      MODULE_PATH + modulesContainer.applicationId,\r\n      metatype,\r\n    );\r\n    return modulePath ?? Reflect.getMetadata(MODULE_PATH, metatype);\r\n  }\r\n\r\n  private getVersionMetadata(\r\n    metatype: Type<unknown> | Function,\r\n  ): VersionValue | undefined {\r\n    const versioningConfig = this.applicationConfig.getVersioning();\r\n    if (versioningConfig) {\r\n      return (\r\n        Reflect.getMetadata(VERSION_METADATA, metatype) ??\r\n        versioningConfig.defaultVersion\r\n      );\r\n    }\r\n  }\r\n}\r\n"]}