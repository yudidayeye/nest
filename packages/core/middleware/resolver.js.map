{"version":3,"file":"resolver.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["middleware/resolver.ts"],"names":[],"mappings":";;;AAMA,MAAa,kBAAkB;IAC7B,YACmB,mBAAwC,EACxC,QAAkB;QADlB,wBAAmB,GAAnB,mBAAmB,CAAqB;QACxC,aAAQ,GAAR,QAAQ,CAAU;IAClC,CAAC;IAEG,KAAK,CAAC,gBAAgB,CAAC,SAAiB,EAAE,UAAkB;QACjE,MAAM,aAAa,GACjB,IAAI,CAAC,mBAAmB,CAAC,uBAAuB,CAAC,UAAU,CAAC,CAAC;QAC/D,MAAM,eAAe,GAAG,KAAK,EAAE,OAAwB,EAAE,EAAE,CACzD,IAAI,CAAC,yBAAyB,CAAC,OAAO,EAAE,aAAa,EAAE,SAAS,CAAC,CAAC;QACpE,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,CAAC;IACtE,CAAC;IAEO,KAAK,CAAC,yBAAyB,CACrC,OAAwB,EACxB,aAAmD,EACnD,SAAiB;QAEjB,MAAM,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,OAAO,EAAE,aAAa,EAAE,SAAS,CAAC,CAAC;IACxE,CAAC;CACF;AArBD,gDAqBC","sourcesContent":["import { InjectionToken } from '@nestjs/common';\r\nimport { Injector } from '../injector/injector';\r\nimport { InstanceWrapper } from '../injector/instance-wrapper';\r\nimport { Module } from '../injector/module';\r\nimport { MiddlewareContainer } from './container';\r\n\r\nexport class MiddlewareResolver {\r\n  constructor(\r\n    private readonly middlewareContainer: MiddlewareContainer,\r\n    private readonly injector: Injector,\r\n  ) {}\r\n\r\n  public async resolveInstances(moduleRef: Module, moduleName: string) {\r\n    const middlewareMap =\r\n      this.middlewareContainer.getMiddlewareCollection(moduleName);\r\n    const resolveInstance = async (wrapper: InstanceWrapper) =>\r\n      this.resolveMiddlewareInstance(wrapper, middlewareMap, moduleRef);\r\n    await Promise.all([...middlewareMap.values()].map(resolveInstance));\r\n  }\r\n\r\n  private async resolveMiddlewareInstance(\r\n    wrapper: InstanceWrapper,\r\n    middlewareMap: Map<InjectionToken, InstanceWrapper>,\r\n    moduleRef: Module,\r\n  ) {\r\n    await this.injector.loadMiddleware(wrapper, middlewareMap, moduleRef);\r\n  }\r\n}\r\n"]}