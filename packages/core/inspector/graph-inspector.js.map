{"version":3,"file":"graph-inspector.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["inspector/graph-inspector.ts"],"names":[],"mappings":"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","sourcesContent":["import { UnknownDependenciesException } from '../errors/exceptions/unknown-dependencies.exception';\r\nimport { NestContainer } from '../injector/container';\r\nimport { InstanceWrapper } from '../injector/instance-wrapper';\r\nimport { Module } from '../injector/module';\r\nimport { DeterministicUuidRegistry } from './deterministic-uuid-registry';\r\nimport { EnhancerMetadataCacheEntry } from './interfaces/enhancer-metadata-cache-entry.interface';\r\nimport { Entrypoint } from './interfaces/entrypoint.interface';\r\nimport { OrphanedEnhancerDefinition } from './interfaces/extras.interface';\r\nimport { ClassNode, Node } from './interfaces/node.interface';\r\nimport { PartialGraphHost } from './partial-graph.host';\r\nimport { SerializedGraph } from './serialized-graph';\r\n\r\nexport class GraphInspector {\r\n  private readonly graph: SerializedGraph;\r\n  private readonly enhancersMetadataCache =\r\n    new Array<EnhancerMetadataCacheEntry>();\r\n\r\n  constructor(private readonly container: NestContainer) {\r\n    this.graph = container.serializedGraph;\r\n  }\r\n\r\n  public inspectModules(\r\n    modules: Map<string, Module> = this.container.getModules(),\r\n  ) {\r\n    for (const moduleRef of modules.values()) {\r\n      this.insertModuleNode(moduleRef);\r\n      this.insertClassNodes(moduleRef);\r\n      this.insertModuleToModuleEdges(moduleRef);\r\n    }\r\n\r\n    this.enhancersMetadataCache.forEach(entry =>\r\n      this.insertEnhancerEdge(entry),\r\n    );\r\n\r\n    DeterministicUuidRegistry.clear();\r\n  }\r\n\r\n  public registerPartial(error: unknown) {\r\n    this.graph.status = 'partial';\r\n\r\n    if (error instanceof UnknownDependenciesException) {\r\n      this.graph.metadata = {\r\n        cause: {\r\n          type: 'unknown-dependencies',\r\n          context: error.context,\r\n          moduleId: error.moduleRef?.id,\r\n          nodeId: error.metadata?.id,\r\n        },\r\n      };\r\n    } else {\r\n      this.graph.metadata = {\r\n        cause: {\r\n          type: 'unknown',\r\n          error,\r\n        },\r\n      };\r\n    }\r\n    PartialGraphHost.register(this.graph);\r\n  }\r\n\r\n  public inspectInstanceWrapper<T = any>(\r\n    source: InstanceWrapper<T>,\r\n    moduleRef: Module,\r\n  ) {\r\n    const ctorMetadata = source.getCtorMetadata();\r\n    ctorMetadata?.forEach((target, index) =>\r\n      this.insertClassToClassEdge(\r\n        source,\r\n        target,\r\n        moduleRef,\r\n        index,\r\n        'constructor',\r\n      ),\r\n    );\r\n\r\n    const propertiesMetadata = source.getPropertiesMetadata();\r\n    propertiesMetadata?.forEach(({ key, wrapper: target }) =>\r\n      this.insertClassToClassEdge(source, target, moduleRef, key, 'property'),\r\n    );\r\n  }\r\n\r\n  public insertEnhancerMetadataCache(entry: EnhancerMetadataCacheEntry) {\r\n    this.enhancersMetadataCache.push(entry);\r\n  }\r\n\r\n  public insertOrphanedEnhancer(entry: OrphanedEnhancerDefinition) {\r\n    this.graph.insertOrphanedEnhancer({\r\n      ...entry,\r\n      ref: entry.ref?.constructor?.name ?? 'Object',\r\n    });\r\n  }\r\n\r\n  public insertAttachedEnhancer(wrapper: InstanceWrapper) {\r\n    const existingNode = this.graph.getNodeById(wrapper.id);\r\n    existingNode.metadata.global = true;\r\n\r\n    this.graph.insertAttachedEnhancer(existingNode.id);\r\n  }\r\n\r\n  public insertEntrypointDefinition<T>(\r\n    definition: Entrypoint<T>,\r\n    parentId: string,\r\n  ) {\r\n    definition = {\r\n      ...definition,\r\n      id: `${definition.classNodeId}_${definition.methodName}`,\r\n    };\r\n    this.graph.insertEntrypoint(definition, parentId);\r\n  }\r\n\r\n  public insertClassNode(\r\n    moduleRef: Module,\r\n    wrapper: InstanceWrapper,\r\n    type: Exclude<Node['metadata']['type'], 'module'>,\r\n  ) {\r\n    this.graph.insertNode({\r\n      id: wrapper.id,\r\n      label: wrapper.name,\r\n      parent: moduleRef.id,\r\n      metadata: {\r\n        type,\r\n        internal: wrapper.metatype === moduleRef.metatype,\r\n        sourceModuleName: moduleRef.name,\r\n        durable: wrapper.isDependencyTreeDurable(),\r\n        static: wrapper.isDependencyTreeStatic(),\r\n        scope: wrapper.scope,\r\n        transient: wrapper.isTransient,\r\n        exported: moduleRef.exports.has(wrapper.token),\r\n        token: wrapper.token,\r\n        subtype: wrapper.subtype,\r\n        initTime: wrapper.initTime,\r\n      },\r\n    });\r\n  }\r\n\r\n  private insertModuleNode(moduleRef: Module) {\r\n    const dynamicMetadata = this.container.getDynamicMetadataByToken(\r\n      moduleRef.token,\r\n    );\r\n    const node: Node = {\r\n      id: moduleRef.id,\r\n      label: moduleRef.name,\r\n      metadata: {\r\n        type: 'module',\r\n        global: moduleRef.isGlobal,\r\n        dynamic: !!dynamicMetadata,\r\n        internal: moduleRef.name === 'InternalCoreModule',\r\n      },\r\n    };\r\n    this.graph.insertNode(node);\r\n  }\r\n\r\n  private insertModuleToModuleEdges(moduleRef: Module) {\r\n    for (const targetModuleRef of moduleRef.imports) {\r\n      this.graph.insertEdge({\r\n        source: moduleRef.id,\r\n        target: targetModuleRef.id,\r\n        metadata: {\r\n          type: 'module-to-module',\r\n          sourceModuleName: moduleRef.name,\r\n          targetModuleName: targetModuleRef.name,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  private insertEnhancerEdge(entry: EnhancerMetadataCacheEntry) {\r\n    const moduleRef = this.container.getModuleByKey(entry.moduleToken);\r\n    const sourceInstanceWrapper =\r\n      moduleRef.controllers.get(entry.classRef) ??\r\n      moduleRef.providers.get(entry.classRef);\r\n    const existingSourceNode = this.graph.getNodeById(\r\n      sourceInstanceWrapper.id,\r\n    ) as ClassNode;\r\n    const enhancers = existingSourceNode.metadata.enhancers ?? [];\r\n\r\n    if (entry.enhancerInstanceWrapper) {\r\n      this.insertClassToClassEdge(\r\n        sourceInstanceWrapper,\r\n        entry.enhancerInstanceWrapper,\r\n        moduleRef,\r\n        undefined,\r\n        'decorator',\r\n      );\r\n\r\n      enhancers.push({\r\n        id: entry.enhancerInstanceWrapper.id,\r\n        methodKey: entry.methodKey,\r\n        subtype: entry.subtype,\r\n      });\r\n    } else {\r\n      const name =\r\n        entry.enhancerRef.constructor?.name ??\r\n        (entry.enhancerRef as Function).name;\r\n\r\n      enhancers.push({\r\n        name,\r\n        methodKey: entry.methodKey,\r\n        subtype: entry.subtype,\r\n      });\r\n    }\r\n    existingSourceNode.metadata.enhancers = enhancers;\r\n  }\r\n\r\n  private insertClassToClassEdge<T>(\r\n    source: InstanceWrapper<T>,\r\n    target: InstanceWrapper,\r\n    moduleRef: Module,\r\n    keyOrIndex: number | string | symbol | undefined,\r\n    injectionType: 'constructor' | 'property' | 'decorator',\r\n  ) {\r\n    this.graph.insertEdge({\r\n      source: source.id,\r\n      target: target.id,\r\n      metadata: {\r\n        type: 'class-to-class',\r\n        sourceModuleName: moduleRef.name,\r\n        sourceClassName: source.name,\r\n        targetClassName: target.name,\r\n        sourceClassToken: source.token,\r\n        targetClassToken: target.token,\r\n        targetModuleName: target.host?.name,\r\n        keyOrIndex,\r\n        injectionType,\r\n      },\r\n    });\r\n  }\r\n\r\n  private insertClassNodes(moduleRef: Module) {\r\n    moduleRef.providers.forEach(value =>\r\n      this.insertClassNode(moduleRef, value, 'provider'),\r\n    );\r\n    moduleRef.injectables.forEach(value =>\r\n      this.insertClassNode(moduleRef, value, 'injectable'),\r\n    );\r\n    moduleRef.controllers.forEach(value =>\r\n      this.insertClassNode(moduleRef, value, 'controller'),\r\n    );\r\n  }\r\n}\r\n"]}