{"version":3,"file":"serialized-graph.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["inspector/serialized-graph.ts"],"names":[],"mappings":"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","sourcesContent":["import { InjectionToken } from '@nestjs/common';\r\nimport { ApplicationConfig } from '../application-config';\r\nimport { ExternalContextCreator } from '../helpers/external-context-creator';\r\nimport { HttpAdapterHost } from '../helpers/http-adapter-host';\r\nimport { INQUIRER } from '../injector/inquirer/inquirer-constants';\r\nimport { LazyModuleLoader } from '../injector/lazy-module-loader/lazy-module-loader';\r\nimport { ModuleRef } from '../injector/module-ref';\r\nimport { ModulesContainer } from '../injector/modules-container';\r\nimport { REQUEST } from '../router/request/request-constants';\r\nimport { Reflector } from '../services/reflector.service';\r\nimport { DeterministicUuidRegistry } from './deterministic-uuid-registry';\r\nimport { Edge } from './interfaces/edge.interface';\r\nimport { Entrypoint } from './interfaces/entrypoint.interface';\r\nimport {\r\n  Extras,\r\n  OrphanedEnhancerDefinition,\r\n} from './interfaces/extras.interface';\r\nimport { Node } from './interfaces/node.interface';\r\nimport { SerializedGraphJson } from './interfaces/serialized-graph-json.interface';\r\nimport { SerializedGraphMetadata } from './interfaces/serialized-graph-metadata.interface';\r\n\r\nexport type SerializedGraphStatus = 'partial' | 'complete';\r\ntype WithOptionalId<T extends Record<'id', string>> = Omit<T, 'id'> &\r\n  Partial<Pick<T, 'id'>>;\r\n\r\nexport class SerializedGraph {\r\n  private readonly nodes = new Map<string, Node>();\r\n  private readonly edges = new Map<string, Edge>();\r\n  private readonly entrypoints = new Map<string, Entrypoint<unknown>[]>();\r\n  private readonly extras: Extras = {\r\n    orphanedEnhancers: [],\r\n    attachedEnhancers: [],\r\n  };\r\n  private _status: SerializedGraphStatus = 'complete';\r\n  private _metadata?: SerializedGraphMetadata;\r\n\r\n  private static readonly INTERNAL_PROVIDERS: Array<InjectionToken> = [\r\n    ApplicationConfig,\r\n    ModuleRef,\r\n    HttpAdapterHost,\r\n    LazyModuleLoader,\r\n    ExternalContextCreator,\r\n    ModulesContainer,\r\n    Reflector,\r\n    SerializedGraph,\r\n    HttpAdapterHost.name,\r\n    Reflector.name,\r\n    REQUEST,\r\n    INQUIRER,\r\n  ];\r\n\r\n  set status(status: SerializedGraphStatus) {\r\n    this._status = status;\r\n  }\r\n\r\n  set metadata(metadata: SerializedGraphMetadata) {\r\n    this._metadata = metadata;\r\n  }\r\n\r\n  public insertNode(nodeDefinition: Node) {\r\n    if (\r\n      nodeDefinition.metadata.type === 'provider' &&\r\n      SerializedGraph.INTERNAL_PROVIDERS.includes(nodeDefinition.metadata.token)\r\n    ) {\r\n      nodeDefinition.metadata = {\r\n        ...nodeDefinition.metadata,\r\n        internal: true,\r\n      };\r\n    }\r\n    if (this.nodes.has(nodeDefinition.id)) {\r\n      return this.nodes.get(nodeDefinition.id);\r\n    }\r\n    this.nodes.set(nodeDefinition.id, nodeDefinition);\r\n    return nodeDefinition;\r\n  }\r\n\r\n  public insertEdge(edgeDefinition: WithOptionalId<Edge>) {\r\n    if (\r\n      edgeDefinition.metadata.type === 'class-to-class' &&\r\n      (SerializedGraph.INTERNAL_PROVIDERS.includes(\r\n        edgeDefinition.metadata.sourceClassToken,\r\n      ) ||\r\n        SerializedGraph.INTERNAL_PROVIDERS.includes(\r\n          edgeDefinition.metadata.targetClassToken,\r\n        ))\r\n    ) {\r\n      edgeDefinition.metadata = {\r\n        ...edgeDefinition.metadata,\r\n        internal: true,\r\n      };\r\n    }\r\n    const id =\r\n      edgeDefinition.id ?? this.generateUuidByEdgeDefinition(edgeDefinition);\r\n    const edge = {\r\n      ...edgeDefinition,\r\n      id,\r\n    };\r\n    this.edges.set(id, edge);\r\n    return edge;\r\n  }\r\n\r\n  public insertEntrypoint<T>(definition: Entrypoint<T>, parentId: string) {\r\n    if (this.entrypoints.has(parentId)) {\r\n      const existingCollection = this.entrypoints.get(parentId);\r\n      existingCollection.push(definition);\r\n    } else {\r\n      this.entrypoints.set(parentId, [definition]);\r\n    }\r\n  }\r\n\r\n  public insertOrphanedEnhancer(entry: OrphanedEnhancerDefinition) {\r\n    this.extras.orphanedEnhancers.push(entry);\r\n  }\r\n\r\n  public insertAttachedEnhancer(nodeId: string) {\r\n    this.extras.attachedEnhancers.push({\r\n      nodeId,\r\n    });\r\n  }\r\n\r\n  public getNodeById(id: string) {\r\n    return this.nodes.get(id);\r\n  }\r\n\r\n  public toJSON(): SerializedGraphJson {\r\n    const json: SerializedGraphJson = {\r\n      nodes: Object.fromEntries(this.nodes),\r\n      edges: Object.fromEntries(this.edges),\r\n      entrypoints: Object.fromEntries(this.entrypoints),\r\n      extras: this.extras,\r\n    };\r\n\r\n    if (this._status) {\r\n      json['status'] = this._status;\r\n    }\r\n    if (this._metadata) {\r\n      json['metadata'] = this._metadata;\r\n    }\r\n    return json;\r\n  }\r\n\r\n  public toString() {\r\n    const replacer = (key: string, value: unknown) => {\r\n      if (typeof value === 'symbol') {\r\n        return value.toString();\r\n      }\r\n      return typeof value === 'function' ? value.name ?? 'Function' : value;\r\n    };\r\n    return JSON.stringify(this.toJSON(), replacer, 2);\r\n  }\r\n\r\n  private generateUuidByEdgeDefinition(\r\n    edgeDefinition: WithOptionalId<Edge>,\r\n  ): string {\r\n    return DeterministicUuidRegistry.get(JSON.stringify(edgeDefinition));\r\n  }\r\n}\r\n"]}