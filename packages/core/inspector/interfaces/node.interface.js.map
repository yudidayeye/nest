{"version":3,"file":"node.interface.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["inspector/interfaces/node.interface.ts"],"names":[],"mappings":"","sourcesContent":["import { InjectionToken, Scope } from '@nestjs/common';\r\nimport { EnhancerSubtype } from '@nestjs/common/constants';\r\n\r\nexport type ModuleNode = {\r\n  metadata: {\r\n    type: 'module';\r\n    global: boolean;\r\n    dynamic: boolean;\r\n    internal: boolean;\r\n  };\r\n};\r\n\r\nexport type ClassNode = {\r\n  parent: string;\r\n  metadata: {\r\n    type: 'provider' | 'controller' | 'middleware' | 'injectable';\r\n    subtype?: EnhancerSubtype;\r\n    sourceModuleName: string;\r\n    durable: boolean;\r\n    static: boolean;\r\n    transient: boolean;\r\n    exported: boolean;\r\n    scope: Scope;\r\n    token: InjectionToken;\r\n    initTime: number;\r\n    /**\r\n     * Enhancers metadata collection\r\n     */\r\n    enhancers?: Array<\r\n      | { id: string; subtype: EnhancerSubtype }\r\n      | { name: string; methodKey?: string; subtype: EnhancerSubtype }\r\n    >;\r\n    /**\r\n     * If true, node is a globally registered enhancer\r\n     */\r\n    global?: boolean;\r\n    /**\r\n     * If true, indicates that this node represents an internal provider\r\n     */\r\n    internal?: boolean;\r\n  };\r\n};\r\n\r\nexport type Node = {\r\n  id: string;\r\n  label: string;\r\n} & (ClassNode | ModuleNode);\r\n"]}