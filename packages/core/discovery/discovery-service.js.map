{"version":3,"file":"discovery-service.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["discovery/discovery-service.ts"],"names":[],"mappings":";;;;AAAA,2CAAqD;AAGrD,qEAAiE;AASjE;;GAEG;AAEI,IAAM,gBAAgB,8BAAtB,MAAM,gBAAgB;IAC3B,YAA6B,gBAAkC;QAAlC,qBAAgB,GAAhB,gBAAgB,CAAkB;IAAG,CAAC;IAEnE,YAAY,CACV,UAA4B,EAAE,EAC9B,UAAoB,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;QAE5C,MAAM,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACpE,OAAO,IAAA,gBAAO,EAAC,SAAS,CAAC,CAAC;IAC5B,CAAC;IAED,cAAc,CACZ,UAA4B,EAAE,EAC9B,UAAoB,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;QAE5C,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACxE,OAAO,IAAA,gBAAO,EAAC,WAAW,CAAC,CAAC;IAC9B,CAAC;IAES,UAAU,CAAC,UAA4B,EAAE;QACjD,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;YACpB,MAAM,UAAU,GAAG,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,CAAC;YACvD,OAAO,UAAU,CAAC;SACnB;QACD,MAAM,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC7D,OAAO,WAAW,CAAC;IACrB,CAAC;IAEO,kBAAkB,CAAC,OAAmB;QAC5C,MAAM,UAAU,GAAG,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,CAAC;QACvD,OAAO,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE,CACxC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,KAAK,QAAQ,CAAC,CACxC,CAAC;IACJ,CAAC;CACF,CAAA;2BAlCY,gBAAgB;IAD5B,IAAA,mBAAU,GAAE;6CAEoC,oCAAgB;GADpD,gBAAgB,CAkC5B","sourcesContent":["import { flatten, Injectable } from '@nestjs/common';\r\nimport { InstanceWrapper } from '../injector/instance-wrapper';\r\nimport { Module } from '../injector/module';\r\nimport { ModulesContainer } from '../injector/modules-container';\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport interface DiscoveryOptions {\r\n  include?: Function[];\r\n}\r\n\r\n/**\r\n * @publicApi\r\n */\r\n@Injectable()\r\nexport class DiscoveryService {\r\n  constructor(private readonly modulesContainer: ModulesContainer) {}\r\n\r\n  getProviders(\r\n    options: DiscoveryOptions = {},\r\n    modules: Module[] = this.getModules(options),\r\n  ): InstanceWrapper[] {\r\n    const providers = modules.map(item => [...item.providers.values()]);\r\n    return flatten(providers);\r\n  }\r\n\r\n  getControllers(\r\n    options: DiscoveryOptions = {},\r\n    modules: Module[] = this.getModules(options),\r\n  ): InstanceWrapper[] {\r\n    const controllers = modules.map(item => [...item.controllers.values()]);\r\n    return flatten(controllers);\r\n  }\r\n\r\n  protected getModules(options: DiscoveryOptions = {}): Module[] {\r\n    if (!options.include) {\r\n      const moduleRefs = [...this.modulesContainer.values()];\r\n      return moduleRefs;\r\n    }\r\n    const whitelisted = this.includeWhitelisted(options.include);\r\n    return whitelisted;\r\n  }\r\n\r\n  private includeWhitelisted(include: Function[]): Module[] {\r\n    const moduleRefs = [...this.modulesContainer.values()];\r\n    return moduleRefs.filter(({ metatype }) =>\r\n      include.some(item => item === metatype),\r\n    );\r\n  }\r\n}\r\n"]}