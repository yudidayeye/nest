{"version":3,"file":"router-explorer.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["router/router-explorer.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpServer } from '@nestjs/common';\r\nimport { PATH_METADATA } from '@nestjs/common/constants';\r\nimport { RequestMethod, VersioningType } from '@nestjs/common/enums';\r\nimport { InternalServerErrorException } from '@nestjs/common/exceptions';\r\nimport { Controller } from '@nestjs/common/interfaces/controllers/controller.interface';\r\nimport { Type } from '@nestjs/common/interfaces/type.interface';\r\nimport { VersionValue } from '@nestjs/common/interfaces/version-options.interface';\r\nimport { Logger } from '@nestjs/common/services/logger.service';\r\nimport {\r\n  addLeadingSlash,\r\n  isUndefined,\r\n} from '@nestjs/common/utils/shared.utils';\r\nimport * as pathToRegexp from 'path-to-regexp';\r\nimport { ApplicationConfig } from '../application-config';\r\nimport { UnknownRequestMappingException } from '../errors/exceptions/unknown-request-mapping.exception';\r\nimport { GuardsConsumer, GuardsContextCreator } from '../guards';\r\nimport { ContextIdFactory } from '../helpers/context-id-factory';\r\nimport { ExecutionContextHost } from '../helpers/execution-context-host';\r\nimport {\r\n  ROUTE_MAPPED_MESSAGE,\r\n  VERSIONED_ROUTE_MAPPED_MESSAGE,\r\n} from '../helpers/messages';\r\nimport { RouterMethodFactory } from '../helpers/router-method-factory';\r\nimport { STATIC_CONTEXT } from '../injector/constants';\r\nimport { NestContainer } from '../injector/container';\r\nimport { Injector } from '../injector/injector';\r\nimport { ContextId, InstanceWrapper } from '../injector/instance-wrapper';\r\nimport { Module } from '../injector/module';\r\nimport {\r\n  InterceptorsConsumer,\r\n  InterceptorsContextCreator,\r\n} from '../interceptors';\r\nimport { GraphInspector } from '../inspector/graph-inspector';\r\nimport {\r\n  Entrypoint,\r\n  HttpEntrypointMetadata,\r\n} from '../inspector/interfaces/entrypoint.interface';\r\nimport { MetadataScanner } from '../metadata-scanner';\r\nimport { PipesConsumer, PipesContextCreator } from '../pipes';\r\nimport { ExceptionsFilter } from './interfaces/exceptions-filter.interface';\r\nimport { RoutePathMetadata } from './interfaces/route-path-metadata.interface';\r\nimport { PathsExplorer } from './paths-explorer';\r\nimport { REQUEST_CONTEXT_ID } from './request/request-constants';\r\nimport { RouteParamsFactory } from './route-params-factory';\r\nimport { RoutePathFactory } from './route-path-factory';\r\nimport { RouterExecutionContext } from './router-execution-context';\r\nimport { RouterProxy, RouterProxyCallback } from './router-proxy';\r\n\r\nexport interface RouteDefinition {\r\n  path: string[];\r\n  requestMethod: RequestMethod;\r\n  targetCallback: RouterProxyCallback;\r\n  methodName: string;\r\n  version?: VersionValue;\r\n}\r\n\r\nexport class RouterExplorer {\r\n  private readonly executionContextCreator: RouterExecutionContext;\r\n  private readonly pathsExplorer: PathsExplorer;\r\n  private readonly routerMethodFactory = new RouterMethodFactory();\r\n  private readonly logger = new Logger(RouterExplorer.name, {\r\n    timestamp: true,\r\n  });\r\n  private readonly exceptionFiltersCache = new WeakMap();\r\n\r\n  constructor(\r\n    metadataScanner: MetadataScanner,\r\n    private readonly container: NestContainer,\r\n    private readonly injector: Injector,\r\n    private readonly routerProxy: RouterProxy,\r\n    private readonly exceptionsFilter: ExceptionsFilter,\r\n    config: ApplicationConfig,\r\n    private readonly routePathFactory: RoutePathFactory,\r\n    private readonly graphInspector: GraphInspector,\r\n  ) {\r\n    this.pathsExplorer = new PathsExplorer(metadataScanner);\r\n\r\n    const routeParamsFactory = new RouteParamsFactory();\r\n    const pipesContextCreator = new PipesContextCreator(container, config);\r\n    const pipesConsumer = new PipesConsumer();\r\n    const guardsContextCreator = new GuardsContextCreator(container, config);\r\n    const guardsConsumer = new GuardsConsumer();\r\n    const interceptorsContextCreator = new InterceptorsContextCreator(\r\n      container,\r\n      config,\r\n    );\r\n    const interceptorsConsumer = new InterceptorsConsumer();\r\n\r\n    this.executionContextCreator = new RouterExecutionContext(\r\n      routeParamsFactory,\r\n      pipesContextCreator,\r\n      pipesConsumer,\r\n      guardsContextCreator,\r\n      guardsConsumer,\r\n      interceptorsContextCreator,\r\n      interceptorsConsumer,\r\n      container.getHttpAdapterRef(),\r\n    );\r\n  }\r\n\r\n  public explore<T extends HttpServer = any>(\r\n    instanceWrapper: InstanceWrapper,\r\n    moduleKey: string,\r\n    applicationRef: T,\r\n    host: string | RegExp | Array<string | RegExp>,\r\n    routePathMetadata: RoutePathMetadata,\r\n  ) {\r\n    const { instance } = instanceWrapper;\r\n    const routerPaths = this.pathsExplorer.scanForPaths(instance);\r\n    this.applyPathsToRouterProxy(\r\n      applicationRef,\r\n      routerPaths,\r\n      instanceWrapper,\r\n      moduleKey,\r\n      routePathMetadata,\r\n      host,\r\n    );\r\n  }\r\n\r\n  public extractRouterPath(metatype: Type<Controller>): string[] {\r\n    const path = Reflect.getMetadata(PATH_METADATA, metatype);\r\n\r\n    if (isUndefined(path)) {\r\n      throw new UnknownRequestMappingException(metatype);\r\n    }\r\n    if (Array.isArray(path)) {\r\n      return path.map(p => addLeadingSlash(p));\r\n    }\r\n    return [addLeadingSlash(path)];\r\n  }\r\n\r\n  public applyPathsToRouterProxy<T extends HttpServer>(\r\n    router: T,\r\n    routeDefinitions: RouteDefinition[],\r\n    instanceWrapper: InstanceWrapper,\r\n    moduleKey: string,\r\n    routePathMetadata: RoutePathMetadata,\r\n    host: string | RegExp | Array<string | RegExp>,\r\n  ) {\r\n    (routeDefinitions || []).forEach(routeDefinition => {\r\n      const { version: methodVersion } = routeDefinition;\r\n      routePathMetadata.methodVersion = methodVersion;\r\n\r\n      this.applyCallbackToRouter(\r\n        router,\r\n        routeDefinition,\r\n        instanceWrapper,\r\n        moduleKey,\r\n        routePathMetadata,\r\n        host,\r\n      );\r\n    });\r\n  }\r\n\r\n  private applyCallbackToRouter<T extends HttpServer>(\r\n    router: T,\r\n    routeDefinition: RouteDefinition,\r\n    instanceWrapper: InstanceWrapper,\r\n    moduleKey: string,\r\n    routePathMetadata: RoutePathMetadata,\r\n    host: string | RegExp | Array<string | RegExp>,\r\n  ) {\r\n    const {\r\n      path: paths,\r\n      requestMethod,\r\n      targetCallback,\r\n      methodName,\r\n    } = routeDefinition;\r\n\r\n    const { instance } = instanceWrapper;\r\n    const routerMethodRef = this.routerMethodFactory\r\n      .get(router, requestMethod)\r\n      .bind(router);\r\n\r\n    const isRequestScoped = !instanceWrapper.isDependencyTreeStatic();\r\n    const proxy = isRequestScoped\r\n      ? this.createRequestScopedHandler(\r\n          instanceWrapper,\r\n          requestMethod,\r\n          this.container.getModuleByKey(moduleKey),\r\n          moduleKey,\r\n          methodName,\r\n        )\r\n      : this.createCallbackProxy(\r\n          instance,\r\n          targetCallback,\r\n          methodName,\r\n          moduleKey,\r\n          requestMethod,\r\n        );\r\n\r\n    const isVersioned =\r\n      (routePathMetadata.methodVersion ||\r\n        routePathMetadata.controllerVersion) &&\r\n      routePathMetadata.versioningOptions;\r\n    let routeHandler = this.applyHostFilter(host, proxy);\r\n\r\n    paths.forEach(path => {\r\n      if (\r\n        isVersioned &&\r\n        routePathMetadata.versioningOptions.type !== VersioningType.URI\r\n      ) {\r\n        // All versioning (except for URI Versioning) is done via the \"Version Filter\"\r\n        routeHandler = this.applyVersionFilter(\r\n          router,\r\n          routePathMetadata,\r\n          routeHandler,\r\n        );\r\n      }\r\n\r\n      routePathMetadata.methodPath = path;\r\n      const pathsToRegister = this.routePathFactory.create(\r\n        routePathMetadata,\r\n        requestMethod,\r\n      );\r\n      pathsToRegister.forEach(path => {\r\n        const entrypointDefinition: Entrypoint<HttpEntrypointMetadata> = {\r\n          type: 'http-endpoint',\r\n          methodName,\r\n          className: instanceWrapper.name,\r\n          classNodeId: instanceWrapper.id,\r\n          metadata: {\r\n            key: path,\r\n            path,\r\n            requestMethod: RequestMethod[\r\n              requestMethod\r\n            ] as keyof typeof RequestMethod,\r\n            methodVersion: routePathMetadata.methodVersion as VersionValue,\r\n            controllerVersion:\r\n              routePathMetadata.controllerVersion as VersionValue,\r\n          },\r\n        };\r\n\r\n        routerMethodRef(path, routeHandler);\r\n\r\n        this.graphInspector.insertEntrypointDefinition<HttpEntrypointMetadata>(\r\n          entrypointDefinition,\r\n          instanceWrapper.id,\r\n        );\r\n      });\r\n\r\n      const pathsToLog = this.routePathFactory.create(\r\n        {\r\n          ...routePathMetadata,\r\n          versioningOptions: undefined,\r\n        },\r\n        requestMethod,\r\n      );\r\n      pathsToLog.forEach(path => {\r\n        if (isVersioned) {\r\n          const version = this.routePathFactory.getVersion(routePathMetadata);\r\n          this.logger.log(\r\n            VERSIONED_ROUTE_MAPPED_MESSAGE(path, requestMethod, version),\r\n          );\r\n        } else {\r\n          this.logger.log(ROUTE_MAPPED_MESSAGE(path, requestMethod));\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  private applyHostFilter(\r\n    host: string | RegExp | Array<string | RegExp>,\r\n    handler: Function,\r\n  ) {\r\n    if (!host) {\r\n      return handler;\r\n    }\r\n\r\n    const httpAdapterRef = this.container.getHttpAdapterRef();\r\n    const hosts = Array.isArray(host) ? host : [host];\r\n    const hostRegExps = hosts.map((host: string | RegExp) => {\r\n      const keys = [];\r\n      const regexp = pathToRegexp(host, keys);\r\n      return { regexp, keys };\r\n    });\r\n\r\n    const unsupportedFilteringErrorMessage = Array.isArray(host)\r\n      ? `HTTP adapter does not support filtering on hosts: [\"${host.join(\r\n          '\", \"',\r\n        )}\"]`\r\n      : `HTTP adapter does not support filtering on host: \"${host}\"`;\r\n\r\n    return <TRequest extends Record<string, any> = any, TResponse = any>(\r\n      req: TRequest,\r\n      res: TResponse,\r\n      next: () => void,\r\n    ) => {\r\n      (req as Record<string, any>).hosts = {};\r\n      const hostname = httpAdapterRef.getRequestHostname(req) || '';\r\n\r\n      for (const exp of hostRegExps) {\r\n        const match = hostname.match(exp.regexp);\r\n        if (match) {\r\n          if (exp.keys.length > 0) {\r\n            exp.keys.forEach((key, i) => (req.hosts[key.name] = match[i + 1]));\r\n          } else if (exp.regexp && match.groups) {\r\n            for (const groupName in match.groups) {\r\n              req.hosts[groupName] = match.groups[groupName];\r\n            }\r\n          }\r\n          return handler(req, res, next);\r\n        }\r\n      }\r\n      if (!next) {\r\n        throw new InternalServerErrorException(\r\n          unsupportedFilteringErrorMessage,\r\n        );\r\n      }\r\n      return next();\r\n    };\r\n  }\r\n\r\n  private applyVersionFilter<T extends HttpServer>(\r\n    router: T,\r\n    routePathMetadata: RoutePathMetadata,\r\n    handler: Function,\r\n  ) {\r\n    const version = this.routePathFactory.getVersion(routePathMetadata);\r\n    return router.applyVersionFilter(\r\n      handler,\r\n      version,\r\n      routePathMetadata.versioningOptions,\r\n    );\r\n  }\r\n\r\n  private createCallbackProxy(\r\n    instance: Controller,\r\n    callback: RouterProxyCallback,\r\n    methodName: string,\r\n    moduleRef: string,\r\n    requestMethod: RequestMethod,\r\n    contextId = STATIC_CONTEXT,\r\n    inquirerId?: string,\r\n  ) {\r\n    const executionContext = this.executionContextCreator.create(\r\n      instance,\r\n      callback,\r\n      methodName,\r\n      moduleRef,\r\n      requestMethod,\r\n      contextId,\r\n      inquirerId,\r\n    );\r\n    const exceptionFilter = this.exceptionsFilter.create(\r\n      instance,\r\n      callback,\r\n      moduleRef,\r\n      contextId,\r\n      inquirerId,\r\n    );\r\n    return this.routerProxy.createProxy(executionContext, exceptionFilter);\r\n  }\r\n\r\n  public createRequestScopedHandler(\r\n    instanceWrapper: InstanceWrapper,\r\n    requestMethod: RequestMethod,\r\n    moduleRef: Module,\r\n    moduleKey: string,\r\n    methodName: string,\r\n  ) {\r\n    const { instance } = instanceWrapper;\r\n    const collection = moduleRef.controllers;\r\n\r\n    const isTreeDurable = instanceWrapper.isDependencyTreeDurable();\r\n\r\n    return async <TRequest extends Record<any, any>, TResponse>(\r\n      req: TRequest,\r\n      res: TResponse,\r\n      next: () => void,\r\n    ) => {\r\n      try {\r\n        const contextId = this.getContextId(req, isTreeDurable);\r\n        const contextInstance = await this.injector.loadPerContext(\r\n          instance,\r\n          moduleRef,\r\n          collection,\r\n          contextId,\r\n        );\r\n        await this.createCallbackProxy(\r\n          contextInstance,\r\n          contextInstance[methodName],\r\n          methodName,\r\n          moduleKey,\r\n          requestMethod,\r\n          contextId,\r\n          instanceWrapper.id,\r\n        )(req, res, next);\r\n      } catch (err) {\r\n        let exceptionFilter = this.exceptionFiltersCache.get(\r\n          instance[methodName],\r\n        );\r\n        if (!exceptionFilter) {\r\n          exceptionFilter = this.exceptionsFilter.create(\r\n            instance,\r\n            instance[methodName],\r\n            moduleKey,\r\n          );\r\n          this.exceptionFiltersCache.set(instance[methodName], exceptionFilter);\r\n        }\r\n        const host = new ExecutionContextHost([req, res, next]);\r\n        exceptionFilter.next(err, host);\r\n      }\r\n    };\r\n  }\r\n\r\n  private getContextId<T extends Record<any, unknown> = any>(\r\n    request: T,\r\n    isTreeDurable: boolean,\r\n  ): ContextId {\r\n    const contextId = ContextIdFactory.getByRequest(request);\r\n    if (!request[REQUEST_CONTEXT_ID as any]) {\r\n      Object.defineProperty(request, REQUEST_CONTEXT_ID, {\r\n        value: contextId,\r\n        enumerable: false,\r\n        writable: false,\r\n        configurable: false,\r\n      });\r\n\r\n      const requestProviderValue = isTreeDurable ? contextId.payload : request;\r\n      this.container.registerRequestProvider(requestProviderValue, contextId);\r\n    }\r\n    return contextId;\r\n  }\r\n}\r\n"]}