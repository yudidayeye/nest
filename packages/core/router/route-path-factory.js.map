{"version":3,"file":"route-path-factory.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["router/route-path-factory.ts"],"names":[],"mappings":";;;AAAA,2CAMwB;AAExB,oEAI2C;AAG3C,mCAA0C;AAE1C,MAAa,gBAAgB;IAC3B,YAA6B,iBAAoC;QAApC,sBAAiB,GAAjB,iBAAiB,CAAmB;IAAG,CAAC;IAE9D,MAAM,CACX,QAA2B,EAC3B,aAA6B;QAE7B,IAAI,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC;QAEjB,MAAM,iBAAiB,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QACpD,IACE,iBAAiB;YACjB,QAAQ,CAAC,iBAAiB,EAAE,IAAI,KAAK,uBAAc,CAAC,GAAG,EACvD;YACA,MAAM,aAAa,GAAG,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC;YAExE,IAAI,KAAK,CAAC,OAAO,CAAC,iBAAiB,CAAC,EAAE;gBACpC,KAAK,GAAG,IAAA,gBAAO,EACb,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CACf,iBAAiB,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;gBAC9B,kDAAkD;gBAClD,OAAO,KAAK,wBAAe;oBACzB,CAAC,CAAC,IAAI;oBACN,CAAC,CAAC,GAAG,IAAI,IAAI,aAAa,GAAG,OAAO,EAAE,CACzC,CACF,CACF,CAAC;aACH;iBAAM;gBACL,kDAAkD;gBAClD,IAAI,iBAAiB,KAAK,wBAAe,EAAE;oBACzC,KAAK,GAAG,KAAK,CAAC,GAAG,CACf,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,IAAI,aAAa,GAAG,iBAAiB,EAAE,CACvD,CAAC;iBACH;aACF;SACF;QAED,KAAK,GAAG,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,QAAQ,CAAC,UAAU,CAAC,CAAC;QAC9D,KAAK,GAAG,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAC5D,KAAK,GAAG,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,QAAQ,CAAC,UAAU,CAAC,CAAC;QAE9D,IAAI,QAAQ,CAAC,YAAY,EAAE;YACzB,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;gBACvB,IACE,IAAI,CAAC,0BAA0B,CAC7B,IAAI,EACJ,aAAa,EACb,iBAAiB,EACjB,QAAQ,CAAC,iBAAiB,CAC3B,EACD;oBACA,OAAO,IAAI,CAAC;iBACb;gBACD,OAAO,IAAA,4BAAa,EAAC,QAAQ,CAAC,YAAY,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC;YAC3D,CAAC,CAAC,CAAC;SACJ;QAED,OAAO,KAAK;aACT,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAA,8BAAe,EAAC,IAAI,IAAI,GAAG,CAAC,CAAC;aACzC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC,IAAA,4BAAa,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9D,CAAC;IAEM,UAAU,CAAC,QAA2B;QAC3C,yEAAyE;QACzE,wCAAwC;QACxC,OAAO,QAAQ,CAAC,aAAa,IAAI,QAAQ,CAAC,iBAAiB,CAAC;IAC9D,CAAC;IAEM,gBAAgB,CAAC,iBAAoC;QAC1D,MAAM,aAAa,GAAG,GAAG,CAAC;QAC1B,IAAI,iBAAiB,CAAC,IAAI,KAAK,uBAAc,CAAC,GAAG,EAAE;YACjD,IAAI,iBAAiB,CAAC,MAAM,KAAK,KAAK,EAAE;gBACtC,OAAO,EAAE,CAAC;aACX;iBAAM,IAAI,iBAAiB,CAAC,MAAM,KAAK,SAAS,EAAE;gBACjD,OAAO,iBAAiB,CAAC,MAAM,CAAC;aACjC;SACF;QACD,OAAO,aAAa,CAAC;IACvB,CAAC;IAEM,oBAAoB,CACzB,KAAe,EACf,gBAA+C;QAE/C,IAAI,CAAC,gBAAgB,EAAE;YACrB,OAAO,KAAK,CAAC;SACd;QACD,MAAM,WAAW,GAAG,CAAC,CAAS,EAAE,CAAS,EAAE,EAAE,CAC3C,IAAA,4BAAa,EAAC,CAAC,CAAC,GAAG,IAAA,8BAAe,EAAC,CAAC,CAAC,CAAC;QAExC,IAAI,KAAK,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAE;YACnC,MAAM,YAAY,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CACpC,gBAAgB,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,WAAW,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAC9D,CAAC;YACF,OAAO,IAAA,gBAAO,EAAC,YAAY,CAAC,CAAC;SAC9B;QACD,OAAO,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,WAAW,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC,CAAC;IAChE,CAAC;IAEM,0BAA0B,CAC/B,IAAY,EACZ,aAA6B,EAC7B,iBAAgC,EAChC,iBAAqC;QAErC,IAAI,IAAA,0BAAW,EAAC,aAAa,CAAC,EAAE;YAC9B,OAAO,KAAK,CAAC;SACd;QACD,MAAM,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC,sBAAsB,EAAE,CAAC;QAChE,MAAM,cAAc,GAAG,OAAO,CAAC,OAAO,CAAC;QAEvC,IACE,iBAAiB;YACjB,iBAAiB,KAAK,wBAAe;YACrC,iBAAiB,EAAE,IAAI,KAAK,uBAAc,CAAC,GAAG,EAC9C;YACA,IAAI,GAAG,IAAI,CAAC,6BAA6B,CACvC,IAAI,EACJ,iBAAiB,EACjB,iBAAiB,CAClB,CAAC;SACH;QACD,OAAO,CACL,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC;YAC7B,IAAA,uBAAe,EAAC,cAAc,EAAE,IAAI,EAAE,aAAa,CAAC,CACrD,CAAC;IACJ,CAAC;IAEO,6BAA6B,CACnC,IAAY,EACZ,YAA2D,EAC3D,iBAAoC;QAEpC,IAAI,OAAO,YAAY,KAAK,QAAQ,EAAE;YACpC,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;gBAC7B,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;oBAC/B,IAAI,GAAG,IAAI,CAAC,6BAA6B,CACvC,IAAI,EACJ,OAAO,EACP,iBAAiB,CAClB,CAAC;iBACH;YACH,CAAC,CAAC,CAAC;YACH,OAAO,IAAI,CAAC;SACb;QAED,MAAM,MAAM,GAAG,IAAI,IAAI,CAAC,gBAAgB,CACtC,iBAAiB,CAClB,GAAG,YAAY,EAAE,CAAC;QAEnB,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IACnE,CAAC;CACF;AAxJD,4CAwJC","sourcesContent":["import {\r\n  RequestMethod,\r\n  VERSION_NEUTRAL,\r\n  VersioningOptions,\r\n  VersioningType,\r\n  flatten,\r\n} from '@nestjs/common';\r\nimport { VersionValue } from '@nestjs/common/interfaces';\r\nimport {\r\n  addLeadingSlash,\r\n  isUndefined,\r\n  stripEndSlash,\r\n} from '@nestjs/common/utils/shared.utils';\r\nimport { ApplicationConfig } from '../application-config';\r\nimport { RoutePathMetadata } from './interfaces/route-path-metadata.interface';\r\nimport { isRouteExcluded } from './utils';\r\n\r\nexport class RoutePathFactory {\r\n  constructor(private readonly applicationConfig: ApplicationConfig) {}\r\n\r\n  public create(\r\n    metadata: RoutePathMetadata,\r\n    requestMethod?: RequestMethod,\r\n  ): string[] {\r\n    let paths = [''];\r\n\r\n    const versionOrVersions = this.getVersion(metadata);\r\n    if (\r\n      versionOrVersions &&\r\n      metadata.versioningOptions?.type === VersioningType.URI\r\n    ) {\r\n      const versionPrefix = this.getVersionPrefix(metadata.versioningOptions);\r\n\r\n      if (Array.isArray(versionOrVersions)) {\r\n        paths = flatten(\r\n          paths.map(path =>\r\n            versionOrVersions.map(version =>\r\n              // Version Neutral - Do not include version in URL\r\n              version === VERSION_NEUTRAL\r\n                ? path\r\n                : `${path}/${versionPrefix}${version}`,\r\n            ),\r\n          ),\r\n        );\r\n      } else {\r\n        // Version Neutral - Do not include version in URL\r\n        if (versionOrVersions !== VERSION_NEUTRAL) {\r\n          paths = paths.map(\r\n            path => `${path}/${versionPrefix}${versionOrVersions}`,\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    paths = this.appendToAllIfDefined(paths, metadata.modulePath);\r\n    paths = this.appendToAllIfDefined(paths, metadata.ctrlPath);\r\n    paths = this.appendToAllIfDefined(paths, metadata.methodPath);\r\n\r\n    if (metadata.globalPrefix) {\r\n      paths = paths.map(path => {\r\n        if (\r\n          this.isExcludedFromGlobalPrefix(\r\n            path,\r\n            requestMethod,\r\n            versionOrVersions,\r\n            metadata.versioningOptions,\r\n          )\r\n        ) {\r\n          return path;\r\n        }\r\n        return stripEndSlash(metadata.globalPrefix || '') + path;\r\n      });\r\n    }\r\n\r\n    return paths\r\n      .map(path => addLeadingSlash(path || '/'))\r\n      .map(path => (path !== '/' ? stripEndSlash(path) : path));\r\n  }\r\n\r\n  public getVersion(metadata: RoutePathMetadata) {\r\n    // The version will be either the path version or the controller version,\r\n    // with the pathVersion taking priority.\r\n    return metadata.methodVersion || metadata.controllerVersion;\r\n  }\r\n\r\n  public getVersionPrefix(versioningOptions: VersioningOptions): string {\r\n    const defaultPrefix = 'v';\r\n    if (versioningOptions.type === VersioningType.URI) {\r\n      if (versioningOptions.prefix === false) {\r\n        return '';\r\n      } else if (versioningOptions.prefix !== undefined) {\r\n        return versioningOptions.prefix;\r\n      }\r\n    }\r\n    return defaultPrefix;\r\n  }\r\n\r\n  public appendToAllIfDefined(\r\n    paths: string[],\r\n    fragmentToAppend: string | string[] | undefined,\r\n  ): string[] {\r\n    if (!fragmentToAppend) {\r\n      return paths;\r\n    }\r\n    const concatPaths = (a: string, b: string) =>\r\n      stripEndSlash(a) + addLeadingSlash(b);\r\n\r\n    if (Array.isArray(fragmentToAppend)) {\r\n      const paths2dArray = paths.map(path =>\r\n        fragmentToAppend.map(fragment => concatPaths(path, fragment)),\r\n      );\r\n      return flatten(paths2dArray);\r\n    }\r\n    return paths.map(path => concatPaths(path, fragmentToAppend));\r\n  }\r\n\r\n  public isExcludedFromGlobalPrefix(\r\n    path: string,\r\n    requestMethod?: RequestMethod,\r\n    versionOrVersions?: VersionValue,\r\n    versioningOptions?: VersioningOptions,\r\n  ) {\r\n    if (isUndefined(requestMethod)) {\r\n      return false;\r\n    }\r\n    const options = this.applicationConfig.getGlobalPrefixOptions();\r\n    const excludedRoutes = options.exclude;\r\n\r\n    if (\r\n      versionOrVersions &&\r\n      versionOrVersions !== VERSION_NEUTRAL &&\r\n      versioningOptions?.type === VersioningType.URI\r\n    ) {\r\n      path = this.truncateVersionPrefixFromPath(\r\n        path,\r\n        versionOrVersions,\r\n        versioningOptions,\r\n      );\r\n    }\r\n    return (\r\n      Array.isArray(excludedRoutes) &&\r\n      isRouteExcluded(excludedRoutes, path, requestMethod)\r\n    );\r\n  }\r\n\r\n  private truncateVersionPrefixFromPath(\r\n    path: string,\r\n    versionValue: Exclude<VersionValue, typeof VERSION_NEUTRAL>,\r\n    versioningOptions: VersioningOptions,\r\n  ) {\r\n    if (typeof versionValue !== 'string') {\r\n      versionValue.forEach(version => {\r\n        if (typeof version === 'string') {\r\n          path = this.truncateVersionPrefixFromPath(\r\n            path,\r\n            version,\r\n            versioningOptions,\r\n          );\r\n        }\r\n      });\r\n      return path;\r\n    }\r\n\r\n    const prefix = `/${this.getVersionPrefix(\r\n      versioningOptions,\r\n    )}${versionValue}`;\r\n\r\n    return path.startsWith(prefix) ? path.replace(prefix, '') : path;\r\n  }\r\n}\r\n"]}