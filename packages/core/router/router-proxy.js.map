{"version":3,"file":"router-proxy.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["router/router-proxy.ts"],"names":[],"mappings":";;;AACA,8EAAyE;AAQzE,MAAa,WAAW;IACf,WAAW,CAChB,cAAmC,EACnC,iBAAoC;QAEpC,OAAO,KAAK,EACV,GAAa,EACb,GAAc,EACd,IAAgB,EAChB,EAAE;YACF,IAAI;gBACF,MAAM,cAAc,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;aACtC;YAAC,OAAO,CAAC,EAAE;gBACV,MAAM,IAAI,GAAG,IAAI,6CAAoB,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;gBACxD,iBAAiB,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;gBAChC,OAAO,GAAG,CAAC;aACZ;QACH,CAAC,CAAC;IACJ,CAAC;IAEM,yBAAyB,CAC9B,cAKS,EACT,iBAAoC;QAEpC,OAAO,KAAK,EACV,GAAW,EACX,GAAa,EACb,GAAc,EACd,IAAgB,EAChB,EAAE;YACF,IAAI;gBACF,MAAM,cAAc,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;aAC3C;YAAC,OAAO,CAAC,EAAE;gBACV,MAAM,IAAI,GAAG,IAAI,6CAAoB,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;gBACxD,iBAAiB,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;gBAChC,OAAO,GAAG,CAAC;aACZ;QACH,CAAC,CAAC;IACJ,CAAC;CACF;AA5CD,kCA4CC","sourcesContent":["import { ExceptionsHandler } from '../exceptions/exceptions-handler';\r\nimport { ExecutionContextHost } from '../helpers/execution-context-host';\r\n\r\nexport type RouterProxyCallback = <TRequest, TResponse>(\r\n  req?: TRequest,\r\n  res?: TResponse,\r\n  next?: () => void,\r\n) => void;\r\n\r\nexport class RouterProxy {\r\n  public createProxy(\r\n    targetCallback: RouterProxyCallback,\r\n    exceptionsHandler: ExceptionsHandler,\r\n  ) {\r\n    return async <TRequest, TResponse>(\r\n      req: TRequest,\r\n      res: TResponse,\r\n      next: () => void,\r\n    ) => {\r\n      try {\r\n        await targetCallback(req, res, next);\r\n      } catch (e) {\r\n        const host = new ExecutionContextHost([req, res, next]);\r\n        exceptionsHandler.next(e, host);\r\n        return res;\r\n      }\r\n    };\r\n  }\r\n\r\n  public createExceptionLayerProxy(\r\n    targetCallback: <TError, TRequest, TResponse>(\r\n      err: TError,\r\n      req: TRequest,\r\n      res: TResponse,\r\n      next: () => void,\r\n    ) => void,\r\n    exceptionsHandler: ExceptionsHandler,\r\n  ) {\r\n    return async <TError, TRequest, TResponse>(\r\n      err: TError,\r\n      req: TRequest,\r\n      res: TResponse,\r\n      next: () => void,\r\n    ) => {\r\n      try {\r\n        await targetCallback(err, req, res, next);\r\n      } catch (e) {\r\n        const host = new ExecutionContextHost([req, res, next]);\r\n        exceptionsHandler.next(e, host);\r\n        return res;\r\n      }\r\n    };\r\n  }\r\n}\r\n"]}