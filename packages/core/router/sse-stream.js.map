{"version":3,"file":"sse-stream.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["router/sse-stream.ts"],"names":[],"mappings":"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","sourcesContent":["import { MessageEvent } from '@nestjs/common/interfaces';\r\nimport { isObject } from '@nestjs/common/utils/shared.utils';\r\nimport { IncomingMessage, OutgoingHttpHeaders } from 'http';\r\nimport { Transform } from 'stream';\r\n\r\nfunction toDataString(data: string | object): string {\r\n  if (isObject(data)) {\r\n    return toDataString(JSON.stringify(data));\r\n  }\r\n\r\n  return data\r\n    .split(/\\r\\n|\\r|\\n/)\r\n    .map(line => `data: ${line}\\n`)\r\n    .join('');\r\n}\r\n\r\nexport type AdditionalHeaders = Record<\r\n  string,\r\n  string[] | string | number | undefined\r\n>;\r\n\r\ninterface ReadHeaders {\r\n  getHeaders?(): AdditionalHeaders;\r\n}\r\n\r\ninterface WriteHeaders {\r\n  writableEnded?: boolean;\r\n  writeHead?(\r\n    statusCode: number,\r\n    reasonPhrase?: string,\r\n    headers?: OutgoingHttpHeaders,\r\n  ): void;\r\n  writeHead?(statusCode: number, headers?: OutgoingHttpHeaders): void;\r\n  flushHeaders?(): void;\r\n}\r\n\r\nexport type WritableHeaderStream = NodeJS.WritableStream & WriteHeaders;\r\nexport type HeaderStream = WritableHeaderStream & ReadHeaders;\r\n\r\n/**\r\n * Adapted from https://raw.githubusercontent.com/EventSource/node-ssestream\r\n * Transforms \"messages\" to W3C event stream content.\r\n * See https://html.spec.whatwg.org/multipage/server-sent-events.html\r\n * A message is an object with one or more of the following properties:\r\n * - data (String or object, which gets turned into JSON)\r\n * - type\r\n * - id\r\n * - retry\r\n *\r\n * If constructed with a HTTP Request, it will optimise the socket for streaming.\r\n * If this stream is piped to an HTTP Response, it will set appropriate headers.\r\n */\r\nexport class SseStream extends Transform {\r\n  private lastEventId: number = null;\r\n\r\n  constructor(req?: IncomingMessage) {\r\n    super({ objectMode: true });\r\n    if (req && req.socket) {\r\n      req.socket.setKeepAlive(true);\r\n      req.socket.setNoDelay(true);\r\n      req.socket.setTimeout(0);\r\n    }\r\n  }\r\n\r\n  pipe<T extends WritableHeaderStream>(\r\n    destination: T,\r\n    options?: {\r\n      additionalHeaders?: AdditionalHeaders;\r\n      end?: boolean;\r\n    },\r\n  ): T {\r\n    if (destination.writeHead) {\r\n      destination.writeHead(200, {\r\n        ...options?.additionalHeaders,\r\n        // See https://github.com/dunglas/mercure/blob/master/hub/subscribe.go#L124-L130\r\n        'Content-Type': 'text/event-stream',\r\n        Connection: 'keep-alive',\r\n        // Disable cache, even for old browsers and proxies\r\n        'Cache-Control':\r\n          'private, no-cache, no-store, must-revalidate, max-age=0, no-transform',\r\n        Pragma: 'no-cache',\r\n        Expire: '0',\r\n        // NGINX support https://www.nginx.com/resources/wiki/start/topics/examples/x-accel/#x-accel-buffering\r\n        'X-Accel-Buffering': 'no',\r\n      });\r\n      destination.flushHeaders();\r\n    }\r\n\r\n    destination.write('\\n');\r\n    return super.pipe(destination, options);\r\n  }\r\n\r\n  _transform(\r\n    message: MessageEvent,\r\n    encoding: string,\r\n    callback: (error?: Error | null, data?: any) => void,\r\n  ) {\r\n    let data = message.type ? `event: ${message.type}\\n` : '';\r\n    data += message.id ? `id: ${message.id}\\n` : '';\r\n    data += message.retry ? `retry: ${message.retry}\\n` : '';\r\n    data += message.data ? toDataString(message.data) : '';\r\n    data += '\\n';\r\n    this.push(data);\r\n    callback();\r\n  }\r\n\r\n  /**\r\n   * Calls `.write` but handles the drain if needed\r\n   */\r\n  writeMessage(\r\n    message: MessageEvent,\r\n    cb: (error: Error | null | undefined) => void,\r\n  ) {\r\n    if (!message.id) {\r\n      this.lastEventId++;\r\n      message.id = this.lastEventId.toString();\r\n    }\r\n\r\n    if (!this.write(message, 'utf-8', cb)) {\r\n      this.once('drain', cb);\r\n    } else {\r\n      process.nextTick(cb);\r\n    }\r\n  }\r\n}\r\n"]}