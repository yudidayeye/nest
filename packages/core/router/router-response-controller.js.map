{"version":3,"file":"router-response-controller.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["router/router-response-controller.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  HttpServer,\r\n  HttpStatus,\r\n  Logger,\r\n  RequestMethod,\r\n  MessageEvent,\r\n} from '@nestjs/common';\r\nimport { isObject } from '@nestjs/common/utils/shared.utils';\r\nimport { IncomingMessage } from 'http';\r\nimport { EMPTY, lastValueFrom, Observable, isObservable } from 'rxjs';\r\nimport { catchError, debounce, map } from 'rxjs/operators';\r\nimport {\r\n  AdditionalHeaders,\r\n  WritableHeaderStream,\r\n  SseStream,\r\n} from './sse-stream';\r\n\r\nexport interface CustomHeader {\r\n  name: string;\r\n  value: string;\r\n}\r\n\r\nexport interface RedirectResponse {\r\n  url: string;\r\n  statusCode?: number;\r\n}\r\n\r\nexport class RouterResponseController {\r\n  private readonly logger = new Logger(RouterResponseController.name);\r\n\r\n  constructor(private readonly applicationRef: HttpServer) {}\r\n\r\n  public async apply<TInput = any, TResponse = any>(\r\n    result: TInput,\r\n    response: TResponse,\r\n    httpStatusCode?: number,\r\n  ) {\r\n    return this.applicationRef.reply(response, result, httpStatusCode);\r\n  }\r\n\r\n  public async redirect<TInput = any, TResponse = any>(\r\n    resultOrDeferred: TInput,\r\n    response: TResponse,\r\n    redirectResponse: RedirectResponse,\r\n  ) {\r\n    const result = await this.transformToResult(resultOrDeferred);\r\n    const statusCode =\r\n      result && result.statusCode\r\n        ? result.statusCode\r\n        : redirectResponse.statusCode\r\n        ? redirectResponse.statusCode\r\n        : HttpStatus.FOUND;\r\n    const url = result && result.url ? result.url : redirectResponse.url;\r\n    this.applicationRef.redirect(response, statusCode, url);\r\n  }\r\n\r\n  public async render<TInput = unknown, TResponse = unknown>(\r\n    resultOrDeferred: TInput,\r\n    response: TResponse,\r\n    template: string,\r\n  ) {\r\n    const result = await this.transformToResult(resultOrDeferred);\r\n    return this.applicationRef.render(response, template, result);\r\n  }\r\n\r\n  public async transformToResult(resultOrDeferred: any) {\r\n    if (isObservable(resultOrDeferred)) {\r\n      return lastValueFrom(resultOrDeferred);\r\n    }\r\n    return resultOrDeferred;\r\n  }\r\n\r\n  public getStatusByMethod(requestMethod: RequestMethod): number {\r\n    switch (requestMethod) {\r\n      case RequestMethod.POST:\r\n        return HttpStatus.CREATED;\r\n      default:\r\n        return HttpStatus.OK;\r\n    }\r\n  }\r\n\r\n  public setHeaders<TResponse = unknown>(\r\n    response: TResponse,\r\n    headers: CustomHeader[],\r\n  ) {\r\n    headers.forEach(({ name, value }) =>\r\n      this.applicationRef.setHeader(response, name, value),\r\n    );\r\n  }\r\n\r\n  public setStatus<TResponse = unknown>(\r\n    response: TResponse,\r\n    statusCode: number,\r\n  ) {\r\n    this.applicationRef.status(response, statusCode);\r\n  }\r\n\r\n  public sse<\r\n    TInput extends Observable<unknown> = any,\r\n    TResponse extends WritableHeaderStream = any,\r\n    TRequest extends IncomingMessage = any,\r\n  >(\r\n    result: TInput,\r\n    response: TResponse,\r\n    request: TRequest,\r\n    options?: { additionalHeaders: AdditionalHeaders },\r\n  ) {\r\n    // It's possible that we sent headers already so don't use a stream\r\n    if (response.writableEnded) {\r\n      return;\r\n    }\r\n\r\n    this.assertObservable(result);\r\n\r\n    const stream = new SseStream(request);\r\n    stream.pipe(response, options);\r\n\r\n    const subscription = result\r\n      .pipe(\r\n        map((message): MessageEvent => {\r\n          if (isObject(message)) {\r\n            return message as MessageEvent;\r\n          }\r\n\r\n          return { data: message as object | string };\r\n        }),\r\n        debounce(\r\n          message =>\r\n            new Promise<void>(resolve =>\r\n              stream.writeMessage(message, () => resolve()),\r\n            ),\r\n        ),\r\n        catchError(err => {\r\n          const data = err instanceof Error ? err.message : err;\r\n          stream.writeMessage({ type: 'error', data }, writeError => {\r\n            if (writeError) {\r\n              this.logger.error(writeError);\r\n            }\r\n          });\r\n\r\n          return EMPTY;\r\n        }),\r\n      )\r\n      .subscribe({\r\n        complete: () => {\r\n          response.end();\r\n        },\r\n      });\r\n\r\n    request.on('close', () => {\r\n      subscription.unsubscribe();\r\n    });\r\n  }\r\n\r\n  private assertObservable(value: any) {\r\n    if (!isObservable(value)) {\r\n      throw new ReferenceError(\r\n        'You must return an Observable stream to use Server-Sent Events (SSE).',\r\n      );\r\n    }\r\n  }\r\n}\r\n"]}