{"version":3,"file":"router-execution-context.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["router/router-execution-context.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  CanActivate,\r\n  ForbiddenException,\r\n  HttpServer,\r\n  ParamData,\r\n  PipeTransform,\r\n  RequestMethod,\r\n} from '@nestjs/common';\r\nimport {\r\n  CUSTOM_ROUTE_ARGS_METADATA,\r\n  HEADERS_METADATA,\r\n  HTTP_CODE_METADATA,\r\n  REDIRECT_METADATA,\r\n  RENDER_METADATA,\r\n  ROUTE_ARGS_METADATA,\r\n  SSE_METADATA,\r\n} from '@nestjs/common/constants';\r\nimport { RouteParamMetadata } from '@nestjs/common/decorators';\r\nimport { RouteParamtypes } from '@nestjs/common/enums/route-paramtypes.enum';\r\nimport { ContextType, Controller } from '@nestjs/common/interfaces';\r\nimport { isEmpty, isString } from '@nestjs/common/utils/shared.utils';\r\nimport { IncomingMessage } from 'http';\r\nimport { Observable } from 'rxjs';\r\nimport {\r\n  FORBIDDEN_MESSAGE,\r\n  GuardsConsumer,\r\n  GuardsContextCreator,\r\n} from '../guards';\r\nimport { ContextUtils } from '../helpers/context-utils';\r\nimport { ExecutionContextHost } from '../helpers/execution-context-host';\r\nimport {\r\n  HandleResponseFn,\r\n  HandlerMetadata,\r\n  HandlerMetadataStorage,\r\n  HandlerResponseBasicFn,\r\n} from '../helpers/handler-metadata-storage';\r\nimport { STATIC_CONTEXT } from '../injector/constants';\r\nimport { InterceptorsConsumer } from '../interceptors/interceptors-consumer';\r\nimport { InterceptorsContextCreator } from '../interceptors/interceptors-context-creator';\r\nimport { PipesConsumer } from '../pipes/pipes-consumer';\r\nimport { PipesContextCreator } from '../pipes/pipes-context-creator';\r\nimport { IRouteParamsFactory } from './interfaces/route-params-factory.interface';\r\nimport {\r\n  CustomHeader,\r\n  RedirectResponse,\r\n  RouterResponseController,\r\n} from './router-response-controller';\r\nimport { HeaderStream } from './sse-stream';\r\n\r\nexport interface ParamProperties {\r\n  index: number;\r\n  type: RouteParamtypes | string;\r\n  data: ParamData;\r\n  pipes: PipeTransform[];\r\n  extractValue: <TRequest, TResponse>(\r\n    req: TRequest,\r\n    res: TResponse,\r\n    next: Function,\r\n  ) => any;\r\n}\r\n\r\nexport class RouterExecutionContext {\r\n  private readonly handlerMetadataStorage = new HandlerMetadataStorage();\r\n  private readonly contextUtils = new ContextUtils();\r\n  private readonly responseController: RouterResponseController;\r\n\r\n  constructor(\r\n    private readonly paramsFactory: IRouteParamsFactory,\r\n    private readonly pipesContextCreator: PipesContextCreator,\r\n    private readonly pipesConsumer: PipesConsumer,\r\n    private readonly guardsContextCreator: GuardsContextCreator,\r\n    private readonly guardsConsumer: GuardsConsumer,\r\n    private readonly interceptorsContextCreator: InterceptorsContextCreator,\r\n    private readonly interceptorsConsumer: InterceptorsConsumer,\r\n    readonly applicationRef: HttpServer,\r\n  ) {\r\n    this.responseController = new RouterResponseController(applicationRef);\r\n  }\r\n\r\n  public create(\r\n    instance: Controller,\r\n    callback: (...args: any[]) => unknown,\r\n    methodName: string,\r\n    moduleKey: string,\r\n    requestMethod: RequestMethod,\r\n    contextId = STATIC_CONTEXT,\r\n    inquirerId?: string,\r\n  ) {\r\n    const contextType: ContextType = 'http';\r\n    const {\r\n      argsLength,\r\n      fnHandleResponse,\r\n      paramtypes,\r\n      getParamsMetadata,\r\n      httpStatusCode,\r\n      responseHeaders,\r\n      hasCustomHeaders,\r\n    } = this.getMetadata(\r\n      instance,\r\n      callback,\r\n      methodName,\r\n      moduleKey,\r\n      requestMethod,\r\n      contextType,\r\n    );\r\n\r\n    const paramsOptions = this.contextUtils.mergeParamsMetatypes(\r\n      getParamsMetadata(moduleKey, contextId, inquirerId),\r\n      paramtypes,\r\n    );\r\n    const pipes = this.pipesContextCreator.create(\r\n      instance,\r\n      callback,\r\n      moduleKey,\r\n      contextId,\r\n      inquirerId,\r\n    );\r\n    const guards = this.guardsContextCreator.create(\r\n      instance,\r\n      callback,\r\n      moduleKey,\r\n      contextId,\r\n      inquirerId,\r\n    );\r\n    const interceptors = this.interceptorsContextCreator.create(\r\n      instance,\r\n      callback,\r\n      moduleKey,\r\n      contextId,\r\n      inquirerId,\r\n    );\r\n\r\n    const fnCanActivate = this.createGuardsFn(\r\n      guards,\r\n      instance,\r\n      callback,\r\n      contextType,\r\n    );\r\n    const fnApplyPipes = this.createPipesFn(pipes, paramsOptions);\r\n\r\n    const handler =\r\n      <TRequest, TResponse>(\r\n        args: any[],\r\n        req: TRequest,\r\n        res: TResponse,\r\n        next: Function,\r\n      ) =>\r\n      async () => {\r\n        fnApplyPipes && (await fnApplyPipes(args, req, res, next));\r\n        return callback.apply(instance, args);\r\n      };\r\n\r\n    return async <TRequest, TResponse>(\r\n      req: TRequest,\r\n      res: TResponse,\r\n      next: Function,\r\n    ) => {\r\n      const args = this.contextUtils.createNullArray(argsLength);\r\n      fnCanActivate && (await fnCanActivate([req, res, next]));\r\n\r\n      this.responseController.setStatus(res, httpStatusCode);\r\n      hasCustomHeaders &&\r\n        this.responseController.setHeaders(res, responseHeaders);\r\n\r\n      const result = await this.interceptorsConsumer.intercept(\r\n        interceptors,\r\n        [req, res, next],\r\n        instance,\r\n        callback,\r\n        handler(args, req, res, next),\r\n        contextType,\r\n      );\r\n      await (fnHandleResponse as HandlerResponseBasicFn)(result, res, req);\r\n    };\r\n  }\r\n\r\n  public getMetadata<TContext extends ContextType = ContextType>(\r\n    instance: Controller,\r\n    callback: (...args: any[]) => any,\r\n    methodName: string,\r\n    moduleKey: string,\r\n    requestMethod: RequestMethod,\r\n    contextType: TContext,\r\n  ): HandlerMetadata {\r\n    const cacheMetadata = this.handlerMetadataStorage.get(instance, methodName);\r\n    if (cacheMetadata) {\r\n      return cacheMetadata;\r\n    }\r\n    const metadata =\r\n      this.contextUtils.reflectCallbackMetadata(\r\n        instance,\r\n        methodName,\r\n        ROUTE_ARGS_METADATA,\r\n      ) || {};\r\n    const keys = Object.keys(metadata);\r\n    const argsLength = this.contextUtils.getArgumentsLength(keys, metadata);\r\n    const paramtypes = this.contextUtils.reflectCallbackParamtypes(\r\n      instance,\r\n      methodName,\r\n    );\r\n\r\n    const contextFactory = this.contextUtils.getContextFactory(\r\n      contextType,\r\n      instance,\r\n      callback,\r\n    );\r\n    const getParamsMetadata = (\r\n      moduleKey: string,\r\n      contextId = STATIC_CONTEXT,\r\n      inquirerId?: string,\r\n    ) =>\r\n      this.exchangeKeysForValues(\r\n        keys,\r\n        metadata,\r\n        moduleKey,\r\n        contextId,\r\n        inquirerId,\r\n        contextFactory,\r\n      );\r\n\r\n    const paramsMetadata = getParamsMetadata(moduleKey);\r\n    const isResponseHandled = this.isResponseHandled(\r\n      instance,\r\n      methodName,\r\n      paramsMetadata,\r\n    );\r\n\r\n    const httpRedirectResponse = this.reflectRedirect(callback);\r\n    const fnHandleResponse = this.createHandleResponseFn(\r\n      callback,\r\n      isResponseHandled,\r\n      httpRedirectResponse,\r\n    );\r\n\r\n    const httpCode = this.reflectHttpStatusCode(callback);\r\n    const httpStatusCode = httpCode\r\n      ? httpCode\r\n      : this.responseController.getStatusByMethod(requestMethod);\r\n\r\n    const responseHeaders = this.reflectResponseHeaders(callback);\r\n    const hasCustomHeaders = !isEmpty(responseHeaders);\r\n    const handlerMetadata: HandlerMetadata = {\r\n      argsLength,\r\n      fnHandleResponse,\r\n      paramtypes,\r\n      getParamsMetadata,\r\n      httpStatusCode,\r\n      hasCustomHeaders,\r\n      responseHeaders,\r\n    };\r\n    this.handlerMetadataStorage.set(instance, methodName, handlerMetadata);\r\n    return handlerMetadata;\r\n  }\r\n\r\n  public reflectRedirect(\r\n    callback: (...args: unknown[]) => unknown,\r\n  ): RedirectResponse {\r\n    return Reflect.getMetadata(REDIRECT_METADATA, callback);\r\n  }\r\n\r\n  public reflectHttpStatusCode(\r\n    callback: (...args: unknown[]) => unknown,\r\n  ): number {\r\n    return Reflect.getMetadata(HTTP_CODE_METADATA, callback);\r\n  }\r\n\r\n  public reflectRenderTemplate(\r\n    callback: (...args: unknown[]) => unknown,\r\n  ): string {\r\n    return Reflect.getMetadata(RENDER_METADATA, callback);\r\n  }\r\n\r\n  public reflectResponseHeaders(\r\n    callback: (...args: unknown[]) => unknown,\r\n  ): CustomHeader[] {\r\n    return Reflect.getMetadata(HEADERS_METADATA, callback) || [];\r\n  }\r\n\r\n  public reflectSse(callback: (...args: unknown[]) => unknown): string {\r\n    return Reflect.getMetadata(SSE_METADATA, callback);\r\n  }\r\n\r\n  public exchangeKeysForValues(\r\n    keys: string[],\r\n    metadata: Record<number, RouteParamMetadata>,\r\n    moduleContext: string,\r\n    contextId = STATIC_CONTEXT,\r\n    inquirerId?: string,\r\n    contextFactory?: (args: unknown[]) => ExecutionContextHost,\r\n  ): ParamProperties[] {\r\n    this.pipesContextCreator.setModuleContext(moduleContext);\r\n\r\n    return keys.map(key => {\r\n      const { index, data, pipes: pipesCollection } = metadata[key];\r\n      const pipes = this.pipesContextCreator.createConcreteContext(\r\n        pipesCollection,\r\n        contextId,\r\n        inquirerId,\r\n      );\r\n      const type = this.contextUtils.mapParamType(key);\r\n\r\n      if (key.includes(CUSTOM_ROUTE_ARGS_METADATA)) {\r\n        const { factory } = metadata[key];\r\n        const customExtractValue = this.contextUtils.getCustomFactory(\r\n          factory,\r\n          data,\r\n          contextFactory,\r\n        );\r\n        return { index, extractValue: customExtractValue, type, data, pipes };\r\n      }\r\n      const numericType = Number(type);\r\n      const extractValue = <TRequest, TResponse>(\r\n        req: TRequest,\r\n        res: TResponse,\r\n        next: Function,\r\n      ) =>\r\n        this.paramsFactory.exchangeKeyForValue(numericType, data, {\r\n          req,\r\n          res,\r\n          next,\r\n        });\r\n      return { index, extractValue, type: numericType, data, pipes };\r\n    });\r\n  }\r\n\r\n  public async getParamValue<T>(\r\n    value: T,\r\n    {\r\n      metatype,\r\n      type,\r\n      data,\r\n    }: { metatype: unknown; type: RouteParamtypes; data: unknown },\r\n    pipes: PipeTransform[],\r\n  ): Promise<unknown> {\r\n    if (!isEmpty(pipes)) {\r\n      return this.pipesConsumer.apply(\r\n        value,\r\n        { metatype, type, data } as any,\r\n        pipes,\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  public isPipeable(type: number | string): boolean {\r\n    return (\r\n      type === RouteParamtypes.BODY ||\r\n      type === RouteParamtypes.QUERY ||\r\n      type === RouteParamtypes.PARAM ||\r\n      type === RouteParamtypes.FILE ||\r\n      type === RouteParamtypes.FILES ||\r\n      isString(type)\r\n    );\r\n  }\r\n\r\n  public createGuardsFn<TContext extends string = ContextType>(\r\n    guards: CanActivate[],\r\n    instance: Controller,\r\n    callback: (...args: any[]) => any,\r\n    contextType?: TContext,\r\n  ): (args: any[]) => Promise<void> | null {\r\n    const canActivateFn = async (args: any[]) => {\r\n      const canActivate = await this.guardsConsumer.tryActivate<TContext>(\r\n        guards,\r\n        args,\r\n        instance,\r\n        callback,\r\n        contextType,\r\n      );\r\n      if (!canActivate) {\r\n        throw new ForbiddenException(FORBIDDEN_MESSAGE);\r\n      }\r\n    };\r\n    return guards.length ? canActivateFn : null;\r\n  }\r\n\r\n  public createPipesFn(\r\n    pipes: PipeTransform[],\r\n    paramsOptions: (ParamProperties & { metatype?: any })[],\r\n  ) {\r\n    const pipesFn = async <TRequest, TResponse>(\r\n      args: any[],\r\n      req: TRequest,\r\n      res: TResponse,\r\n      next: Function,\r\n    ) => {\r\n      const resolveParamValue = async (\r\n        param: ParamProperties & { metatype?: any },\r\n      ) => {\r\n        const {\r\n          index,\r\n          extractValue,\r\n          type,\r\n          data,\r\n          metatype,\r\n          pipes: paramPipes,\r\n        } = param;\r\n        const value = extractValue(req, res, next);\r\n\r\n        args[index] = this.isPipeable(type)\r\n          ? await this.getParamValue(\r\n              value,\r\n              { metatype, type, data } as any,\r\n              pipes.concat(paramPipes),\r\n            )\r\n          : value;\r\n      };\r\n      await Promise.all(paramsOptions.map(resolveParamValue));\r\n    };\r\n    return paramsOptions.length ? pipesFn : null;\r\n  }\r\n\r\n  public createHandleResponseFn(\r\n    callback: (...args: unknown[]) => unknown,\r\n    isResponseHandled: boolean,\r\n    redirectResponse?: RedirectResponse,\r\n    httpStatusCode?: number,\r\n  ): HandleResponseFn {\r\n    const renderTemplate = this.reflectRenderTemplate(callback);\r\n    if (renderTemplate) {\r\n      return async <TResult, TResponse>(result: TResult, res: TResponse) => {\r\n        return await this.responseController.render(\r\n          result,\r\n          res,\r\n          renderTemplate,\r\n        );\r\n      };\r\n    }\r\n    if (redirectResponse && isString(redirectResponse.url)) {\r\n      return async <TResult, TResponse>(result: TResult, res: TResponse) => {\r\n        await this.responseController.redirect(result, res, redirectResponse);\r\n      };\r\n    }\r\n    const isSseHandler = !!this.reflectSse(callback);\r\n    if (isSseHandler) {\r\n      return <\r\n        TResult extends Observable<unknown> = any,\r\n        TResponse extends HeaderStream = any,\r\n        TRequest extends IncomingMessage = any,\r\n      >(\r\n        result: TResult,\r\n        res: TResponse,\r\n        req: TRequest,\r\n      ) => {\r\n        this.responseController.sse(\r\n          result,\r\n          (res as any).raw || res,\r\n          (req as any).raw || req,\r\n          { additionalHeaders: res.getHeaders?.() },\r\n        );\r\n      };\r\n    }\r\n    return async <TResult, TResponse>(result: TResult, res: TResponse) => {\r\n      result = await this.responseController.transformToResult(result);\r\n      !isResponseHandled &&\r\n        (await this.responseController.apply(result, res, httpStatusCode));\r\n      return res;\r\n    };\r\n  }\r\n\r\n  private isResponseHandled(\r\n    instance: Controller,\r\n    methodName: string,\r\n    paramsMetadata: ParamProperties[],\r\n  ): boolean {\r\n    const hasResponseOrNextDecorator = paramsMetadata.some(\r\n      ({ type }) =>\r\n        type === RouteParamtypes.RESPONSE || type === RouteParamtypes.NEXT,\r\n    );\r\n    const isPassthroughEnabled = this.contextUtils.reflectPassthrough(\r\n      instance,\r\n      methodName,\r\n    );\r\n    return hasResponseOrNextDecorator && !isPassthroughEnabled;\r\n  }\r\n}\r\n"]}