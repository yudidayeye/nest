{"version":3,"file":"routes-resolver.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["router/routes-resolver.ts"],"names":[],"mappings":"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","sourcesContent":["import { BadRequestException, NotFoundException } from '@nestjs/common';\r\nimport {\r\n  HOST_METADATA,\r\n  MODULE_PATH,\r\n  VERSION_METADATA,\r\n} from '@nestjs/common/constants';\r\nimport {\r\n  Controller,\r\n  HttpServer,\r\n  Type,\r\n  VersionValue,\r\n} from '@nestjs/common/interfaces';\r\nimport { Logger } from '@nestjs/common/services/logger.service';\r\nimport { ApplicationConfig } from '../application-config';\r\nimport {\r\n  CONTROLLER_MAPPING_MESSAGE,\r\n  VERSIONED_CONTROLLER_MAPPING_MESSAGE,\r\n} from '../helpers/messages';\r\nimport { NestContainer } from '../injector/container';\r\nimport { Injector } from '../injector/injector';\r\nimport { InstanceWrapper } from '../injector/instance-wrapper';\r\nimport { GraphInspector } from '../inspector/graph-inspector';\r\nimport { MetadataScanner } from '../metadata-scanner';\r\nimport { Resolver } from './interfaces/resolver.interface';\r\nimport { RoutePathMetadata } from './interfaces/route-path-metadata.interface';\r\nimport { RoutePathFactory } from './route-path-factory';\r\nimport { RouterExceptionFilters } from './router-exception-filters';\r\nimport { RouterExplorer } from './router-explorer';\r\nimport { RouterProxy } from './router-proxy';\r\n\r\nexport class RoutesResolver implements Resolver {\r\n  private readonly logger = new Logger(RoutesResolver.name, {\r\n    timestamp: true,\r\n  });\r\n  private readonly routerProxy = new RouterProxy();\r\n  private readonly routePathFactory: RoutePathFactory;\r\n  private readonly routerExceptionsFilter: RouterExceptionFilters;\r\n  private readonly routerExplorer: RouterExplorer;\r\n\r\n  constructor(\r\n    private readonly container: NestContainer,\r\n    private readonly applicationConfig: ApplicationConfig,\r\n    private readonly injector: Injector,\r\n    graphInspector: GraphInspector,\r\n  ) {\r\n    const httpAdapterRef = container.getHttpAdapterRef();\r\n    this.routerExceptionsFilter = new RouterExceptionFilters(\r\n      container,\r\n      applicationConfig,\r\n      httpAdapterRef,\r\n    );\r\n    this.routePathFactory = new RoutePathFactory(this.applicationConfig);\r\n\r\n    const metadataScanner = new MetadataScanner();\r\n    this.routerExplorer = new RouterExplorer(\r\n      metadataScanner,\r\n      this.container,\r\n      this.injector,\r\n      this.routerProxy,\r\n      this.routerExceptionsFilter,\r\n      this.applicationConfig,\r\n      this.routePathFactory,\r\n      graphInspector,\r\n    );\r\n  }\r\n\r\n  public resolve<T extends HttpServer>(\r\n    applicationRef: T,\r\n    globalPrefix: string,\r\n  ) {\r\n    const modules = this.container.getModules();\r\n    modules.forEach(({ controllers, metatype }, moduleName) => {\r\n      const modulePath = this.getModulePathMetadata(metatype);\r\n      this.registerRouters(\r\n        controllers,\r\n        moduleName,\r\n        globalPrefix,\r\n        modulePath,\r\n        applicationRef,\r\n      );\r\n    });\r\n  }\r\n\r\n  public registerRouters(\r\n    routes: Map<string | symbol | Function, InstanceWrapper<Controller>>,\r\n    moduleName: string,\r\n    globalPrefix: string,\r\n    modulePath: string,\r\n    applicationRef: HttpServer,\r\n  ) {\r\n    routes.forEach(instanceWrapper => {\r\n      const { metatype } = instanceWrapper;\r\n\r\n      const host = this.getHostMetadata(metatype);\r\n      const routerPaths = this.routerExplorer.extractRouterPath(\r\n        metatype as Type<any>,\r\n      );\r\n      const controllerVersion = this.getVersionMetadata(metatype);\r\n      const controllerName = metatype.name;\r\n\r\n      routerPaths.forEach(path => {\r\n        const pathsToLog = this.routePathFactory.create({\r\n          ctrlPath: path,\r\n          modulePath,\r\n          globalPrefix,\r\n        });\r\n        if (!controllerVersion) {\r\n          pathsToLog.forEach(path => {\r\n            const logMessage = CONTROLLER_MAPPING_MESSAGE(controllerName, path);\r\n            this.logger.log(logMessage);\r\n          });\r\n        } else {\r\n          pathsToLog.forEach(path => {\r\n            const logMessage = VERSIONED_CONTROLLER_MAPPING_MESSAGE(\r\n              controllerName,\r\n              path,\r\n              controllerVersion,\r\n            );\r\n            this.logger.log(logMessage);\r\n          });\r\n        }\r\n\r\n        const versioningOptions = this.applicationConfig.getVersioning();\r\n        const routePathMetadata: RoutePathMetadata = {\r\n          ctrlPath: path,\r\n          modulePath,\r\n          globalPrefix,\r\n          controllerVersion,\r\n          versioningOptions,\r\n        };\r\n        this.routerExplorer.explore(\r\n          instanceWrapper,\r\n          moduleName,\r\n          applicationRef,\r\n          host,\r\n          routePathMetadata,\r\n        );\r\n      });\r\n    });\r\n  }\r\n\r\n  public registerNotFoundHandler() {\r\n    const applicationRef = this.container.getHttpAdapterRef();\r\n    const callback = <TRequest, TResponse>(req: TRequest, res: TResponse) => {\r\n      const method = applicationRef.getRequestMethod(req);\r\n      const url = applicationRef.getRequestUrl(req);\r\n      throw new NotFoundException(`Cannot ${method} ${url}`);\r\n    };\r\n    const handler = this.routerExceptionsFilter.create({}, callback, undefined);\r\n    const proxy = this.routerProxy.createProxy(callback, handler);\r\n    applicationRef.setNotFoundHandler &&\r\n      applicationRef.setNotFoundHandler(\r\n        proxy,\r\n        this.applicationConfig.getGlobalPrefix(),\r\n      );\r\n  }\r\n\r\n  public registerExceptionHandler() {\r\n    const callback = <TError, TRequest, TResponse>(\r\n      err: TError,\r\n      req: TRequest,\r\n      res: TResponse,\r\n      next: Function,\r\n    ) => {\r\n      throw this.mapExternalException(err);\r\n    };\r\n    const handler = this.routerExceptionsFilter.create(\r\n      {},\r\n      callback as any,\r\n      undefined,\r\n    );\r\n    const proxy = this.routerProxy.createExceptionLayerProxy(callback, handler);\r\n    const applicationRef = this.container.getHttpAdapterRef();\r\n    applicationRef.setErrorHandler &&\r\n      applicationRef.setErrorHandler(\r\n        proxy,\r\n        this.applicationConfig.getGlobalPrefix(),\r\n      );\r\n  }\r\n\r\n  public mapExternalException(err: any) {\r\n    switch (true) {\r\n      // SyntaxError is thrown by Express body-parser when given invalid JSON (#422, #430)\r\n      // URIError is thrown by Express when given a path parameter with an invalid percentage\r\n      // encoding, e.g. '%FF' (#8915)\r\n      case err instanceof SyntaxError || err instanceof URIError:\r\n        return new BadRequestException(err.message);\r\n      default:\r\n        return err;\r\n    }\r\n  }\r\n\r\n  private getModulePathMetadata(metatype: Type<unknown>): string | undefined {\r\n    const modulesContainer = this.container.getModules();\r\n    const modulePath = Reflect.getMetadata(\r\n      MODULE_PATH + modulesContainer.applicationId,\r\n      metatype,\r\n    );\r\n    return modulePath ?? Reflect.getMetadata(MODULE_PATH, metatype);\r\n  }\r\n\r\n  private getHostMetadata(\r\n    metatype: Type<unknown> | Function,\r\n  ): string | string[] | undefined {\r\n    return Reflect.getMetadata(HOST_METADATA, metatype);\r\n  }\r\n\r\n  private getVersionMetadata(\r\n    metatype: Type<unknown> | Function,\r\n  ): VersionValue | undefined {\r\n    const versioningConfig = this.applicationConfig.getVersioning();\r\n    if (versioningConfig) {\r\n      return (\r\n        Reflect.getMetadata(VERSION_METADATA, metatype) ??\r\n        versioningConfig.defaultVersion\r\n      );\r\n    }\r\n  }\r\n}\r\n"]}