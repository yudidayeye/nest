{"version":3,"file":"repl-context.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["repl/repl-context.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  INestApplicationContext,\r\n  InjectionToken,\r\n  Logger,\r\n} from '@nestjs/common';\r\nimport { ApplicationConfig } from '../application-config';\r\nimport { ModuleRef, NestContainer } from '../injector';\r\nimport { InternalCoreModule } from '../injector/internal-core-module/internal-core-module';\r\nimport { Module } from '../injector/module';\r\nimport {\r\n  DebugReplFn,\r\n  GetReplFn,\r\n  HelpReplFn,\r\n  MethodsReplFn,\r\n  ResolveReplFn,\r\n  SelectReplFn,\r\n} from './native-functions';\r\nimport { ReplFunction } from './repl-function';\r\nimport type { ReplFunctionClass } from './repl.interfaces';\r\n\r\ntype ModuleKey = string;\r\nexport type ModuleDebugEntry = {\r\n  controllers: Record<string, InjectionToken>;\r\n  providers: Record<string, InjectionToken>;\r\n};\r\n\r\ntype ReplScope = Record<string, any>;\r\n\r\nexport class ReplContext {\r\n  public readonly logger = new Logger(ReplContext.name);\r\n  public debugRegistry: Record<ModuleKey, ModuleDebugEntry> = {};\r\n  public readonly globalScope: ReplScope = Object.create(null);\r\n  public readonly nativeFunctions = new Map<\r\n    string,\r\n    InstanceType<ReplFunctionClass>\r\n  >();\r\n  private readonly container: NestContainer;\r\n\r\n  constructor(\r\n    public readonly app: INestApplicationContext,\r\n    nativeFunctionsClassRefs?: ReplFunctionClass[],\r\n  ) {\r\n    this.container = (app as any).container; // Using `any` because `app.container` is not public.\r\n\r\n    this.initializeContext();\r\n    this.initializeNativeFunctions(nativeFunctionsClassRefs || []);\r\n  }\r\n\r\n  public writeToStdout(text: string) {\r\n    process.stdout.write(text);\r\n  }\r\n\r\n  private initializeContext() {\r\n    const modules = this.container.getModules();\r\n\r\n    modules.forEach(moduleRef => {\r\n      let moduleName = moduleRef.metatype.name;\r\n      if (moduleName === InternalCoreModule.name) {\r\n        return;\r\n      }\r\n      if (this.globalScope[moduleName]) {\r\n        moduleName += ` (${moduleRef.token})`;\r\n      }\r\n\r\n      this.introspectCollection(moduleRef, moduleName, 'providers');\r\n      this.introspectCollection(moduleRef, moduleName, 'controllers');\r\n\r\n      // For in REPL auto-complete functionality\r\n      Object.defineProperty(this.globalScope, moduleName, {\r\n        value: moduleRef.metatype,\r\n        configurable: false,\r\n        enumerable: true,\r\n      });\r\n    });\r\n  }\r\n\r\n  private introspectCollection(\r\n    moduleRef: Module,\r\n    moduleKey: ModuleKey,\r\n    collection: keyof ModuleDebugEntry,\r\n  ) {\r\n    const moduleDebugEntry = {};\r\n    moduleRef[collection].forEach(({ token }) => {\r\n      const stringifiedToken = this.stringifyToken(token);\r\n      if (\r\n        stringifiedToken === ApplicationConfig.name ||\r\n        stringifiedToken === moduleRef.metatype.name\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      if (!this.globalScope[stringifiedToken]) {\r\n        // For in REPL auto-complete functionality\r\n        Object.defineProperty(this.globalScope, stringifiedToken, {\r\n          value: token,\r\n          configurable: false,\r\n          enumerable: true,\r\n        });\r\n      }\r\n\r\n      if (stringifiedToken === ModuleRef.name) {\r\n        return;\r\n      }\r\n\r\n      moduleDebugEntry[stringifiedToken] = token;\r\n    });\r\n\r\n    this.debugRegistry[moduleKey] = {\r\n      ...this.debugRegistry?.[moduleKey],\r\n      [collection]: moduleDebugEntry,\r\n    };\r\n  }\r\n\r\n  private stringifyToken(token: unknown): string {\r\n    return typeof token !== 'string'\r\n      ? typeof token === 'function'\r\n        ? token.name\r\n        : token?.toString()\r\n      : `\"${token}\"`;\r\n  }\r\n\r\n  private addNativeFunction(\r\n    NativeFunctionRef: ReplFunctionClass,\r\n  ): InstanceType<ReplFunctionClass>[] {\r\n    const nativeFunction = new NativeFunctionRef(this);\r\n    const nativeFunctions = [nativeFunction];\r\n\r\n    this.nativeFunctions.set(nativeFunction.fnDefinition.name, nativeFunction);\r\n\r\n    nativeFunction.fnDefinition.aliases?.forEach(aliasName => {\r\n      const aliasNativeFunction: InstanceType<ReplFunctionClass> =\r\n        Object.create(nativeFunction);\r\n      aliasNativeFunction.fnDefinition = {\r\n        name: aliasName,\r\n        description: aliasNativeFunction.fnDefinition.description,\r\n        signature: aliasNativeFunction.fnDefinition.signature,\r\n      };\r\n      this.nativeFunctions.set(aliasName, aliasNativeFunction);\r\n      nativeFunctions.push(aliasNativeFunction);\r\n    });\r\n\r\n    return nativeFunctions;\r\n  }\r\n\r\n  private registerFunctionIntoGlobalScope(\r\n    nativeFunction: InstanceType<ReplFunctionClass>,\r\n  ) {\r\n    // Bind the method to REPL's context:\r\n    this.globalScope[nativeFunction.fnDefinition.name] =\r\n      nativeFunction.action.bind(nativeFunction);\r\n\r\n    // Load the help trigger as a `help` getter on each native function:\r\n    const functionBoundRef: ReplFunction['action'] =\r\n      this.globalScope[nativeFunction.fnDefinition.name];\r\n    Object.defineProperty(functionBoundRef, 'help', {\r\n      enumerable: false,\r\n      configurable: false,\r\n      get: () =>\r\n        // Dynamically builds the help message as will unlikely to be called\r\n        // several times.\r\n        this.writeToStdout(nativeFunction.makeHelpMessage()),\r\n    });\r\n  }\r\n\r\n  private initializeNativeFunctions(\r\n    nativeFunctionsClassRefs: ReplFunctionClass[],\r\n  ): void {\r\n    const builtInFunctionsClassRefs: ReplFunctionClass[] = [\r\n      HelpReplFn,\r\n      GetReplFn,\r\n      ResolveReplFn,\r\n      SelectReplFn,\r\n      DebugReplFn,\r\n      MethodsReplFn,\r\n    ];\r\n\r\n    builtInFunctionsClassRefs\r\n      .concat(nativeFunctionsClassRefs)\r\n      .forEach(NativeFunction => {\r\n        const nativeFunctions = this.addNativeFunction(NativeFunction);\r\n        nativeFunctions.forEach(nativeFunction => {\r\n          this.registerFunctionIntoGlobalScope(nativeFunction);\r\n        });\r\n      });\r\n  }\r\n}\r\n"]}