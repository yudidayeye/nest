{"version":3,"file":"methods-repl-fn.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["repl/native-functions/methods-repl-fn.ts"],"names":[],"mappings":";;;AACA,0EAA2D;AAC3D,6DAAyD;AACzD,oDAAgD;AAGhD,MAAa,aAAc,SAAQ,4BAAY;IAA/C;;QACS,iBAAY,GAAqB;YACtC,IAAI,EAAE,SAAS;YACf,WAAW,EACT,yEAAyE;YAC3E,SAAS,EAAE,oCAAoC;SAChD,CAAC;QAEe,oBAAe,GAAG,IAAI,kCAAe,EAAE,CAAC;IAiB3D,CAAC;IAfC,MAAM,CAAC,KAA6B;QAClC,MAAM,KAAK,GACT,OAAO,KAAK,KAAK,UAAU;YACzB,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAChD,CAAC,CAAC,KAAK,EAAE,SAAS,CAAC;QAEvB,MAAM,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;QAE9D,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC7B,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,GAAG,qBAAG,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QACrD,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,CAC3B,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,IAAI,qBAAG,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,UAAU,IAAI,CAAC,CAC9D,CAAC;QACF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;CACF;AAzBD,sCAyBC","sourcesContent":["import type { Type } from '@nestjs/common';\r\nimport { clc } from '@nestjs/common/utils/cli-colors.util';\r\nimport { MetadataScanner } from '../../metadata-scanner';\r\nimport { ReplFunction } from '../repl-function';\r\nimport type { ReplFnDefinition } from '../repl.interfaces';\r\n\r\nexport class MethodsReplFn extends ReplFunction {\r\n  public fnDefinition: ReplFnDefinition = {\r\n    name: 'methods',\r\n    description:\r\n      'Display all public methods available on a given provider or controller.',\r\n    signature: '(token: ClassRef | string) => void',\r\n  };\r\n\r\n  private readonly metadataScanner = new MetadataScanner();\r\n\r\n  action(token: Type<unknown> | string): void {\r\n    const proto =\r\n      typeof token !== 'function'\r\n        ? Object.getPrototypeOf(this.ctx.app.get(token))\r\n        : token?.prototype;\r\n\r\n    const methods = this.metadataScanner.getAllMethodNames(proto);\r\n\r\n    this.ctx.writeToStdout('\\n');\r\n    this.ctx.writeToStdout(`${clc.green('Methods')}:\\n`);\r\n    methods.forEach(methodName =>\r\n      this.ctx.writeToStdout(` ${clc.yellow('â—»')} ${methodName}\\n`),\r\n    );\r\n    this.ctx.writeToStdout('\\n');\r\n  }\r\n}\r\n"]}