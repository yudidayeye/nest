{"version":3,"file":"debug-repl-fn.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["repl/native-functions/debug-repl-fn.ts"],"names":[],"mappings":";;;AACA,0EAA2D;AAC3D,oDAAgD;AAIhD,MAAa,WAAY,SAAQ,4BAAY;IAA7C;;QACS,iBAAY,GAAqB;YACtC,IAAI,EAAE,OAAO;YACb,WAAW,EACT,iNAAiN;YACnN,SAAS,EAAE,yCAAyC;SACrD,CAAC;IAiDJ,CAAC;IA/CC,MAAM,CAAC,SAAkC;QACvC,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAE7B,IAAI,SAAS,EAAE;YACb,MAAM,KAAK,GACT,OAAO,SAAS,KAAK,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC;YAC/D,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAClD,IAAI,CAAC,WAAW,EAAE;gBAChB,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CACtB,IAAI,KAAK,8CAA8C,CACxD,CAAC;aACH;YACD,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;SACjD;aAAM;YACL,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;gBACtD,IAAI,CAAC,sBAAsB,CACzB,SAAS,EACT,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,CAAC,CAClC,CAAC;YACJ,CAAC,CAAC,CAAC;SACJ;QACD,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IAEO,sBAAsB,CAC5B,UAAkB,EAClB,gBAAkC;QAElC,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,GAAG,qBAAG,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QACtD,IAAI,CAAC,eAAe,CAAC,aAAa,EAAE,gBAAgB,CAAC,aAAa,CAAC,CAAC,CAAC;QACrE,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,gBAAgB,CAAC,WAAW,CAAC,CAAC,CAAC;IACnE,CAAC;IAEO,eAAe,CACrB,KAAa,EACb,eAA+C;QAE/C,MAAM,iBAAiB,GAAG,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACvD,IAAI,iBAAiB,CAAC,MAAM,IAAI,CAAC,EAAE;YACjC,OAAO;SACR;QAED,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,IAAI,qBAAG,CAAC,MAAM,CAAC,KAAK,KAAK,EAAE,CAAC,KAAK,CAAC,CAAC;QAC1D,iBAAiB,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CACnC,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,KAAK,qBAAG,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,QAAQ,IAAI,CAAC,CAC5D,CAAC;IACJ,CAAC;CACF;AAvDD,kCAuDC","sourcesContent":["import type { Type, InjectionToken } from '@nestjs/common';\r\nimport { clc } from '@nestjs/common/utils/cli-colors.util';\r\nimport { ReplFunction } from '../repl-function';\r\nimport type { ModuleDebugEntry } from '../repl-context';\r\nimport type { ReplFnDefinition } from '../repl.interfaces';\r\n\r\nexport class DebugReplFn extends ReplFunction {\r\n  public fnDefinition: ReplFnDefinition = {\r\n    name: 'debug',\r\n    description:\r\n      'Print all registered modules as a list together with their controllers and providers.\\nIf the argument is passed in, for example, \"debug(MyModule)\" then it will only print components of this specific module.',\r\n    signature: '(moduleCls?: ClassRef | string) => void',\r\n  };\r\n\r\n  action(moduleCls?: Type<unknown> | string): void {\r\n    this.ctx.writeToStdout('\\n');\r\n\r\n    if (moduleCls) {\r\n      const token =\r\n        typeof moduleCls === 'function' ? moduleCls.name : moduleCls;\r\n      const moduleEntry = this.ctx.debugRegistry[token];\r\n      if (!moduleEntry) {\r\n        return this.logger.error(\r\n          `\"${token}\" has not been found in the modules registry`,\r\n        );\r\n      }\r\n      this.printCtrlsAndProviders(token, moduleEntry);\r\n    } else {\r\n      Object.keys(this.ctx.debugRegistry).forEach(moduleKey => {\r\n        this.printCtrlsAndProviders(\r\n          moduleKey,\r\n          this.ctx.debugRegistry[moduleKey],\r\n        );\r\n      });\r\n    }\r\n    this.ctx.writeToStdout('\\n');\r\n  }\r\n\r\n  private printCtrlsAndProviders(\r\n    moduleName: string,\r\n    moduleDebugEntry: ModuleDebugEntry,\r\n  ) {\r\n    this.ctx.writeToStdout(`${clc.green(moduleName)}:\\n`);\r\n    this.printCollection('controllers', moduleDebugEntry['controllers']);\r\n    this.printCollection('providers', moduleDebugEntry['providers']);\r\n  }\r\n\r\n  private printCollection(\r\n    title: string,\r\n    collectionValue: Record<string, InjectionToken>,\r\n  ) {\r\n    const collectionEntries = Object.keys(collectionValue);\r\n    if (collectionEntries.length <= 0) {\r\n      return;\r\n    }\r\n\r\n    this.ctx.writeToStdout(` ${clc.yellow(`- ${title}`)}:\\n`);\r\n    collectionEntries.forEach(provider =>\r\n      this.ctx.writeToStdout(`  ${clc.green('â—»')} ${provider}\\n`),\r\n    );\r\n  }\r\n}\r\n"]}