{"version":3,"file":"injector.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["injector/injector.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  InjectionToken,\r\n  Logger,\r\n  LoggerService,\r\n  OptionalFactoryDependency,\r\n} from '@nestjs/common';\r\nimport {\r\n  OPTIONAL_DEPS_METADATA,\r\n  OPTIONAL_PROPERTY_DEPS_METADATA,\r\n  PARAMTYPES_METADATA,\r\n  PROPERTY_DEPS_METADATA,\r\n  SELF_DECLARED_DEPS_METADATA,\r\n} from '@nestjs/common/constants';\r\nimport { Controller, Injectable, Type } from '@nestjs/common/interfaces';\r\nimport { clc } from '@nestjs/common/utils/cli-colors.util';\r\nimport {\r\n  isFunction,\r\n  isNil,\r\n  isObject,\r\n  isString,\r\n  isSymbol,\r\n  isUndefined,\r\n} from '@nestjs/common/utils/shared.utils';\r\nimport { iterate } from 'iterare';\r\nimport { performance } from 'perf_hooks';\r\nimport { CircularDependencyException } from '../errors/exceptions';\r\nimport { RuntimeException } from '../errors/exceptions/runtime.exception';\r\nimport { UndefinedDependencyException } from '../errors/exceptions/undefined-dependency.exception';\r\nimport { UnknownDependenciesException } from '../errors/exceptions/unknown-dependencies.exception';\r\nimport { STATIC_CONTEXT } from './constants';\r\nimport { INQUIRER } from './inquirer';\r\nimport {\r\n  ContextId,\r\n  InstancePerContext,\r\n  InstanceWrapper,\r\n  PropertyMetadata,\r\n} from './instance-wrapper';\r\nimport { Module } from './module';\r\nimport { SettlementSignal } from './settlement-signal';\r\n\r\n/**\r\n * The type of an injectable dependency\r\n */\r\nexport type InjectorDependency = InjectionToken;\r\n\r\n/**\r\n * The property-based dependency\r\n */\r\nexport interface PropertyDependency {\r\n  key: symbol | string;\r\n  name: InjectorDependency;\r\n  isOptional?: boolean;\r\n  instance?: any;\r\n}\r\n\r\n/**\r\n * Context of a dependency which gets injected by\r\n * the injector\r\n */\r\nexport interface InjectorDependencyContext {\r\n  /**\r\n   * The name of the property key (property-based injection)\r\n   */\r\n  key?: string | symbol;\r\n  /**\r\n   * The function itself, the name of the function, or injection token.\r\n   */\r\n  name?: Function | string | symbol;\r\n  /**\r\n   * The index of the dependency which gets injected\r\n   * from the dependencies array\r\n   */\r\n  index?: number;\r\n  /**\r\n   * The dependency array which gets injected\r\n   */\r\n  dependencies?: InjectorDependency[];\r\n}\r\n\r\nexport class Injector {\r\n  private logger: LoggerService = new Logger('InjectorLogger');\r\n\r\n  constructor(private readonly options?: { preview: boolean }) {}\r\n\r\n  public loadPrototype<T>(\r\n    { token }: InstanceWrapper<T>,\r\n    collection: Map<InjectionToken, InstanceWrapper<T>>,\r\n    contextId = STATIC_CONTEXT,\r\n  ) {\r\n    if (!collection) {\r\n      return;\r\n    }\r\n    const target = collection.get(token);\r\n    const instance = target.createPrototype(contextId);\r\n    if (instance) {\r\n      const wrapper = new InstanceWrapper({\r\n        ...target,\r\n        instance,\r\n      });\r\n      collection.set(token, wrapper);\r\n    }\r\n  }\r\n\r\n  public async loadInstance<T>(\r\n    wrapper: InstanceWrapper<T>,\r\n    collection: Map<InjectionToken, InstanceWrapper>,\r\n    moduleRef: Module,\r\n    contextId = STATIC_CONTEXT,\r\n    inquirer?: InstanceWrapper,\r\n  ) {\r\n    const inquirerId = this.getInquirerId(inquirer);\r\n    const instanceHost = wrapper.getInstanceByContextId(\r\n      this.getContextId(contextId, wrapper),\r\n      inquirerId,\r\n    );\r\n\r\n    if (instanceHost.isPending) {\r\n      const settlementSignal = wrapper.settlementSignal;\r\n      if (inquirer && settlementSignal?.isCycle(inquirer.id)) {\r\n        throw new CircularDependencyException(`\"${wrapper.name}\"`);\r\n      }\r\n\r\n      return instanceHost.donePromise.then((err?: unknown) => {\r\n        if (err) {\r\n          throw err;\r\n        }\r\n      });\r\n    }\r\n\r\n    const settlementSignal = this.applySettlementSignal(instanceHost, wrapper);\r\n    const token = wrapper.token || wrapper.name;\r\n\r\n    const { inject } = wrapper;\r\n    const targetWrapper = collection.get(token);\r\n    if (isUndefined(targetWrapper)) {\r\n      throw new RuntimeException();\r\n    }\r\n    if (instanceHost.isResolved) {\r\n      return settlementSignal.complete();\r\n    }\r\n    try {\r\n      const t0 = this.getNowTimestamp();\r\n      const callback = async (instances: unknown[]) => {\r\n        const properties = await this.resolveProperties(\r\n          wrapper,\r\n          moduleRef,\r\n          inject as InjectionToken[],\r\n          contextId,\r\n          wrapper,\r\n          inquirer,\r\n        );\r\n        const instance = await this.instantiateClass(\r\n          instances,\r\n          wrapper,\r\n          targetWrapper,\r\n          contextId,\r\n          inquirer,\r\n        );\r\n        this.applyProperties(instance, properties);\r\n        wrapper.initTime = this.getNowTimestamp() - t0;\r\n        settlementSignal.complete();\r\n      };\r\n      await this.resolveConstructorParams<T>(\r\n        wrapper,\r\n        moduleRef,\r\n        inject as InjectionToken[],\r\n        callback,\r\n        contextId,\r\n        wrapper,\r\n        inquirer,\r\n      );\r\n    } catch (err) {\r\n      settlementSignal.error(err);\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  public async loadMiddleware(\r\n    wrapper: InstanceWrapper,\r\n    collection: Map<InjectionToken, InstanceWrapper>,\r\n    moduleRef: Module,\r\n    contextId = STATIC_CONTEXT,\r\n    inquirer?: InstanceWrapper,\r\n  ) {\r\n    const { metatype, token } = wrapper;\r\n    const targetWrapper = collection.get(token);\r\n    if (!isUndefined(targetWrapper.instance)) {\r\n      return;\r\n    }\r\n    targetWrapper.instance = Object.create(metatype.prototype);\r\n    await this.loadInstance(\r\n      wrapper,\r\n      collection,\r\n      moduleRef,\r\n      contextId,\r\n      inquirer || wrapper,\r\n    );\r\n  }\r\n\r\n  public async loadController(\r\n    wrapper: InstanceWrapper<Controller>,\r\n    moduleRef: Module,\r\n    contextId = STATIC_CONTEXT,\r\n  ) {\r\n    const controllers = moduleRef.controllers;\r\n    await this.loadInstance<Controller>(\r\n      wrapper,\r\n      controllers,\r\n      moduleRef,\r\n      contextId,\r\n      wrapper,\r\n    );\r\n    await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\r\n  }\r\n\r\n  public async loadInjectable<T = any>(\r\n    wrapper: InstanceWrapper<T>,\r\n    moduleRef: Module,\r\n    contextId = STATIC_CONTEXT,\r\n    inquirer?: InstanceWrapper,\r\n  ) {\r\n    const injectables = moduleRef.injectables;\r\n    await this.loadInstance<T>(\r\n      wrapper,\r\n      injectables,\r\n      moduleRef,\r\n      contextId,\r\n      inquirer,\r\n    );\r\n  }\r\n\r\n  public async loadProvider(\r\n    wrapper: InstanceWrapper<Injectable>,\r\n    moduleRef: Module,\r\n    contextId = STATIC_CONTEXT,\r\n    inquirer?: InstanceWrapper,\r\n  ) {\r\n    const providers = moduleRef.providers;\r\n    await this.loadInstance<Injectable>(\r\n      wrapper,\r\n      providers,\r\n      moduleRef,\r\n      contextId,\r\n      inquirer,\r\n    );\r\n    await this.loadEnhancersPerContext(wrapper, contextId, wrapper);\r\n  }\r\n\r\n  public applySettlementSignal<T>(\r\n    instancePerContext: InstancePerContext<T>,\r\n    host: InstanceWrapper<T>,\r\n  ) {\r\n    const settlementSignal = new SettlementSignal();\r\n    instancePerContext.donePromise = settlementSignal.asPromise();\r\n    instancePerContext.isPending = true;\r\n    host.settlementSignal = settlementSignal;\r\n\r\n    return settlementSignal;\r\n  }\r\n\r\n  public async resolveConstructorParams<T>(\r\n    wrapper: InstanceWrapper<T>,\r\n    moduleRef: Module,\r\n    inject: InjectorDependency[],\r\n    callback: (args: unknown[]) => void | Promise<void>,\r\n    contextId = STATIC_CONTEXT,\r\n    inquirer?: InstanceWrapper,\r\n    parentInquirer?: InstanceWrapper,\r\n  ) {\r\n    let inquirerId = this.getInquirerId(inquirer);\r\n    const metadata = wrapper.getCtorMetadata();\r\n\r\n    if (metadata && contextId !== STATIC_CONTEXT) {\r\n      const deps = await this.loadCtorMetadata(\r\n        metadata,\r\n        contextId,\r\n        inquirer,\r\n        parentInquirer,\r\n      );\r\n      return callback(deps);\r\n    }\r\n\r\n    const isFactoryProvider = !isNil(inject);\r\n    const [dependencies, optionalDependenciesIds] = isFactoryProvider\r\n      ? this.getFactoryProviderDependencies(wrapper)\r\n      : this.getClassDependencies(wrapper);\r\n\r\n    let isResolved = true;\r\n    const resolveParam = async (param: unknown, index: number) => {\r\n      try {\r\n        if (this.isInquirer(param, parentInquirer)) {\r\n          return parentInquirer && parentInquirer.instance;\r\n        }\r\n        if (inquirer?.isTransient && parentInquirer) {\r\n          inquirer = parentInquirer;\r\n          inquirerId = this.getInquirerId(parentInquirer);\r\n        }\r\n        const paramWrapper = await this.resolveSingleParam<T>(\r\n          wrapper,\r\n          param,\r\n          { index, dependencies },\r\n          moduleRef,\r\n          contextId,\r\n          inquirer,\r\n          index,\r\n        );\r\n        const instanceHost = paramWrapper.getInstanceByContextId(\r\n          this.getContextId(contextId, paramWrapper),\r\n          inquirerId,\r\n        );\r\n        if (!instanceHost.isResolved && !paramWrapper.forwardRef) {\r\n          isResolved = false;\r\n        }\r\n        return instanceHost?.instance;\r\n      } catch (err) {\r\n        const isOptional = optionalDependenciesIds.includes(index);\r\n        if (!isOptional) {\r\n          throw err;\r\n        }\r\n        return undefined;\r\n      }\r\n    };\r\n    const instances = await Promise.all(dependencies.map(resolveParam));\r\n    isResolved && (await callback(instances));\r\n  }\r\n\r\n  public getClassDependencies<T>(\r\n    wrapper: InstanceWrapper<T>,\r\n  ): [InjectorDependency[], number[]] {\r\n    const ctorRef = wrapper.metatype as Type<any>;\r\n    return [\r\n      this.reflectConstructorParams(ctorRef),\r\n      this.reflectOptionalParams(ctorRef),\r\n    ];\r\n  }\r\n\r\n  public getFactoryProviderDependencies<T>(\r\n    wrapper: InstanceWrapper<T>,\r\n  ): [InjectorDependency[], number[]] {\r\n    const optionalDependenciesIds = [];\r\n    const isOptionalFactoryDep = (\r\n      item: InjectionToken | OptionalFactoryDependency,\r\n    ): item is OptionalFactoryDependency =>\r\n      !isUndefined((item as OptionalFactoryDependency).token) &&\r\n      !isUndefined((item as OptionalFactoryDependency).optional);\r\n\r\n    const mapFactoryProviderInjectArray = (\r\n      item: InjectionToken | OptionalFactoryDependency,\r\n      index: number,\r\n    ): InjectionToken => {\r\n      if (typeof item !== 'object') {\r\n        return item;\r\n      }\r\n      if (isOptionalFactoryDep(item)) {\r\n        if (item.optional) {\r\n          optionalDependenciesIds.push(index);\r\n        }\r\n        return item?.token;\r\n      }\r\n      return item;\r\n    };\r\n    return [\r\n      wrapper.inject?.map?.(mapFactoryProviderInjectArray),\r\n      optionalDependenciesIds,\r\n    ];\r\n  }\r\n\r\n  public reflectConstructorParams<T>(type: Type<T>): any[] {\r\n    const paramtypes = [\r\n      ...(Reflect.getMetadata(PARAMTYPES_METADATA, type) || []),\r\n    ];\r\n    const selfParams = this.reflectSelfParams<T>(type);\r\n\r\n    selfParams.forEach(({ index, param }) => (paramtypes[index] = param));\r\n    return paramtypes;\r\n  }\r\n\r\n  public reflectOptionalParams<T>(type: Type<T>): any[] {\r\n    return Reflect.getMetadata(OPTIONAL_DEPS_METADATA, type) || [];\r\n  }\r\n\r\n  public reflectSelfParams<T>(type: Type<T>): any[] {\r\n    return Reflect.getMetadata(SELF_DECLARED_DEPS_METADATA, type) || [];\r\n  }\r\n\r\n  public async resolveSingleParam<T>(\r\n    wrapper: InstanceWrapper<T>,\r\n    param: Type<any> | string | symbol | any,\r\n    dependencyContext: InjectorDependencyContext,\r\n    moduleRef: Module,\r\n    contextId = STATIC_CONTEXT,\r\n    inquirer?: InstanceWrapper,\r\n    keyOrIndex?: symbol | string | number,\r\n  ) {\r\n    if (isUndefined(param)) {\r\n      this.logger.log(\r\n        'Nest encountered an undefined dependency. This may be due to a circular import or a missing dependency declaration.',\r\n      );\r\n      throw new UndefinedDependencyException(\r\n        wrapper.name,\r\n        dependencyContext,\r\n        moduleRef,\r\n      );\r\n    }\r\n    const token = this.resolveParamToken(wrapper, param);\r\n    return this.resolveComponentInstance<T>(\r\n      moduleRef,\r\n      token,\r\n      dependencyContext,\r\n      wrapper,\r\n      contextId,\r\n      inquirer,\r\n      keyOrIndex,\r\n    );\r\n  }\r\n\r\n  public resolveParamToken<T>(\r\n    wrapper: InstanceWrapper<T>,\r\n    param: Type<any> | string | symbol | any,\r\n  ) {\r\n    if (!param.forwardRef) {\r\n      return param;\r\n    }\r\n    wrapper.forwardRef = true;\r\n    return param.forwardRef();\r\n  }\r\n\r\n  public async resolveComponentInstance<T>(\r\n    moduleRef: Module,\r\n    token: InjectionToken,\r\n    dependencyContext: InjectorDependencyContext,\r\n    wrapper: InstanceWrapper<T>,\r\n    contextId = STATIC_CONTEXT,\r\n    inquirer?: InstanceWrapper,\r\n    keyOrIndex?: symbol | string | number,\r\n  ): Promise<InstanceWrapper> {\r\n    this.printResolvingDependenciesLog(token, inquirer);\r\n    this.printLookingForProviderLog(token, moduleRef);\r\n    const providers = moduleRef.providers;\r\n    const instanceWrapper = await this.lookupComponent(\r\n      providers,\r\n      moduleRef,\r\n      { ...dependencyContext, name: token },\r\n      wrapper,\r\n      contextId,\r\n      inquirer,\r\n      keyOrIndex,\r\n    );\r\n\r\n    return this.resolveComponentHost(\r\n      moduleRef,\r\n      instanceWrapper,\r\n      contextId,\r\n      inquirer,\r\n    );\r\n  }\r\n\r\n  public async resolveComponentHost<T>(\r\n    moduleRef: Module,\r\n    instanceWrapper: InstanceWrapper<T | Promise<T>>,\r\n    contextId = STATIC_CONTEXT,\r\n    inquirer?: InstanceWrapper,\r\n  ): Promise<InstanceWrapper> {\r\n    const inquirerId = this.getInquirerId(inquirer);\r\n    const instanceHost = instanceWrapper.getInstanceByContextId(\r\n      this.getContextId(contextId, instanceWrapper),\r\n      inquirerId,\r\n    );\r\n    if (!instanceHost.isResolved && !instanceWrapper.forwardRef) {\r\n      inquirer?.settlementSignal?.insertRef(instanceWrapper.id);\r\n\r\n      await this.loadProvider(\r\n        instanceWrapper,\r\n        instanceWrapper.host ?? moduleRef,\r\n        contextId,\r\n        inquirer,\r\n      );\r\n    } else if (\r\n      !instanceHost.isResolved &&\r\n      instanceWrapper.forwardRef &&\r\n      (contextId !== STATIC_CONTEXT || !!inquirerId)\r\n    ) {\r\n      /**\r\n       * When circular dependency has been detected between\r\n       * either request/transient providers, we have to asynchronously\r\n       * resolve instance host for a specific contextId or inquirer, to ensure\r\n       * that eventual lazily created instance will be merged with the prototype\r\n       * instantiated beforehand.\r\n       */\r\n      instanceHost.donePromise &&\r\n        instanceHost.donePromise.then(() =>\r\n          this.loadProvider(instanceWrapper, moduleRef, contextId, inquirer),\r\n        );\r\n    }\r\n    if (instanceWrapper.async) {\r\n      const host = instanceWrapper.getInstanceByContextId(\r\n        this.getContextId(contextId, instanceWrapper),\r\n        inquirerId,\r\n      );\r\n      host.instance = await host.instance;\r\n      instanceWrapper.setInstanceByContextId(contextId, host, inquirerId);\r\n    }\r\n    return instanceWrapper;\r\n  }\r\n\r\n  public async lookupComponent<T = any>(\r\n    providers: Map<Function | string | symbol, InstanceWrapper>,\r\n    moduleRef: Module,\r\n    dependencyContext: InjectorDependencyContext,\r\n    wrapper: InstanceWrapper<T>,\r\n    contextId = STATIC_CONTEXT,\r\n    inquirer?: InstanceWrapper,\r\n    keyOrIndex?: symbol | string | number,\r\n  ): Promise<InstanceWrapper<T>> {\r\n    const token = wrapper.token || wrapper.name;\r\n    const { name } = dependencyContext;\r\n    if (wrapper && token === name) {\r\n      throw new UnknownDependenciesException(\r\n        wrapper.name,\r\n        dependencyContext,\r\n        moduleRef,\r\n        { id: wrapper.id },\r\n      );\r\n    }\r\n    if (providers.has(name)) {\r\n      const instanceWrapper = providers.get(name);\r\n      this.printFoundInModuleLog(name, moduleRef);\r\n      this.addDependencyMetadata(keyOrIndex, wrapper, instanceWrapper);\r\n      return instanceWrapper;\r\n    }\r\n    return this.lookupComponentInParentModules(\r\n      dependencyContext,\r\n      moduleRef,\r\n      wrapper,\r\n      contextId,\r\n      inquirer,\r\n      keyOrIndex,\r\n    );\r\n  }\r\n\r\n  public async lookupComponentInParentModules<T = any>(\r\n    dependencyContext: InjectorDependencyContext,\r\n    moduleRef: Module,\r\n    wrapper: InstanceWrapper<T>,\r\n    contextId = STATIC_CONTEXT,\r\n    inquirer?: InstanceWrapper,\r\n    keyOrIndex?: symbol | string | number,\r\n  ) {\r\n    const instanceWrapper = await this.lookupComponentInImports(\r\n      moduleRef,\r\n      dependencyContext.name,\r\n      wrapper,\r\n      [],\r\n      contextId,\r\n      inquirer,\r\n      keyOrIndex,\r\n    );\r\n    if (isNil(instanceWrapper)) {\r\n      throw new UnknownDependenciesException(\r\n        wrapper.name,\r\n        dependencyContext,\r\n        moduleRef,\r\n        { id: wrapper.id },\r\n      );\r\n    }\r\n    return instanceWrapper;\r\n  }\r\n\r\n  public async lookupComponentInImports(\r\n    moduleRef: Module,\r\n    name: InjectionToken,\r\n    wrapper: InstanceWrapper,\r\n    moduleRegistry: any[] = [],\r\n    contextId = STATIC_CONTEXT,\r\n    inquirer?: InstanceWrapper,\r\n    keyOrIndex?: symbol | string | number,\r\n    isTraversing?: boolean,\r\n  ): Promise<any> {\r\n    let instanceWrapperRef: InstanceWrapper = null;\r\n    const imports = moduleRef.imports || new Set<Module>();\r\n    const identity = (item: any) => item;\r\n\r\n    let children = [...imports.values()].filter(identity);\r\n    if (isTraversing) {\r\n      const contextModuleExports = moduleRef.exports;\r\n      children = children.filter(child =>\r\n        contextModuleExports.has(child.metatype),\r\n      );\r\n    }\r\n    for (const relatedModule of children) {\r\n      if (moduleRegistry.includes(relatedModule.id)) {\r\n        continue;\r\n      }\r\n      this.printLookingForProviderLog(name, relatedModule);\r\n      moduleRegistry.push(relatedModule.id);\r\n\r\n      const { providers, exports } = relatedModule;\r\n      if (!exports.has(name) || !providers.has(name)) {\r\n        const instanceRef = await this.lookupComponentInImports(\r\n          relatedModule,\r\n          name,\r\n          wrapper,\r\n          moduleRegistry,\r\n          contextId,\r\n          inquirer,\r\n          keyOrIndex,\r\n          true,\r\n        );\r\n        if (instanceRef) {\r\n          this.addDependencyMetadata(keyOrIndex, wrapper, instanceRef);\r\n          return instanceRef;\r\n        }\r\n        continue;\r\n      }\r\n      this.printFoundInModuleLog(name, relatedModule);\r\n      instanceWrapperRef = providers.get(name);\r\n      this.addDependencyMetadata(keyOrIndex, wrapper, instanceWrapperRef);\r\n\r\n      const inquirerId = this.getInquirerId(inquirer);\r\n      const instanceHost = instanceWrapperRef.getInstanceByContextId(\r\n        this.getContextId(contextId, instanceWrapperRef),\r\n        inquirerId,\r\n      );\r\n      if (!instanceHost.isResolved && !instanceWrapperRef.forwardRef) {\r\n        wrapper.settlementSignal?.insertRef(instanceWrapperRef.id);\r\n\r\n        await this.loadProvider(\r\n          instanceWrapperRef,\r\n          relatedModule,\r\n          contextId,\r\n          wrapper,\r\n        );\r\n        break;\r\n      }\r\n    }\r\n    return instanceWrapperRef;\r\n  }\r\n\r\n  public async resolveProperties<T>(\r\n    wrapper: InstanceWrapper<T>,\r\n    moduleRef: Module,\r\n    inject?: InjectorDependency[],\r\n    contextId = STATIC_CONTEXT,\r\n    inquirer?: InstanceWrapper,\r\n    parentInquirer?: InstanceWrapper,\r\n  ): Promise<PropertyDependency[]> {\r\n    if (!isNil(inject)) {\r\n      return [];\r\n    }\r\n    const metadata = wrapper.getPropertiesMetadata();\r\n    if (metadata && contextId !== STATIC_CONTEXT) {\r\n      return this.loadPropertiesMetadata(metadata, contextId, inquirer);\r\n    }\r\n    const properties = this.reflectProperties(wrapper.metatype as Type<any>);\r\n    const instances = await Promise.all(\r\n      properties.map(async (item: PropertyDependency) => {\r\n        try {\r\n          const dependencyContext = {\r\n            key: item.key,\r\n            name: item.name as Function | string | symbol,\r\n          };\r\n          if (this.isInquirer(item.name, parentInquirer)) {\r\n            return parentInquirer && parentInquirer.instance;\r\n          }\r\n          const paramWrapper = await this.resolveSingleParam<T>(\r\n            wrapper,\r\n            item.name,\r\n            dependencyContext,\r\n            moduleRef,\r\n            contextId,\r\n            inquirer,\r\n            item.key,\r\n          );\r\n          if (!paramWrapper) {\r\n            return undefined;\r\n          }\r\n          const inquirerId = this.getInquirerId(inquirer);\r\n          const instanceHost = paramWrapper.getInstanceByContextId(\r\n            this.getContextId(contextId, paramWrapper),\r\n            inquirerId,\r\n          );\r\n          return instanceHost.instance;\r\n        } catch (err) {\r\n          if (!item.isOptional) {\r\n            throw err;\r\n          }\r\n          return undefined;\r\n        }\r\n      }),\r\n    );\r\n    return properties.map((item: PropertyDependency, index: number) => ({\r\n      ...item,\r\n      instance: instances[index],\r\n    }));\r\n  }\r\n\r\n  public reflectProperties<T>(type: Type<T>): PropertyDependency[] {\r\n    const properties = Reflect.getMetadata(PROPERTY_DEPS_METADATA, type) || [];\r\n    const optionalKeys: string[] =\r\n      Reflect.getMetadata(OPTIONAL_PROPERTY_DEPS_METADATA, type) || [];\r\n\r\n    return properties.map((item: any) => ({\r\n      ...item,\r\n      name: item.type,\r\n      isOptional: optionalKeys.includes(item.key),\r\n    }));\r\n  }\r\n\r\n  public applyProperties<T = any>(\r\n    instance: T,\r\n    properties: PropertyDependency[],\r\n  ): void {\r\n    if (!isObject(instance)) {\r\n      return undefined;\r\n    }\r\n    iterate(properties)\r\n      .filter(item => !isNil(item.instance))\r\n      .forEach(item => (instance[item.key] = item.instance));\r\n  }\r\n\r\n  public async instantiateClass<T = any>(\r\n    instances: any[],\r\n    wrapper: InstanceWrapper,\r\n    targetMetatype: InstanceWrapper,\r\n    contextId = STATIC_CONTEXT,\r\n    inquirer?: InstanceWrapper,\r\n  ): Promise<T> {\r\n    const { metatype, inject } = wrapper;\r\n    const inquirerId = this.getInquirerId(inquirer);\r\n    const instanceHost = targetMetatype.getInstanceByContextId(\r\n      this.getContextId(contextId, targetMetatype),\r\n      inquirerId,\r\n    );\r\n    const isInContext =\r\n      wrapper.isStatic(contextId, inquirer) ||\r\n      wrapper.isInRequestScope(contextId, inquirer) ||\r\n      wrapper.isLazyTransient(contextId, inquirer) ||\r\n      wrapper.isExplicitlyRequested(contextId, inquirer);\r\n\r\n    if (this.options?.preview && !wrapper.host?.initOnPreview) {\r\n      instanceHost.isResolved = true;\r\n      return instanceHost.instance;\r\n    }\r\n\r\n    if (isNil(inject) && isInContext) {\r\n      instanceHost.instance = wrapper.forwardRef\r\n        ? Object.assign(\r\n            instanceHost.instance,\r\n            new (metatype as Type<any>)(...instances),\r\n          )\r\n        : new (metatype as Type<any>)(...instances);\r\n    } else if (isInContext) {\r\n      const factoryReturnValue = (targetMetatype.metatype as any as Function)(\r\n        ...instances,\r\n      );\r\n      instanceHost.instance = await factoryReturnValue;\r\n    }\r\n    instanceHost.isResolved = true;\r\n    return instanceHost.instance;\r\n  }\r\n\r\n  public async loadPerContext<T = any>(\r\n    instance: T,\r\n    moduleRef: Module,\r\n    collection: Map<InjectionToken, InstanceWrapper>,\r\n    ctx: ContextId,\r\n    wrapper?: InstanceWrapper,\r\n  ): Promise<T> {\r\n    if (!wrapper) {\r\n      const injectionToken = instance.constructor;\r\n      wrapper = collection.get(injectionToken);\r\n    }\r\n    await this.loadInstance(wrapper, collection, moduleRef, ctx, wrapper);\r\n    await this.loadEnhancersPerContext(wrapper, ctx, wrapper);\r\n\r\n    const host = wrapper.getInstanceByContextId(\r\n      this.getContextId(ctx, wrapper),\r\n      wrapper.id,\r\n    );\r\n    return host && (host.instance as T);\r\n  }\r\n\r\n  public async loadEnhancersPerContext(\r\n    wrapper: InstanceWrapper,\r\n    ctx: ContextId,\r\n    inquirer?: InstanceWrapper,\r\n  ) {\r\n    const enhancers = wrapper.getEnhancersMetadata() || [];\r\n    const loadEnhancer = (item: InstanceWrapper) => {\r\n      const hostModule = item.host;\r\n      return this.loadInstance(\r\n        item,\r\n        hostModule.injectables,\r\n        hostModule,\r\n        ctx,\r\n        inquirer,\r\n      );\r\n    };\r\n    await Promise.all(enhancers.map(loadEnhancer));\r\n  }\r\n\r\n  public async loadCtorMetadata(\r\n    metadata: InstanceWrapper<any>[],\r\n    contextId: ContextId,\r\n    inquirer?: InstanceWrapper,\r\n    parentInquirer?: InstanceWrapper,\r\n  ): Promise<any[]> {\r\n    const hosts: Array<InstanceWrapper<any> | undefined> = await Promise.all(\r\n      metadata.map(async item =>\r\n        this.resolveScopedComponentHost(\r\n          item,\r\n          contextId,\r\n          inquirer,\r\n          parentInquirer,\r\n        ),\r\n      ),\r\n    );\r\n    const inquirerId = this.getInquirerId(inquirer);\r\n    return hosts.map(\r\n      item =>\r\n        item?.getInstanceByContextId(\r\n          this.getContextId(contextId, item),\r\n          inquirerId,\r\n        ).instance,\r\n    );\r\n  }\r\n\r\n  public async loadPropertiesMetadata(\r\n    metadata: PropertyMetadata[],\r\n    contextId: ContextId,\r\n    inquirer?: InstanceWrapper,\r\n  ): Promise<PropertyDependency[]> {\r\n    const dependenciesHosts = await Promise.all(\r\n      metadata.map(async ({ wrapper: item, key }) => ({\r\n        key,\r\n        host: await this.resolveComponentHost(\r\n          item.host,\r\n          item,\r\n          contextId,\r\n          inquirer,\r\n        ),\r\n      })),\r\n    );\r\n    const inquirerId = this.getInquirerId(inquirer);\r\n    return dependenciesHosts.map(({ key, host }) => ({\r\n      key,\r\n      name: key,\r\n      instance: host.getInstanceByContextId(\r\n        this.getContextId(contextId, host),\r\n        inquirerId,\r\n      ).instance,\r\n    }));\r\n  }\r\n\r\n  private getInquirerId(inquirer: InstanceWrapper | undefined): string {\r\n    return inquirer && inquirer.id;\r\n  }\r\n\r\n  private resolveScopedComponentHost(\r\n    item: InstanceWrapper,\r\n    contextId: ContextId,\r\n    inquirer?: InstanceWrapper,\r\n    parentInquirer?: InstanceWrapper,\r\n  ) {\r\n    return this.isInquirerRequest(item, parentInquirer)\r\n      ? parentInquirer\r\n      : this.resolveComponentHost(item.host, item, contextId, inquirer);\r\n  }\r\n\r\n  private isInquirerRequest(\r\n    item: InstanceWrapper,\r\n    parentInquirer: InstanceWrapper | undefined,\r\n  ) {\r\n    return item.isTransient && item.name === INQUIRER && parentInquirer;\r\n  }\r\n\r\n  private isInquirer(\r\n    param: unknown,\r\n    parentInquirer: InstanceWrapper | undefined,\r\n  ) {\r\n    return param === INQUIRER && parentInquirer;\r\n  }\r\n\r\n  protected addDependencyMetadata(\r\n    keyOrIndex: symbol | string | number,\r\n    hostWrapper: InstanceWrapper,\r\n    instanceWrapper: InstanceWrapper,\r\n  ) {\r\n    if (isSymbol(keyOrIndex) || isString(keyOrIndex)) {\r\n      hostWrapper.addPropertiesMetadata(keyOrIndex, instanceWrapper);\r\n    } else {\r\n      hostWrapper.addCtorMetadata(keyOrIndex, instanceWrapper);\r\n    }\r\n  }\r\n\r\n  private getTokenName(token: InjectionToken): string {\r\n    return isFunction(token) ? (token as Function).name : token.toString();\r\n  }\r\n\r\n  private printResolvingDependenciesLog(\r\n    token: InjectionToken,\r\n    inquirer?: InstanceWrapper,\r\n  ): void {\r\n    if (!this.isDebugMode()) {\r\n      return;\r\n    }\r\n    const tokenName = this.getTokenName(token);\r\n    const dependentName =\r\n      (inquirer?.name && inquirer.name.toString?.()) ?? 'unknown';\r\n    const isAlias = dependentName === tokenName;\r\n\r\n    const messageToPrint = `Resolving dependency ${clc.cyanBright(\r\n      tokenName,\r\n    )}${clc.green(' in the ')}${clc.yellow(dependentName)}${clc.green(\r\n      ` provider ${isAlias ? '(alias)' : ''}`,\r\n    )}`;\r\n\r\n    this.logger.log(messageToPrint);\r\n  }\r\n\r\n  private printLookingForProviderLog(\r\n    token: InjectionToken,\r\n    moduleRef: Module,\r\n  ): void {\r\n    if (!this.isDebugMode()) {\r\n      return;\r\n    }\r\n    const tokenName = this.getTokenName(token);\r\n    const moduleRefName = moduleRef?.metatype?.name ?? 'unknown';\r\n    this.logger.log(\r\n      `Looking for ${clc.cyanBright(tokenName)}${clc.green(\r\n        ' in ',\r\n      )}${clc.magentaBright(moduleRefName)}`,\r\n    );\r\n  }\r\n\r\n  private printFoundInModuleLog(\r\n    token: InjectionToken,\r\n    moduleRef: Module,\r\n  ): void {\r\n    if (!this.isDebugMode()) {\r\n      return;\r\n    }\r\n    const tokenName = this.getTokenName(token);\r\n    const moduleRefName = moduleRef?.metatype?.name ?? 'unknown';\r\n    this.logger.log(\r\n      `Found ${clc.cyanBright(tokenName)}${clc.green(\r\n        ' in ',\r\n      )}${clc.magentaBright(moduleRefName)}`,\r\n    );\r\n  }\r\n\r\n  private isDebugMode(): boolean {\r\n    return !!process.env.NEST_DEBUG;\r\n  }\r\n\r\n  private getContextId(\r\n    contextId: ContextId,\r\n    instanceWrapper: InstanceWrapper,\r\n  ): ContextId {\r\n    return contextId.getParent\r\n      ? contextId.getParent({\r\n          token: instanceWrapper.token,\r\n          isTreeDurable: instanceWrapper.isDependencyTreeDurable(),\r\n        })\r\n      : contextId;\r\n  }\r\n\r\n  private getNowTimestamp() {\r\n    return performance.now();\r\n  }\r\n}\r\n"]}