{"version":3,"file":"provider-classifier.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["injector/helpers/provider-classifier.ts"],"names":[],"mappings":";;;AAMA,oEAAgE;AAEhE,SAAgB,eAAe,CAC7B,QAAkB;IAElB,OAAO,OAAO,CAAE,QAA6B,EAAE,QAAQ,CAAC,CAAC;AAC3D,CAAC;AAJD,0CAIC;AAED,SAAgB,eAAe,CAC7B,QAAkB;IAElB,MAAM,aAAa,GAAI,QAA0B,EAAE,QAAQ,CAAC;IAC5D,OAAO,CAAC,IAAA,0BAAW,EAAC,aAAa,CAAC,CAAC;AACrC,CAAC;AALD,0CAKC;AAED,SAAgB,iBAAiB,CAC/B,QAAkB;IAElB,OAAO,OAAO,CAAE,QAA4B,CAAC,UAAU,CAAC,CAAC;AAC3D,CAAC;AAJD,8CAIC","sourcesContent":["import {\r\n  ClassProvider,\r\n  FactoryProvider,\r\n  Provider,\r\n  ValueProvider,\r\n} from '@nestjs/common';\r\nimport { isUndefined } from '@nestjs/common/utils/shared.utils';\r\n\r\nexport function isClassProvider<T = any>(\r\n  provider: Provider,\r\n): provider is ClassProvider<T> {\r\n  return Boolean((provider as ClassProvider<T>)?.useClass);\r\n}\r\n\r\nexport function isValueProvider<T = any>(\r\n  provider: Provider,\r\n): provider is ValueProvider<T> {\r\n  const providerValue = (provider as ValueProvider)?.useValue;\r\n  return !isUndefined(providerValue);\r\n}\r\n\r\nexport function isFactoryProvider<T = any>(\r\n  provider: Provider,\r\n): provider is FactoryProvider<T> {\r\n  return Boolean((provider as FactoryProvider).useFactory);\r\n}\r\n"]}