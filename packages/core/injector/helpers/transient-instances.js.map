{"version":3,"file":"transient-instances.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["injector/helpers/transient-instances.ts"],"names":[],"mappings":";;;AACA,qCAAkC;AAGlC;;;GAGG;AACH,SAAgB,qBAAqB,CACnC,SAA8C;IAE9C,OAAO,IAAA,iBAAO,EAAC,SAAS,CAAC;SACtB,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,sBAAsB,EAAE,CAAC;SAC1D,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,2BAA2B,EAAE,CAAC;SAC5D,OAAO,EAAE;SACT,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;SACtB,GAAG,CAAC,CAAC,EAAE,QAAQ,EAAO,EAAE,EAAE,CAAC,QAAQ,CAAC;SACpC,OAAO,EAAuB,CAAC;AACpC,CAAC;AAVD,sDAUC;AAED;;;GAGG;AACH,SAAgB,wBAAwB,CACtC,SAA8C;IAE9C,OAAO,IAAA,iBAAO,EAAC,SAAS,CAAC;SACtB,MAAM,CACL,CAAC,CAAC,GAAG,EAAE,OAAO,CAAC,EAAE,EAAE,CACjB,OAAO,CAAC,sBAAsB,EAAE,IAAI,CAAC,OAAO,CAAC,WAAW,CAC3D;SACA,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,QAAQ,CAAC;SACtC,OAAO,EAAuB,CAAC;AACpC,CAAC;AAVD,4DAUC","sourcesContent":["import { InjectionToken } from '@nestjs/common';\r\nimport { iterate } from 'iterare';\r\nimport { InstanceWrapper } from '../instance-wrapper';\r\n\r\n/**\r\n * Returns the instances which are transient\r\n * @param instances The instances which should be checked whether they are transient\r\n */\r\nexport function getTransientInstances(\r\n  instances: [InjectionToken, InstanceWrapper][],\r\n): InstanceWrapper[] {\r\n  return iterate(instances)\r\n    .filter(([_, wrapper]) => wrapper.isDependencyTreeStatic())\r\n    .map(([_, wrapper]) => wrapper.getStaticTransientInstances())\r\n    .flatten()\r\n    .filter(item => !!item)\r\n    .map(({ instance }: any) => instance)\r\n    .toArray() as InstanceWrapper[];\r\n}\r\n\r\n/**\r\n * Returns the instances which are not transient\r\n * @param instances The instances which should be checked whether they are transient\r\n */\r\nexport function getNonTransientInstances(\r\n  instances: [InjectionToken, InstanceWrapper][],\r\n): InstanceWrapper[] {\r\n  return iterate(instances)\r\n    .filter(\r\n      ([key, wrapper]) =>\r\n        wrapper.isDependencyTreeStatic() && !wrapper.isTransient,\r\n    )\r\n    .map(([key, { instance }]) => instance)\r\n    .toArray() as InstanceWrapper[];\r\n}\r\n"]}