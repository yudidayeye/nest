{"version":3,"file":"module-token-factory.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["injector/module-token-factory.ts"],"names":[],"mappings":"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","sourcesContent":["import { DynamicModule } from '@nestjs/common';\r\nimport { Type } from '@nestjs/common/interfaces/type.interface';\r\nimport { randomStringGenerator } from '@nestjs/common/utils/random-string-generator.util';\r\nimport { isFunction, isSymbol } from '@nestjs/common/utils/shared.utils';\r\nimport { createHash } from 'crypto';\r\nimport stringify from 'fast-safe-stringify';\r\n\r\nconst CLASS_STR = 'class ';\r\nconst CLASS_STR_LEN = CLASS_STR.length;\r\n\r\nexport class ModuleTokenFactory {\r\n  private readonly moduleTokenCache = new Map<string, string>();\r\n  private readonly moduleIdsCache = new WeakMap<Type<unknown>, string>();\r\n\r\n  public create(\r\n    metatype: Type<unknown>,\r\n    dynamicModuleMetadata?: Partial<DynamicModule> | undefined,\r\n  ): string {\r\n    const moduleId = this.getModuleId(metatype);\r\n\r\n    if (!dynamicModuleMetadata) {\r\n      return this.getStaticModuleToken(moduleId, this.getModuleName(metatype));\r\n    }\r\n    const opaqueToken = {\r\n      id: moduleId,\r\n      module: this.getModuleName(metatype),\r\n      dynamic: dynamicModuleMetadata,\r\n    };\r\n    const opaqueTokenString = this.getStringifiedOpaqueToken(opaqueToken);\r\n\r\n    return this.hashString(opaqueTokenString);\r\n  }\r\n\r\n  public getStaticModuleToken(moduleId: string, moduleName: string): string {\r\n    const key = `${moduleId}_${moduleName}`;\r\n    if (this.moduleTokenCache.has(key)) {\r\n      return this.moduleTokenCache.get(key);\r\n    }\r\n\r\n    const hash = this.hashString(key);\r\n    this.moduleTokenCache.set(key, hash);\r\n    return hash;\r\n  }\r\n\r\n  public getStringifiedOpaqueToken(opaqueToken: object | undefined): string {\r\n    // Uses safeStringify instead of JSON.stringify to support circular dynamic modules\r\n    // The replacer function is also required in order to obtain real class names\r\n    // instead of the unified \"Function\" key\r\n    return opaqueToken ? stringify(opaqueToken, this.replacer) : '';\r\n  }\r\n\r\n  public getModuleId(metatype: Type<unknown>): string {\r\n    let moduleId = this.moduleIdsCache.get(metatype);\r\n    if (moduleId) {\r\n      return moduleId;\r\n    }\r\n    moduleId = randomStringGenerator();\r\n    this.moduleIdsCache.set(metatype, moduleId);\r\n    return moduleId;\r\n  }\r\n\r\n  public getModuleName(metatype: Type<any>): string {\r\n    return metatype.name;\r\n  }\r\n\r\n  private hashString(value: string): string {\r\n    return createHash('sha256').update(value).digest('hex');\r\n  }\r\n\r\n  private replacer(key: string, value: any) {\r\n    if (isFunction(value)) {\r\n      const funcAsString = value.toString();\r\n      const isClass = funcAsString.slice(0, CLASS_STR_LEN) === CLASS_STR;\r\n      if (isClass) {\r\n        return value.name;\r\n      }\r\n      return funcAsString;\r\n    }\r\n    if (isSymbol(value)) {\r\n      return value.toString();\r\n    }\r\n    return value;\r\n  }\r\n}\r\n"]}