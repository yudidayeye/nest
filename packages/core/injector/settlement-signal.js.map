{"version":3,"file":"settlement-signal.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["injector/settlement-signal.ts"],"names":[],"mappings":";;;AAAA;;;;GAIG;AACH,MAAa,gBAAgB;IAM3B;QALiB,UAAK,GAAG,IAAI,GAAG,EAAE,CAAC;QAG3B,cAAS,GAAG,KAAK,CAAC;QAGxB,IAAI,CAAC,cAAc,GAAG,IAAI,OAAO,CAAU,OAAO,CAAC,EAAE;YACnD,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QAC1B,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACI,QAAQ;QACb,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,QAAQ,EAAE,CAAC;IAClB,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,GAAY;QACvB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;IACrB,CAAC;IAED;;;OAGG;IACI,SAAS;QACd,OAAO,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;IAED;;;OAGG;IACI,SAAS,CAAC,SAAiB;QAChC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IAC5B,CAAC;IAED;;;;OAIG;IACI,OAAO,CAAC,SAAiB;QAC9B,OAAO,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IACtD,CAAC;CACF;AArDD,4CAqDC","sourcesContent":["/**\r\n * SettlementSignal is used to signal the resolution of a provider/instance.\r\n * Calling `complete` or `error` will resolve the promise returned by `asPromise`.\r\n * Can be used to detect circular dependencies.\r\n */\r\nexport class SettlementSignal {\r\n  private readonly _refs = new Set();\r\n  private readonly settledPromise: Promise<unknown>;\r\n  private settleFn!: (err?: unknown) => void;\r\n  private completed = false;\r\n\r\n  constructor() {\r\n    this.settledPromise = new Promise<unknown>(resolve => {\r\n      this.settleFn = resolve;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Resolves the promise returned by `asPromise`.\r\n   */\r\n  public complete() {\r\n    this.completed = true;\r\n    this.settleFn();\r\n  }\r\n\r\n  /**\r\n   * Rejects the promise returned by `asPromise` with the given error.\r\n   * @param err Error to reject the promise returned by `asPromise` with.\r\n   */\r\n  public error(err: unknown) {\r\n    this.completed = true;\r\n    this.settleFn(err);\r\n  }\r\n\r\n  /**\r\n   * Returns a promise that will be resolved when `complete` or `error` is called.\r\n   * @returns Promise that will be resolved when `complete` or `error` is called.\r\n   */\r\n  public asPromise() {\r\n    return this.settledPromise;\r\n  }\r\n\r\n  /**\r\n   * Inserts a wrapper id that the host of this signal depends on.\r\n   * @param wrapperId Wrapper id to insert.\r\n   */\r\n  public insertRef(wrapperId: string) {\r\n    this._refs.add(wrapperId);\r\n  }\r\n\r\n  /**\r\n   * Check if relationship is circular.\r\n   * @param wrapperId Wrapper id to check.\r\n   * @returns True if relationship is circular, false otherwise.\r\n   */\r\n  public isCycle(wrapperId: string) {\r\n    return !this.completed && this._refs.has(wrapperId);\r\n  }\r\n}\r\n"]}