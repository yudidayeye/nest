{"version":3,"file":"lazy-module-loader.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["injector/lazy-module-loader/lazy-module-loader.ts"],"names":[],"mappings":";;;AAIA,4DAAwD;AAGxD,8CAA0C;AAI1C,MAAa,gBAAgB;IAC3B,YACmB,mBAAwC,EACxC,cAA8B,EAC9B,cAA8B,EAC9B,gBAAkC,EAClC,eAAkC;QAJlC,wBAAmB,GAAnB,mBAAmB,CAAqB;QACxC,mBAAc,GAAd,cAAc,CAAgB;QAC9B,mBAAc,GAAd,cAAc,CAAgB;QAC9B,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,oBAAe,GAAf,eAAe,CAAmB;IAClD,CAAC;IAEG,KAAK,CAAC,IAAI,CACf,QAGiB,EACjB,QAAsC;QAEtC,IAAI,CAAC,2BAA2B,CAAC,QAAQ,CAAC,CAAC;QAE3C,MAAM,8BAA8B,GAAG,MAAM,QAAQ,EAAE,CAAC;QACxD,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,cAAc,CAAC;YACpE,gBAAgB,EAAE,8BAA8B;YAChD,SAAS,EAAE,IAAI,CAAC,eAAe;YAC/B,IAAI,EAAE,IAAI;SACX,CAAC,CAAC;QACH,IAAI,eAAe,CAAC,MAAM,KAAK,CAAC,EAAE;YAChC,4DAA4D;YAC5D,2DAA2D;YAC3D,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,OAAO,CACjD,8BAA8B,CAC/B,CAAC;YACF,MAAM,cAAc,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACxD,OAAO,cAAc,IAAI,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC;SAClE;QACD,MAAM,oBAAoB,GACxB,IAAI,CAAC,0BAA0B,CAAC,eAAe,CAAC,CAAC;QACnD,MAAM,IAAI,CAAC,mBAAmB,CAAC,0BAA0B,CACvD,oBAAoB,CACrB,CAAC;QACF,MAAM,IAAI,CAAC,cAAc,CAAC,6BAA6B,CACrD,oBAAoB,CACrB,CAAC;QACF,MAAM,CAAC,YAAY,CAAC,GAAG,eAAe,CAAC;QACvC,OAAO,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;IAC/C,CAAC;IAEO,2BAA2B,CAAC,QAAsC;QACxE,IAAI,QAAQ,EAAE,MAAM,KAAK,KAAK,EAAE;YAC9B,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,IAAI,4BAAY,EAAE,CAAC,CAAC;SACnD;IACH,CAAC;IAEO,0BAA0B,CAChC,eAAyB;QAEzB,eAAe,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,eAAe,CAAC,CAAC,CAAC;QACvD,OAAO,IAAI,GAAG,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;IAC/D,CAAC;IAEO,kBAAkB,CAAC,cAAsB;QAC/C,MAAM,wBAAwB,GAAG,cAAc,CAAC,gBAAgB,CAAC,sBAAS,CAAC,CAAC;QAC5E,OAAO,wBAAwB,CAAC,QAAQ,CAAC;IAC3C,CAAC;CACF;AA9DD,4CA8DC","sourcesContent":["import { DynamicModule, Type } from '@nestjs/common';\r\nimport { ModuleOverride } from '../../interfaces/module-override.interface';\r\nimport { DependenciesScanner } from '../../scanner';\r\nimport { ModuleCompiler } from '../compiler';\r\nimport { SilentLogger } from '../helpers/silent-logger';\r\nimport { InstanceLoader } from '../instance-loader';\r\nimport { Module } from '../module';\r\nimport { ModuleRef } from '../module-ref';\r\nimport { ModulesContainer } from '../modules-container';\r\nimport { LazyModuleLoaderLoadOptions } from './lazy-module-loader-options.interface';\r\n\r\nexport class LazyModuleLoader {\r\n  constructor(\r\n    private readonly dependenciesScanner: DependenciesScanner,\r\n    private readonly instanceLoader: InstanceLoader,\r\n    private readonly moduleCompiler: ModuleCompiler,\r\n    private readonly modulesContainer: ModulesContainer,\r\n    private readonly moduleOverrides?: ModuleOverride[],\r\n  ) {}\r\n\r\n  public async load(\r\n    loaderFn: () =>\r\n      | Promise<Type<unknown> | DynamicModule>\r\n      | Type<unknown>\r\n      | DynamicModule,\r\n    loadOpts?: LazyModuleLoaderLoadOptions,\r\n  ): Promise<ModuleRef> {\r\n    this.registerLoggerConfiguration(loadOpts);\r\n\r\n    const moduleClassOrDynamicDefinition = await loaderFn();\r\n    const moduleInstances = await this.dependenciesScanner.scanForModules({\r\n      moduleDefinition: moduleClassOrDynamicDefinition,\r\n      overrides: this.moduleOverrides,\r\n      lazy: true,\r\n    });\r\n    if (moduleInstances.length === 0) {\r\n      // The module has been loaded already. In this case, we must\r\n      // retrieve a module reference from the existing container.\r\n      const { token } = await this.moduleCompiler.compile(\r\n        moduleClassOrDynamicDefinition,\r\n      );\r\n      const moduleInstance = this.modulesContainer.get(token);\r\n      return moduleInstance && this.getTargetModuleRef(moduleInstance);\r\n    }\r\n    const lazyModulesContainer =\r\n      this.createLazyModulesContainer(moduleInstances);\r\n    await this.dependenciesScanner.scanModulesForDependencies(\r\n      lazyModulesContainer,\r\n    );\r\n    await this.instanceLoader.createInstancesOfDependencies(\r\n      lazyModulesContainer,\r\n    );\r\n    const [targetModule] = moduleInstances;\r\n    return this.getTargetModuleRef(targetModule);\r\n  }\r\n\r\n  private registerLoggerConfiguration(loadOpts?: LazyModuleLoaderLoadOptions) {\r\n    if (loadOpts?.logger === false) {\r\n      this.instanceLoader.setLogger(new SilentLogger());\r\n    }\r\n  }\r\n\r\n  private createLazyModulesContainer(\r\n    moduleInstances: Module[],\r\n  ): Map<string, Module> {\r\n    moduleInstances = Array.from(new Set(moduleInstances));\r\n    return new Map(moduleInstances.map(ref => [ref.token, ref]));\r\n  }\r\n\r\n  private getTargetModuleRef(moduleInstance: Module): ModuleRef {\r\n    const moduleRefInstanceWrapper = moduleInstance.getProviderByKey(ModuleRef);\r\n    return moduleRefInstanceWrapper.instance;\r\n  }\r\n}\r\n"]}