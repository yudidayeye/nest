{"version":3,"file":"instance-loader.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["injector/instance-loader.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger, LoggerService } from '@nestjs/common';\r\nimport { Controller } from '@nestjs/common/interfaces/controllers/controller.interface';\r\nimport { Injectable } from '@nestjs/common/interfaces/injectable.interface';\r\nimport { MODULE_INIT_MESSAGE } from '../helpers/messages';\r\nimport { GraphInspector } from '../inspector/graph-inspector';\r\nimport { NestContainer } from './container';\r\nimport { Injector } from './injector';\r\nimport { InternalCoreModule } from './internal-core-module/internal-core-module';\r\nimport { Module } from './module';\r\n\r\nexport class InstanceLoader<TInjector extends Injector = Injector> {\r\n  constructor(\r\n    protected readonly container: NestContainer,\r\n    protected readonly injector: TInjector,\r\n    protected readonly graphInspector: GraphInspector,\r\n    private logger: LoggerService = new Logger(InstanceLoader.name, {\r\n      timestamp: true,\r\n    }),\r\n  ) {}\r\n\r\n  public setLogger(logger: Logger) {\r\n    this.logger = logger;\r\n  }\r\n\r\n  public async createInstancesOfDependencies(\r\n    modules: Map<string, Module> = this.container.getModules(),\r\n  ) {\r\n    this.createPrototypes(modules);\r\n\r\n    try {\r\n      await this.createInstances(modules);\r\n    } catch (err) {\r\n      this.graphInspector.inspectModules(modules);\r\n      this.graphInspector.registerPartial(err);\r\n      throw err;\r\n    }\r\n    this.graphInspector.inspectModules(modules);\r\n  }\r\n\r\n  private createPrototypes(modules: Map<string, Module>) {\r\n    modules.forEach(moduleRef => {\r\n      this.createPrototypesOfProviders(moduleRef);\r\n      this.createPrototypesOfInjectables(moduleRef);\r\n      this.createPrototypesOfControllers(moduleRef);\r\n    });\r\n  }\r\n\r\n  private async createInstances(modules: Map<string, Module>) {\r\n    await Promise.all(\r\n      [...modules.values()].map(async moduleRef => {\r\n        await this.createInstancesOfProviders(moduleRef);\r\n        await this.createInstancesOfInjectables(moduleRef);\r\n        await this.createInstancesOfControllers(moduleRef);\r\n\r\n        const { name } = moduleRef;\r\n        this.isModuleWhitelisted(name) &&\r\n          this.logger.log(MODULE_INIT_MESSAGE`${name}`);\r\n      }),\r\n    );\r\n  }\r\n\r\n  private createPrototypesOfProviders(moduleRef: Module) {\r\n    const { providers } = moduleRef;\r\n    providers.forEach(wrapper =>\r\n      this.injector.loadPrototype<Injectable>(wrapper, providers),\r\n    );\r\n  }\r\n\r\n  private async createInstancesOfProviders(moduleRef: Module) {\r\n    const { providers } = moduleRef;\r\n    const wrappers = [...providers.values()];\r\n    await Promise.all(\r\n      wrappers.map(async item => {\r\n        await this.injector.loadProvider(item, moduleRef);\r\n        this.graphInspector.inspectInstanceWrapper(item, moduleRef);\r\n      }),\r\n    );\r\n  }\r\n\r\n  private createPrototypesOfControllers(moduleRef: Module) {\r\n    const { controllers } = moduleRef;\r\n    controllers.forEach(wrapper =>\r\n      this.injector.loadPrototype<Controller>(wrapper, controllers),\r\n    );\r\n  }\r\n\r\n  private async createInstancesOfControllers(moduleRef: Module) {\r\n    const { controllers } = moduleRef;\r\n    const wrappers = [...controllers.values()];\r\n    await Promise.all(\r\n      wrappers.map(async item => {\r\n        await this.injector.loadController(item, moduleRef);\r\n        this.graphInspector.inspectInstanceWrapper(item, moduleRef);\r\n      }),\r\n    );\r\n  }\r\n\r\n  private createPrototypesOfInjectables(moduleRef: Module) {\r\n    const { injectables } = moduleRef;\r\n    injectables.forEach(wrapper =>\r\n      this.injector.loadPrototype(wrapper, injectables),\r\n    );\r\n  }\r\n\r\n  private async createInstancesOfInjectables(moduleRef: Module) {\r\n    const { injectables } = moduleRef;\r\n    const wrappers = [...injectables.values()];\r\n    await Promise.all(\r\n      wrappers.map(async item => {\r\n        await this.injector.loadInjectable(item, moduleRef);\r\n        this.graphInspector.inspectInstanceWrapper(item, moduleRef);\r\n      }),\r\n    );\r\n  }\r\n\r\n  private isModuleWhitelisted(name: string): boolean {\r\n    return name !== InternalCoreModule.name;\r\n  }\r\n}\r\n"]}