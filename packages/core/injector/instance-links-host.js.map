{"version":3,"file":"instance-links-host.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["injector/instance-links-host.ts"],"names":[],"mappings":";;;AACA,oEAA+D;AAC/D,8FAAyF;AAczF,MAAa,iBAAiB;IAG5B,YAA6B,SAAwB;QAAxB,cAAS,GAAT,SAAS,CAAe;QAFpC,kBAAa,GAAG,IAAI,GAAG,EAAkC,CAAC;QAGzE,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAOD,GAAG,CACD,KAAqB,EACrB,UAAiD,EAAE;QAEnD,MAAM,0BAA0B,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAEjE,IAAI,CAAC,0BAA0B,EAAE;YAC/B,MAAM,IAAI,mDAAuB,CAAC,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC,CAAC;SACvE;QAED,IAAI,OAAO,CAAC,IAAI,EAAE;YAChB,OAAO,0BAA0B,CAAC;SACnC;QAED,MAAM,YAAY,GAAG,OAAO,CAAC,QAAQ;YACnC,CAAC,CAAC,0BAA0B,CAAC,IAAI,CAC7B,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,KAAK,OAAO,CAAC,QAAQ,CAC3C;YACH,CAAC,CAAC,0BAA0B,CAAC,0BAA0B,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAEtE,IAAI,CAAC,YAAY,EAAE;YACjB,MAAM,IAAI,mDAAuB,CAAC,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC,CAAC;SACvE;QACD,OAAO,YAAY,CAAC;IACtB,CAAC;IAEO,UAAU;QAChB,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;QAC5C,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;YAC1B,MAAM,EAAE,SAAS,EAAE,WAAW,EAAE,WAAW,EAAE,GAAG,SAAS,CAAC;YAC1D,SAAS,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,CACnC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,WAAW,CAAC,CACrD,CAAC;YACF,WAAW,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,CACrC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,aAAa,CAAC,CACvD,CAAC;YACF,WAAW,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,CACrC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,aAAa,CAAC,CACvD,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,OAAO,CACb,OAAwB,EACxB,KAAqB,EACrB,SAAiB,EACjB,cAA8B;QAE9B,MAAM,YAAY,GAAiB;YACjC,QAAQ,EAAE,SAAS,CAAC,EAAE;YACtB,UAAU,EAAE,OAAO;YACnB,UAAU,EAAE,SAAS,CAAC,cAAc,CAAC;YACrC,KAAK;SACN,CAAC;QACF,MAAM,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACpD,IAAI,CAAC,aAAa,EAAE;YAClB,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC;SAC/C;aAAM;YACL,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;SAClC;IACH,CAAC;IAEO,sBAAsB,CAAC,KAAqB;QAClD,OAAO,IAAA,yBAAU,EAAC,KAAK,CAAC,CAAC,CAAC,CAAE,KAAkB,EAAE,IAAI,CAAC,CAAC,CAAE,KAAgB,CAAC;IAC3E,CAAC;CACF;AA7ED,8CA6EC","sourcesContent":["import { InjectionToken } from '@nestjs/common';\r\nimport { isFunction } from '@nestjs/common/utils/shared.utils';\r\nimport { UnknownElementException } from '../errors/exceptions/unknown-element.exception';\r\nimport { NestContainer } from './container';\r\nimport { InstanceWrapper } from './instance-wrapper';\r\nimport { Module } from './module';\r\n\r\ntype HostCollection = 'providers' | 'controllers' | 'injectables';\r\n\r\nexport interface InstanceLink<T = any> {\r\n  token: InjectionToken;\r\n  wrapperRef: InstanceWrapper<T>;\r\n  collection: Map<any, InstanceWrapper>;\r\n  moduleId: string;\r\n}\r\n\r\nexport class InstanceLinksHost {\r\n  private readonly instanceLinks = new Map<InjectionToken, InstanceLink[]>();\r\n\r\n  constructor(private readonly container: NestContainer) {\r\n    this.initialize();\r\n  }\r\n\r\n  get<T = any>(token: InjectionToken): InstanceLink<T>;\r\n  get<T = any>(\r\n    token: InjectionToken,\r\n    options?: { moduleId?: string; each?: boolean },\r\n  ): InstanceLink<T> | Array<InstanceLink<T>>;\r\n  get<T = any>(\r\n    token: InjectionToken,\r\n    options: { moduleId?: string; each?: boolean } = {},\r\n  ): InstanceLink<T> | Array<InstanceLink<T>> {\r\n    const instanceLinksForGivenToken = this.instanceLinks.get(token);\r\n\r\n    if (!instanceLinksForGivenToken) {\r\n      throw new UnknownElementException(this.getInstanceNameByToken(token));\r\n    }\r\n\r\n    if (options.each) {\r\n      return instanceLinksForGivenToken;\r\n    }\r\n\r\n    const instanceLink = options.moduleId\r\n      ? instanceLinksForGivenToken.find(\r\n          item => item.moduleId === options.moduleId,\r\n        )\r\n      : instanceLinksForGivenToken[instanceLinksForGivenToken.length - 1];\r\n\r\n    if (!instanceLink) {\r\n      throw new UnknownElementException(this.getInstanceNameByToken(token));\r\n    }\r\n    return instanceLink;\r\n  }\r\n\r\n  private initialize() {\r\n    const modules = this.container.getModules();\r\n    modules.forEach(moduleRef => {\r\n      const { providers, injectables, controllers } = moduleRef;\r\n      providers.forEach((wrapper, token) =>\r\n        this.addLink(wrapper, token, moduleRef, 'providers'),\r\n      );\r\n      injectables.forEach((wrapper, token) =>\r\n        this.addLink(wrapper, token, moduleRef, 'injectables'),\r\n      );\r\n      controllers.forEach((wrapper, token) =>\r\n        this.addLink(wrapper, token, moduleRef, 'controllers'),\r\n      );\r\n    });\r\n  }\r\n\r\n  private addLink(\r\n    wrapper: InstanceWrapper,\r\n    token: InjectionToken,\r\n    moduleRef: Module,\r\n    collectionName: HostCollection,\r\n  ) {\r\n    const instanceLink: InstanceLink = {\r\n      moduleId: moduleRef.id,\r\n      wrapperRef: wrapper,\r\n      collection: moduleRef[collectionName],\r\n      token,\r\n    };\r\n    const existingLinks = this.instanceLinks.get(token);\r\n    if (!existingLinks) {\r\n      this.instanceLinks.set(token, [instanceLink]);\r\n    } else {\r\n      existingLinks.push(instanceLink);\r\n    }\r\n  }\r\n\r\n  private getInstanceNameByToken(token: InjectionToken): string {\r\n    return isFunction(token) ? (token as Function)?.name : (token as string);\r\n  }\r\n}\r\n"]}