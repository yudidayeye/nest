{"version":3,"file":"compiler.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["injector/compiler.ts"],"names":[],"mappings":";;;AAKA,iEAA4D;AAQ5D,MAAa,cAAc;IACzB,YAA6B,qBAAqB,IAAI,yCAAkB,EAAE;QAA7C,uBAAkB,GAAlB,kBAAkB,CAA2B;IAAG,CAAC;IAEvE,KAAK,CAAC,OAAO,CAClB,QAA4D;QAE5D,MAAM,EAAE,IAAI,EAAE,eAAe,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,QAAQ,CAAC,CAAC;QACvE,MAAM,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC;QACpE,OAAO,EAAE,IAAI,EAAE,eAAe,EAAE,KAAK,EAAE,CAAC;IAC1C,CAAC;IAEM,eAAe,CACpB,QAAsD;QAKtD,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,EAAE;YACnC,OAAO;gBACL,IAAI,EAAG,QAA6B,EAAE,UAAU;oBAC9C,CAAC,CAAE,QAA6B,CAAC,UAAU,EAAE;oBAC7C,CAAC,CAAC,QAAQ;aACb,CAAC;SACH;QACD,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,eAAe,EAAE,GAAG,QAAQ,CAAC;QACtD,OAAO,EAAE,IAAI,EAAE,eAAe,EAAE,CAAC;IACnC,CAAC;IAEM,eAAe,CACpB,MAAoD;QAEpD,OAAO,CAAC,CAAE,MAAwB,CAAC,MAAM,CAAC;IAC5C,CAAC;CACF;AAjCD,wCAiCC","sourcesContent":["import {\r\n  DynamicModule,\r\n  ForwardReference,\r\n  Type,\r\n} from '@nestjs/common/interfaces';\r\nimport { ModuleTokenFactory } from './module-token-factory';\r\n\r\nexport interface ModuleFactory {\r\n  type: Type<any>;\r\n  token: string;\r\n  dynamicMetadata?: Partial<DynamicModule>;\r\n}\r\n\r\nexport class ModuleCompiler {\r\n  constructor(private readonly moduleTokenFactory = new ModuleTokenFactory()) {}\r\n\r\n  public async compile(\r\n    metatype: Type<any> | DynamicModule | Promise<DynamicModule>,\r\n  ): Promise<ModuleFactory> {\r\n    const { type, dynamicMetadata } = this.extractMetadata(await metatype);\r\n    const token = this.moduleTokenFactory.create(type, dynamicMetadata);\r\n    return { type, dynamicMetadata, token };\r\n  }\r\n\r\n  public extractMetadata(\r\n    metatype: Type<any> | ForwardReference | DynamicModule,\r\n  ): {\r\n    type: Type<any>;\r\n    dynamicMetadata?: Partial<DynamicModule> | undefined;\r\n  } {\r\n    if (!this.isDynamicModule(metatype)) {\r\n      return {\r\n        type: (metatype as ForwardReference)?.forwardRef\r\n          ? (metatype as ForwardReference).forwardRef()\r\n          : metatype,\r\n      };\r\n    }\r\n    const { module: type, ...dynamicMetadata } = metatype;\r\n    return { type, dynamicMetadata };\r\n  }\r\n\r\n  public isDynamicModule(\r\n    module: Type<any> | DynamicModule | ForwardReference,\r\n  ): module is DynamicModule {\r\n    return !!(module as DynamicModule).module;\r\n  }\r\n}\r\n"]}