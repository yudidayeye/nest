{"version":3,"file":"module.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["injector/module.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  EnhancerSubtype,\r\n  ENTRY_PROVIDER_WATERMARK,\r\n} from '@nestjs/common/constants';\r\nimport {\r\n  ClassProvider,\r\n  Controller,\r\n  DynamicModule,\r\n  ExistingProvider,\r\n  FactoryProvider,\r\n  Injectable,\r\n  InjectionToken,\r\n  NestModule,\r\n  Provider,\r\n  Type,\r\n  ValueProvider,\r\n} from '@nestjs/common/interfaces';\r\nimport { randomStringGenerator } from '@nestjs/common/utils/random-string-generator.util';\r\nimport {\r\n  isFunction,\r\n  isNil,\r\n  isObject,\r\n  isString,\r\n  isSymbol,\r\n  isUndefined,\r\n} from '@nestjs/common/utils/shared.utils';\r\nimport { iterate } from 'iterare';\r\nimport { ApplicationConfig } from '../application-config';\r\nimport {\r\n  InvalidClassException,\r\n  RuntimeException,\r\n  UnknownExportException,\r\n} from '../errors/exceptions';\r\nimport { createContextId } from '../helpers/context-id-factory';\r\nimport { getClassScope } from '../helpers/get-class-scope';\r\nimport { isDurable } from '../helpers/is-durable';\r\nimport { UuidFactory } from '../inspector/uuid-factory';\r\nimport { CONTROLLER_ID_KEY } from './constants';\r\nimport { NestContainer } from './container';\r\nimport { InstanceWrapper } from './instance-wrapper';\r\nimport { ModuleRef, ModuleRefGetOrResolveOpts } from './module-ref';\r\n\r\nexport class Module {\r\n  private readonly _id: string;\r\n  private readonly _imports = new Set<Module>();\r\n  private readonly _providers = new Map<\r\n    InjectionToken,\r\n    InstanceWrapper<Injectable>\r\n  >();\r\n  private readonly _injectables = new Map<\r\n    InjectionToken,\r\n    InstanceWrapper<Injectable>\r\n  >();\r\n  private readonly _middlewares = new Map<\r\n    InjectionToken,\r\n    InstanceWrapper<Injectable>\r\n  >();\r\n  private readonly _controllers = new Map<\r\n    InjectionToken,\r\n    InstanceWrapper<Controller>\r\n  >();\r\n  private readonly _entryProviderKeys = new Set<InjectionToken>();\r\n  private readonly _exports = new Set<InjectionToken>();\r\n\r\n  private _distance = 0;\r\n  private _initOnPreview = false;\r\n  private _isGlobal = false;\r\n  private _token: string;\r\n\r\n  constructor(\r\n    private readonly _metatype: Type<any>,\r\n    private readonly container: NestContainer,\r\n  ) {\r\n    this.addCoreProviders();\r\n    this._id = this.generateUuid();\r\n  }\r\n\r\n  get id(): string {\r\n    return this._id;\r\n  }\r\n\r\n  get token(): string {\r\n    return this._token;\r\n  }\r\n\r\n  set token(token: string) {\r\n    this._token = token;\r\n  }\r\n\r\n  get name() {\r\n    return this.metatype.name;\r\n  }\r\n\r\n  get isGlobal() {\r\n    return this._isGlobal;\r\n  }\r\n\r\n  set isGlobal(global: boolean) {\r\n    this._isGlobal = global;\r\n  }\r\n\r\n  get initOnPreview() {\r\n    return this._initOnPreview;\r\n  }\r\n\r\n  set initOnPreview(initOnPreview: boolean) {\r\n    this._initOnPreview = initOnPreview;\r\n  }\r\n\r\n  get providers(): Map<InjectionToken, InstanceWrapper<Injectable>> {\r\n    return this._providers;\r\n  }\r\n\r\n  get middlewares(): Map<InjectionToken, InstanceWrapper<Injectable>> {\r\n    return this._middlewares;\r\n  }\r\n\r\n  get imports(): Set<Module> {\r\n    return this._imports;\r\n  }\r\n\r\n  get injectables(): Map<InjectionToken, InstanceWrapper<Injectable>> {\r\n    return this._injectables;\r\n  }\r\n\r\n  get controllers(): Map<InjectionToken, InstanceWrapper<Controller>> {\r\n    return this._controllers;\r\n  }\r\n\r\n  get entryProviders(): Array<InstanceWrapper<Injectable>> {\r\n    return Array.from(this._entryProviderKeys).map(token =>\r\n      this.providers.get(token),\r\n    );\r\n  }\r\n\r\n  get exports(): Set<InjectionToken> {\r\n    return this._exports;\r\n  }\r\n\r\n  get instance(): NestModule {\r\n    if (!this._providers.has(this._metatype)) {\r\n      throw new RuntimeException();\r\n    }\r\n    const module = this._providers.get(this._metatype);\r\n    return module.instance as NestModule;\r\n  }\r\n\r\n  get metatype(): Type<any> {\r\n    return this._metatype;\r\n  }\r\n\r\n  get distance(): number {\r\n    return this._distance;\r\n  }\r\n\r\n  set distance(value: number) {\r\n    this._distance = value;\r\n  }\r\n\r\n  public addCoreProviders() {\r\n    this.addModuleAsProvider();\r\n    this.addModuleRef();\r\n    this.addApplicationConfig();\r\n  }\r\n\r\n  public addModuleRef() {\r\n    const moduleRef = this.createModuleReferenceType();\r\n    this._providers.set(\r\n      ModuleRef,\r\n      new InstanceWrapper({\r\n        token: ModuleRef,\r\n        name: ModuleRef.name,\r\n        metatype: ModuleRef as any,\r\n        isResolved: true,\r\n        instance: new moduleRef(),\r\n        host: this,\r\n      }),\r\n    );\r\n  }\r\n\r\n  public addModuleAsProvider() {\r\n    this._providers.set(\r\n      this._metatype,\r\n      new InstanceWrapper({\r\n        token: this._metatype,\r\n        name: this._metatype.name,\r\n        metatype: this._metatype,\r\n        isResolved: false,\r\n        instance: null,\r\n        host: this,\r\n      }),\r\n    );\r\n  }\r\n\r\n  public addApplicationConfig() {\r\n    this._providers.set(\r\n      ApplicationConfig,\r\n      new InstanceWrapper({\r\n        token: ApplicationConfig,\r\n        name: ApplicationConfig.name,\r\n        isResolved: true,\r\n        instance: this.container.applicationConfig,\r\n        host: this,\r\n      }),\r\n    );\r\n  }\r\n\r\n  public addInjectable<T extends Injectable>(\r\n    injectable: Provider,\r\n    enhancerSubtype: EnhancerSubtype,\r\n    host?: Type<T>,\r\n  ) {\r\n    if (this.isCustomProvider(injectable)) {\r\n      return this.addCustomProvider(\r\n        injectable,\r\n        this._injectables,\r\n        enhancerSubtype,\r\n      );\r\n    }\r\n    let instanceWrapper = this.injectables.get(injectable);\r\n    if (!instanceWrapper) {\r\n      instanceWrapper = new InstanceWrapper({\r\n        token: injectable,\r\n        name: injectable.name,\r\n        metatype: injectable,\r\n        instance: null,\r\n        isResolved: false,\r\n        scope: getClassScope(injectable),\r\n        durable: isDurable(injectable),\r\n        subtype: enhancerSubtype,\r\n        host: this,\r\n      });\r\n      this._injectables.set(injectable, instanceWrapper);\r\n    }\r\n    if (host) {\r\n      const hostWrapper =\r\n        this._controllers.get(host) || this._providers.get(host);\r\n      hostWrapper && hostWrapper.addEnhancerMetadata(instanceWrapper);\r\n    }\r\n    return instanceWrapper;\r\n  }\r\n\r\n  public addProvider(provider: Provider): Provider | InjectionToken;\r\n  public addProvider(\r\n    provider: Provider,\r\n    enhancerSubtype: EnhancerSubtype,\r\n  ): Provider | InjectionToken;\r\n  public addProvider(provider: Provider, enhancerSubtype?: EnhancerSubtype) {\r\n    if (this.isCustomProvider(provider)) {\r\n      if (this.isEntryProvider(provider.provide)) {\r\n        this._entryProviderKeys.add(provider.provide);\r\n      }\r\n      return this.addCustomProvider(provider, this._providers, enhancerSubtype);\r\n    }\r\n\r\n    this._providers.set(\r\n      provider,\r\n      new InstanceWrapper({\r\n        token: provider,\r\n        name: (provider as Type<Injectable>).name,\r\n        metatype: provider as Type<Injectable>,\r\n        instance: null,\r\n        isResolved: false,\r\n        scope: getClassScope(provider),\r\n        durable: isDurable(provider),\r\n        host: this,\r\n      }),\r\n    );\r\n\r\n    if (this.isEntryProvider(provider)) {\r\n      this._entryProviderKeys.add(provider);\r\n    }\r\n\r\n    return provider as Type<Injectable>;\r\n  }\r\n\r\n  public isCustomProvider(\r\n    provider: Provider,\r\n  ): provider is\r\n    | ClassProvider\r\n    | FactoryProvider\r\n    | ValueProvider\r\n    | ExistingProvider {\r\n    return !isNil(\r\n      (\r\n        provider as\r\n          | ClassProvider\r\n          | FactoryProvider\r\n          | ValueProvider\r\n          | ExistingProvider\r\n      ).provide,\r\n    );\r\n  }\r\n\r\n  public addCustomProvider(\r\n    provider:\r\n      | ClassProvider\r\n      | FactoryProvider\r\n      | ValueProvider\r\n      | ExistingProvider,\r\n    collection: Map<Function | string | symbol, any>,\r\n    enhancerSubtype?: EnhancerSubtype,\r\n  ) {\r\n    if (this.isCustomClass(provider)) {\r\n      this.addCustomClass(provider, collection, enhancerSubtype);\r\n    } else if (this.isCustomValue(provider)) {\r\n      this.addCustomValue(provider, collection, enhancerSubtype);\r\n    } else if (this.isCustomFactory(provider)) {\r\n      this.addCustomFactory(provider, collection, enhancerSubtype);\r\n    } else if (this.isCustomUseExisting(provider)) {\r\n      this.addCustomUseExisting(provider, collection, enhancerSubtype);\r\n    }\r\n    return provider.provide;\r\n  }\r\n\r\n  public isCustomClass(provider: any): provider is ClassProvider {\r\n    return !isUndefined((provider as ClassProvider).useClass);\r\n  }\r\n\r\n  public isCustomValue(provider: any): provider is ValueProvider {\r\n    return (\r\n      isObject(provider) &&\r\n      Object.prototype.hasOwnProperty.call(provider, 'useValue')\r\n    );\r\n  }\r\n\r\n  public isCustomFactory(provider: any): provider is FactoryProvider {\r\n    return !isUndefined((provider as FactoryProvider).useFactory);\r\n  }\r\n\r\n  public isCustomUseExisting(provider: any): provider is ExistingProvider {\r\n    return !isUndefined((provider as ExistingProvider).useExisting);\r\n  }\r\n\r\n  public isDynamicModule(exported: any): exported is DynamicModule {\r\n    return exported && exported.module;\r\n  }\r\n\r\n  public addCustomClass(\r\n    provider: ClassProvider,\r\n    collection: Map<InjectionToken, InstanceWrapper>,\r\n    enhancerSubtype?: EnhancerSubtype,\r\n  ) {\r\n    let { scope, durable } = provider;\r\n\r\n    const { useClass } = provider;\r\n    if (isUndefined(scope)) {\r\n      scope = getClassScope(useClass);\r\n    }\r\n    if (isUndefined(durable)) {\r\n      durable = isDurable(useClass);\r\n    }\r\n\r\n    const token = provider.provide;\r\n    collection.set(\r\n      token,\r\n      new InstanceWrapper({\r\n        token,\r\n        name: useClass?.name || useClass,\r\n        metatype: useClass,\r\n        instance: null,\r\n        isResolved: false,\r\n        scope,\r\n        durable,\r\n        host: this,\r\n        subtype: enhancerSubtype,\r\n      }),\r\n    );\r\n  }\r\n\r\n  public addCustomValue(\r\n    provider: ValueProvider,\r\n    collection: Map<Function | string | symbol, InstanceWrapper>,\r\n    enhancerSubtype?: EnhancerSubtype,\r\n  ) {\r\n    const { useValue: value, provide: providerToken } = provider;\r\n    collection.set(\r\n      providerToken,\r\n      new InstanceWrapper({\r\n        token: providerToken,\r\n        name: (providerToken as Function)?.name || providerToken,\r\n        metatype: null,\r\n        instance: value,\r\n        isResolved: true,\r\n        async: value instanceof Promise,\r\n        host: this,\r\n        subtype: enhancerSubtype,\r\n      }),\r\n    );\r\n  }\r\n\r\n  public addCustomFactory(\r\n    provider: FactoryProvider,\r\n    collection: Map<Function | string | symbol, InstanceWrapper>,\r\n    enhancerSubtype?: EnhancerSubtype,\r\n  ) {\r\n    const {\r\n      useFactory: factory,\r\n      inject,\r\n      scope,\r\n      durable,\r\n      provide: providerToken,\r\n    } = provider;\r\n\r\n    collection.set(\r\n      providerToken,\r\n      new InstanceWrapper({\r\n        token: providerToken,\r\n        name: (providerToken as Function)?.name || providerToken,\r\n        metatype: factory as any,\r\n        instance: null,\r\n        isResolved: false,\r\n        inject: inject || [],\r\n        scope,\r\n        durable,\r\n        host: this,\r\n        subtype: enhancerSubtype,\r\n      }),\r\n    );\r\n  }\r\n\r\n  public addCustomUseExisting(\r\n    provider: ExistingProvider,\r\n    collection: Map<Function | string | symbol, InstanceWrapper>,\r\n    enhancerSubtype?: EnhancerSubtype,\r\n  ) {\r\n    const { useExisting, provide: providerToken } = provider;\r\n    collection.set(\r\n      providerToken,\r\n      new InstanceWrapper({\r\n        token: providerToken,\r\n        name: (providerToken as Function)?.name || providerToken,\r\n        metatype: (instance => instance) as any,\r\n        instance: null,\r\n        isResolved: false,\r\n        inject: [useExisting],\r\n        host: this,\r\n        isAlias: true,\r\n        subtype: enhancerSubtype,\r\n      }),\r\n    );\r\n  }\r\n\r\n  public addExportedProvider(\r\n    provider: Provider | string | symbol | DynamicModule,\r\n  ) {\r\n    const addExportedUnit = (token: InjectionToken) =>\r\n      this._exports.add(this.validateExportedProvider(token));\r\n\r\n    if (this.isCustomProvider(provider as any)) {\r\n      return this.addCustomExportedProvider(provider as any);\r\n    } else if (isString(provider) || isSymbol(provider)) {\r\n      return addExportedUnit(provider);\r\n    } else if (this.isDynamicModule(provider)) {\r\n      const { module: moduleClassRef } = provider;\r\n      return addExportedUnit(moduleClassRef);\r\n    }\r\n    addExportedUnit(provider as Type<any>);\r\n  }\r\n\r\n  public addCustomExportedProvider(\r\n    provider:\r\n      | FactoryProvider\r\n      | ValueProvider\r\n      | ClassProvider\r\n      | ExistingProvider,\r\n  ) {\r\n    const provide = provider.provide;\r\n    if (isString(provide) || isSymbol(provide)) {\r\n      return this._exports.add(this.validateExportedProvider(provide));\r\n    }\r\n    this._exports.add(this.validateExportedProvider(provide));\r\n  }\r\n\r\n  public validateExportedProvider(token: InjectionToken) {\r\n    if (this._providers.has(token)) {\r\n      return token;\r\n    }\r\n    const imports = iterate(this._imports.values())\r\n      .filter(item => !!item)\r\n      .map(({ metatype }) => metatype)\r\n      .filter(metatype => !!metatype)\r\n      .toArray();\r\n\r\n    if (!imports.includes(token as Type<unknown>)) {\r\n      const { name } = this.metatype;\r\n      const providerName = isFunction(token) ? (token as Function).name : token;\r\n      throw new UnknownExportException(providerName as string, name);\r\n    }\r\n    return token;\r\n  }\r\n\r\n  public addController(controller: Type<Controller>) {\r\n    this._controllers.set(\r\n      controller,\r\n      new InstanceWrapper({\r\n        token: controller,\r\n        name: controller.name,\r\n        metatype: controller,\r\n        instance: null,\r\n        isResolved: false,\r\n        scope: getClassScope(controller),\r\n        durable: isDurable(controller),\r\n        host: this,\r\n      }),\r\n    );\r\n\r\n    this.assignControllerUniqueId(controller);\r\n  }\r\n\r\n  public assignControllerUniqueId(controller: Type<Controller>) {\r\n    Object.defineProperty(controller, CONTROLLER_ID_KEY, {\r\n      enumerable: false,\r\n      writable: false,\r\n      configurable: true,\r\n      value: randomStringGenerator(),\r\n    });\r\n  }\r\n\r\n  public addRelatedModule(module: Module) {\r\n    this._imports.add(module);\r\n  }\r\n\r\n  public replace(toReplace: InjectionToken, options: any) {\r\n    if (options.isProvider && this.hasProvider(toReplace)) {\r\n      const originalProvider = this._providers.get(toReplace);\r\n\r\n      return originalProvider.mergeWith({ provide: toReplace, ...options });\r\n    } else if (!options.isProvider && this.hasInjectable(toReplace)) {\r\n      const originalInjectable = this._injectables.get(toReplace);\r\n\r\n      return originalInjectable.mergeWith({\r\n        provide: toReplace,\r\n        ...options,\r\n      });\r\n    }\r\n  }\r\n\r\n  public hasProvider(token: InjectionToken): boolean {\r\n    return this._providers.has(token);\r\n  }\r\n\r\n  public hasInjectable(token: InjectionToken): boolean {\r\n    return this._injectables.has(token);\r\n  }\r\n\r\n  public getProviderByKey<T = any>(name: InjectionToken): InstanceWrapper<T> {\r\n    return this._providers.get(name) as InstanceWrapper<T>;\r\n  }\r\n\r\n  public getProviderById<T = any>(id: string): InstanceWrapper<T> | undefined {\r\n    return Array.from(this._providers.values()).find(\r\n      item => item.id === id,\r\n    ) as InstanceWrapper<T>;\r\n  }\r\n\r\n  public getControllerById<T = any>(\r\n    id: string,\r\n  ): InstanceWrapper<T> | undefined {\r\n    return Array.from(this._controllers.values()).find(\r\n      item => item.id === id,\r\n    ) as InstanceWrapper<T>;\r\n  }\r\n\r\n  public getInjectableById<T = any>(\r\n    id: string,\r\n  ): InstanceWrapper<T> | undefined {\r\n    return Array.from(this._injectables.values()).find(\r\n      item => item.id === id,\r\n    ) as InstanceWrapper<T>;\r\n  }\r\n\r\n  public getMiddlewareById<T = any>(\r\n    id: string,\r\n  ): InstanceWrapper<T> | undefined {\r\n    return Array.from(this._middlewares.values()).find(\r\n      item => item.id === id,\r\n    ) as InstanceWrapper<T>;\r\n  }\r\n\r\n  public getNonAliasProviders(): Array<\r\n    [InjectionToken, InstanceWrapper<Injectable>]\r\n  > {\r\n    return [...this._providers].filter(([_, wrapper]) => !wrapper.isAlias);\r\n  }\r\n\r\n  public createModuleReferenceType(): Type<ModuleRef> {\r\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n    const self = this;\r\n    return class extends ModuleRef {\r\n      constructor() {\r\n        super(self.container);\r\n      }\r\n\r\n      public get<TInput = any, TResult = TInput>(\r\n        typeOrToken: Type<TInput> | string | symbol,\r\n        options: ModuleRefGetOrResolveOpts = {},\r\n      ): TResult | Array<TResult> {\r\n        options.strict ??= true;\r\n        options.each ??= false;\r\n\r\n        return this.find<TInput, TResult>(\r\n          typeOrToken,\r\n          options.strict\r\n            ? {\r\n                moduleId: self.id,\r\n                each: options.each,\r\n              }\r\n            : options,\r\n        );\r\n      }\r\n\r\n      public resolve<TInput = any, TResult = TInput>(\r\n        typeOrToken: Type<TInput> | string | symbol,\r\n        contextId = createContextId(),\r\n        options: ModuleRefGetOrResolveOpts = {},\r\n      ): Promise<TResult | Array<TResult>> {\r\n        options.strict ??= true;\r\n        options.each ??= false;\r\n\r\n        return this.resolvePerContext<TInput, TResult>(\r\n          typeOrToken,\r\n          self,\r\n          contextId,\r\n          options,\r\n        );\r\n      }\r\n\r\n      public async create<T = any>(type: Type<T>): Promise<T> {\r\n        if (!(type && isFunction(type) && type.prototype)) {\r\n          throw new InvalidClassException(type);\r\n        }\r\n        return this.instantiateClass<T>(type, self);\r\n      }\r\n    };\r\n  }\r\n\r\n  private isEntryProvider(metatype: InjectionToken): boolean {\r\n    return typeof metatype === 'function'\r\n      ? !!Reflect.getMetadata(ENTRY_PROVIDER_WATERMARK, metatype)\r\n      : false;\r\n  }\r\n\r\n  private generateUuid(): string {\r\n    const prefix = 'M_';\r\n    const key = this.name?.toString() ?? this.token?.toString();\r\n    return key ? UuidFactory.get(`${prefix}_${key}`) : randomStringGenerator();\r\n  }\r\n}\r\n"]}