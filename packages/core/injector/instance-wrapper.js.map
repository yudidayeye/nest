{"version":3,"file":"instance-wrapper.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["injector/instance-wrapper.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger, LoggerService, Provider, Scope, Type } from '@nestjs/common';\r\nimport { EnhancerSubtype } from '@nestjs/common/constants';\r\nimport { FactoryProvider, InjectionToken } from '@nestjs/common/interfaces';\r\nimport { clc } from '@nestjs/common/utils/cli-colors.util';\r\nimport { randomStringGenerator } from '@nestjs/common/utils/random-string-generator.util';\r\nimport {\r\n  isNil,\r\n  isString,\r\n  isUndefined,\r\n} from '@nestjs/common/utils/shared.utils';\r\nimport { iterate } from 'iterare';\r\nimport { UuidFactory } from '../inspector/uuid-factory';\r\nimport { STATIC_CONTEXT } from './constants';\r\nimport {\r\n  isClassProvider,\r\n  isFactoryProvider,\r\n  isValueProvider,\r\n} from './helpers/provider-classifier';\r\nimport { Module } from './module';\r\nimport { SettlementSignal } from './settlement-signal';\r\n\r\nexport const INSTANCE_METADATA_SYMBOL = Symbol.for('instance_metadata:cache');\r\nexport const INSTANCE_ID_SYMBOL = Symbol.for('instance_metadata:id');\r\n\r\nexport interface HostComponentInfo {\r\n  /**\r\n   * Injection token (or class reference)\r\n   */\r\n  token: InjectionToken;\r\n  /**\r\n   * Flag that indicates whether DI subtree is durable\r\n   */\r\n  isTreeDurable: boolean;\r\n}\r\n\r\nexport interface ContextId {\r\n  readonly id: number;\r\n  payload?: unknown;\r\n  getParent?(info: HostComponentInfo): ContextId;\r\n}\r\n\r\nexport interface InstancePerContext<T> {\r\n  instance: T;\r\n  isResolved?: boolean;\r\n  isPending?: boolean;\r\n  donePromise?: Promise<unknown>;\r\n}\r\n\r\nexport interface PropertyMetadata {\r\n  key: symbol | string;\r\n  wrapper: InstanceWrapper;\r\n}\r\n\r\ninterface InstanceMetadataStore {\r\n  dependencies?: InstanceWrapper[];\r\n  properties?: PropertyMetadata[];\r\n  enhancers?: InstanceWrapper[];\r\n}\r\n\r\nexport class InstanceWrapper<T = any> {\r\n  public readonly name: any;\r\n  public readonly token: InjectionToken;\r\n  public readonly async?: boolean;\r\n  public readonly host?: Module;\r\n  public readonly isAlias: boolean = false;\r\n  public readonly subtype?: EnhancerSubtype;\r\n  public scope?: Scope = Scope.DEFAULT;\r\n  public metatype: Type<T> | Function;\r\n  public inject?: FactoryProvider['inject'];\r\n  public forwardRef?: boolean;\r\n  public durable?: boolean;\r\n  public initTime?: number;\r\n  public settlementSignal?: SettlementSignal;\r\n\r\n  private static logger: LoggerService = new Logger(InstanceWrapper.name);\r\n\r\n  private readonly values = new WeakMap<ContextId, InstancePerContext<T>>();\r\n  private readonly [INSTANCE_METADATA_SYMBOL]: InstanceMetadataStore = {};\r\n  private readonly [INSTANCE_ID_SYMBOL]: string;\r\n  private transientMap?:\r\n    | Map<string, WeakMap<ContextId, InstancePerContext<T>>>\r\n    | undefined;\r\n  private isTreeStatic: boolean | undefined;\r\n  private isTreeDurable: boolean | undefined;\r\n\r\n  constructor(\r\n    metadata: Partial<InstanceWrapper<T>> & Partial<InstancePerContext<T>> = {},\r\n  ) {\r\n    this.initialize(metadata);\r\n    this[INSTANCE_ID_SYMBOL] =\r\n      metadata[INSTANCE_ID_SYMBOL] ?? this.generateUuid();\r\n  }\r\n\r\n  get id(): string {\r\n    return this[INSTANCE_ID_SYMBOL];\r\n  }\r\n\r\n  set instance(value: T) {\r\n    this.values.set(STATIC_CONTEXT, { instance: value });\r\n  }\r\n\r\n  get instance(): T {\r\n    const instancePerContext = this.getInstanceByContextId(STATIC_CONTEXT);\r\n    return instancePerContext.instance;\r\n  }\r\n\r\n  get isNotMetatype(): boolean {\r\n    return !this.metatype || this.isFactory;\r\n  }\r\n\r\n  get isFactory(): boolean {\r\n    return this.metatype && !isNil(this.inject);\r\n  }\r\n\r\n  get isTransient(): boolean {\r\n    return this.scope === Scope.TRANSIENT;\r\n  }\r\n\r\n  public getInstanceByContextId(\r\n    contextId: ContextId,\r\n    inquirerId?: string,\r\n  ): InstancePerContext<T> {\r\n    if (this.scope === Scope.TRANSIENT && inquirerId) {\r\n      return this.getInstanceByInquirerId(contextId, inquirerId);\r\n    }\r\n    const instancePerContext = this.values.get(contextId);\r\n    return instancePerContext\r\n      ? instancePerContext\r\n      : this.cloneStaticInstance(contextId);\r\n  }\r\n\r\n  public getInstanceByInquirerId(\r\n    contextId: ContextId,\r\n    inquirerId: string,\r\n  ): InstancePerContext<T> {\r\n    let collectionPerContext = this.transientMap.get(inquirerId);\r\n    if (!collectionPerContext) {\r\n      collectionPerContext = new WeakMap();\r\n      this.transientMap.set(inquirerId, collectionPerContext);\r\n    }\r\n    const instancePerContext = collectionPerContext.get(contextId);\r\n    return instancePerContext\r\n      ? instancePerContext\r\n      : this.cloneTransientInstance(contextId, inquirerId);\r\n  }\r\n\r\n  public setInstanceByContextId(\r\n    contextId: ContextId,\r\n    value: InstancePerContext<T>,\r\n    inquirerId?: string,\r\n  ) {\r\n    if (this.scope === Scope.TRANSIENT && inquirerId) {\r\n      return this.setInstanceByInquirerId(contextId, inquirerId, value);\r\n    }\r\n    this.values.set(contextId, value);\r\n  }\r\n\r\n  public setInstanceByInquirerId(\r\n    contextId: ContextId,\r\n    inquirerId: string,\r\n    value: InstancePerContext<T>,\r\n  ) {\r\n    let collection = this.transientMap.get(inquirerId);\r\n    if (!collection) {\r\n      collection = new WeakMap();\r\n      this.transientMap.set(inquirerId, collection);\r\n    }\r\n    collection.set(contextId, value);\r\n  }\r\n\r\n  public addCtorMetadata(index: number, wrapper: InstanceWrapper) {\r\n    if (!this[INSTANCE_METADATA_SYMBOL].dependencies) {\r\n      this[INSTANCE_METADATA_SYMBOL].dependencies = [];\r\n    }\r\n    this[INSTANCE_METADATA_SYMBOL].dependencies[index] = wrapper;\r\n  }\r\n\r\n  public getCtorMetadata(): InstanceWrapper[] {\r\n    return this[INSTANCE_METADATA_SYMBOL].dependencies;\r\n  }\r\n\r\n  public addPropertiesMetadata(key: symbol | string, wrapper: InstanceWrapper) {\r\n    if (!this[INSTANCE_METADATA_SYMBOL].properties) {\r\n      this[INSTANCE_METADATA_SYMBOL].properties = [];\r\n    }\r\n    this[INSTANCE_METADATA_SYMBOL].properties.push({\r\n      key,\r\n      wrapper,\r\n    });\r\n  }\r\n\r\n  public getPropertiesMetadata(): PropertyMetadata[] {\r\n    return this[INSTANCE_METADATA_SYMBOL].properties;\r\n  }\r\n\r\n  public addEnhancerMetadata(wrapper: InstanceWrapper) {\r\n    if (!this[INSTANCE_METADATA_SYMBOL].enhancers) {\r\n      this[INSTANCE_METADATA_SYMBOL].enhancers = [];\r\n    }\r\n    this[INSTANCE_METADATA_SYMBOL].enhancers.push(wrapper);\r\n  }\r\n\r\n  public getEnhancersMetadata(): InstanceWrapper[] {\r\n    return this[INSTANCE_METADATA_SYMBOL].enhancers;\r\n  }\r\n\r\n  public isDependencyTreeDurable(lookupRegistry: string[] = []): boolean {\r\n    if (!isUndefined(this.isTreeDurable)) {\r\n      return this.isTreeDurable;\r\n    }\r\n    if (this.scope === Scope.REQUEST) {\r\n      this.isTreeDurable = this.durable === undefined ? false : this.durable;\r\n      if (this.isTreeDurable) {\r\n        this.printIntrospectedAsDurable();\r\n      }\r\n      return this.isTreeDurable;\r\n    }\r\n    const isStatic = this.isDependencyTreeStatic();\r\n    if (isStatic) {\r\n      return false;\r\n    }\r\n\r\n    const isTreeNonDurable = this.introspectDepsAttribute(\r\n      (collection, registry) =>\r\n        collection.some(\r\n          (item: InstanceWrapper) =>\r\n            !item.isDependencyTreeStatic() &&\r\n            !item.isDependencyTreeDurable(registry),\r\n        ),\r\n      lookupRegistry,\r\n    );\r\n    this.isTreeDurable = !isTreeNonDurable;\r\n    if (this.isTreeDurable) {\r\n      this.printIntrospectedAsDurable();\r\n    }\r\n    return this.isTreeDurable;\r\n  }\r\n\r\n  public introspectDepsAttribute(\r\n    callback: (\r\n      collection: InstanceWrapper[],\r\n      lookupRegistry: string[],\r\n    ) => boolean,\r\n    lookupRegistry: string[] = [],\r\n  ): boolean {\r\n    if (lookupRegistry.includes(this[INSTANCE_ID_SYMBOL])) {\r\n      return false;\r\n    }\r\n    lookupRegistry = lookupRegistry.concat(this[INSTANCE_ID_SYMBOL]);\r\n\r\n    const { dependencies, properties, enhancers } =\r\n      this[INSTANCE_METADATA_SYMBOL];\r\n\r\n    let introspectionResult = dependencies\r\n      ? callback(dependencies, lookupRegistry)\r\n      : false;\r\n\r\n    if (introspectionResult || !(properties || enhancers)) {\r\n      return introspectionResult;\r\n    }\r\n    introspectionResult = properties\r\n      ? callback(\r\n          properties.map(item => item.wrapper),\r\n          lookupRegistry,\r\n        )\r\n      : false;\r\n    if (introspectionResult || !enhancers) {\r\n      return introspectionResult;\r\n    }\r\n    return enhancers ? callback(enhancers, lookupRegistry) : false;\r\n  }\r\n\r\n  public isDependencyTreeStatic(lookupRegistry: string[] = []): boolean {\r\n    if (!isUndefined(this.isTreeStatic)) {\r\n      return this.isTreeStatic;\r\n    }\r\n    if (this.scope === Scope.REQUEST) {\r\n      this.isTreeStatic = false;\r\n      this.printIntrospectedAsRequestScoped();\r\n      return this.isTreeStatic;\r\n    }\r\n    this.isTreeStatic = !this.introspectDepsAttribute(\r\n      (collection, registry) =>\r\n        collection.some(\r\n          (item: InstanceWrapper) => !item.isDependencyTreeStatic(registry),\r\n        ),\r\n      lookupRegistry,\r\n    );\r\n    if (!this.isTreeStatic) {\r\n      this.printIntrospectedAsRequestScoped();\r\n    }\r\n    return this.isTreeStatic;\r\n  }\r\n\r\n  public cloneStaticInstance(contextId: ContextId): InstancePerContext<T> {\r\n    const staticInstance = this.getInstanceByContextId(STATIC_CONTEXT);\r\n    if (this.isDependencyTreeStatic()) {\r\n      return staticInstance;\r\n    }\r\n    const instancePerContext: InstancePerContext<T> = {\r\n      ...staticInstance,\r\n      instance: undefined,\r\n      isResolved: false,\r\n      isPending: false,\r\n    };\r\n    if (this.isNewable()) {\r\n      instancePerContext.instance = Object.create(this.metatype.prototype);\r\n    }\r\n    this.setInstanceByContextId(contextId, instancePerContext);\r\n    return instancePerContext;\r\n  }\r\n\r\n  public cloneTransientInstance(\r\n    contextId: ContextId,\r\n    inquirerId: string,\r\n  ): InstancePerContext<T> {\r\n    const staticInstance = this.getInstanceByContextId(STATIC_CONTEXT);\r\n    const instancePerContext: InstancePerContext<T> = {\r\n      ...staticInstance,\r\n      instance: undefined,\r\n      isResolved: false,\r\n      isPending: false,\r\n    };\r\n    if (this.isNewable()) {\r\n      instancePerContext.instance = Object.create(this.metatype.prototype);\r\n    }\r\n    this.setInstanceByInquirerId(contextId, inquirerId, instancePerContext);\r\n    return instancePerContext;\r\n  }\r\n\r\n  public createPrototype(contextId: ContextId) {\r\n    const host = this.getInstanceByContextId(contextId);\r\n    if (!this.isNewable() || host.isResolved) {\r\n      return;\r\n    }\r\n    return Object.create(this.metatype.prototype);\r\n  }\r\n\r\n  public isInRequestScope(\r\n    contextId: ContextId,\r\n    inquirer?: InstanceWrapper | undefined,\r\n  ): boolean {\r\n    const isDependencyTreeStatic = this.isDependencyTreeStatic();\r\n\r\n    return (\r\n      !isDependencyTreeStatic &&\r\n      contextId !== STATIC_CONTEXT &&\r\n      (!this.isTransient || (this.isTransient && !!inquirer))\r\n    );\r\n  }\r\n\r\n  public isLazyTransient(\r\n    contextId: ContextId,\r\n    inquirer: InstanceWrapper | undefined,\r\n  ): boolean {\r\n    const isInquirerRequestScoped =\r\n      inquirer && !inquirer.isDependencyTreeStatic();\r\n\r\n    return (\r\n      this.isDependencyTreeStatic() &&\r\n      contextId !== STATIC_CONTEXT &&\r\n      this.isTransient &&\r\n      isInquirerRequestScoped\r\n    );\r\n  }\r\n\r\n  public isExplicitlyRequested(\r\n    contextId: ContextId,\r\n    inquirer?: InstanceWrapper,\r\n  ): boolean {\r\n    const isSelfRequested = inquirer === this;\r\n    return (\r\n      this.isDependencyTreeStatic() &&\r\n      contextId !== STATIC_CONTEXT &&\r\n      (isSelfRequested || (inquirer && inquirer.scope === Scope.TRANSIENT))\r\n    );\r\n  }\r\n\r\n  public isStatic(\r\n    contextId: ContextId,\r\n    inquirer: InstanceWrapper | undefined,\r\n  ): boolean {\r\n    const isInquirerRequestScoped =\r\n      inquirer && !inquirer.isDependencyTreeStatic();\r\n    const isStaticTransient = this.isTransient && !isInquirerRequestScoped;\r\n\r\n    return (\r\n      this.isDependencyTreeStatic() &&\r\n      contextId === STATIC_CONTEXT &&\r\n      (!this.isTransient ||\r\n        (isStaticTransient && !!inquirer && !inquirer.isTransient))\r\n    );\r\n  }\r\n\r\n  public getStaticTransientInstances() {\r\n    if (!this.transientMap) {\r\n      return [];\r\n    }\r\n    const instances = [...this.transientMap.values()];\r\n    return iterate(instances)\r\n      .map(item => item.get(STATIC_CONTEXT))\r\n      .filter(item => !!item)\r\n      .toArray();\r\n  }\r\n\r\n  public mergeWith(provider: Provider) {\r\n    if (isValueProvider(provider)) {\r\n      this.metatype = null;\r\n      this.inject = null;\r\n\r\n      this.scope = Scope.DEFAULT;\r\n\r\n      this.setInstanceByContextId(STATIC_CONTEXT, {\r\n        instance: provider.useValue,\r\n        isResolved: true,\r\n        isPending: false,\r\n      });\r\n    } else if (isClassProvider(provider)) {\r\n      this.inject = null;\r\n      this.metatype = provider.useClass;\r\n    } else if (isFactoryProvider(provider)) {\r\n      this.metatype = provider.useFactory;\r\n      this.inject = provider.inject || [];\r\n    }\r\n  }\r\n\r\n  private isNewable(): boolean {\r\n    return isNil(this.inject) && this.metatype && this.metatype.prototype;\r\n  }\r\n\r\n  private initialize(\r\n    metadata: Partial<InstanceWrapper<T>> & Partial<InstancePerContext<T>>,\r\n  ) {\r\n    const { instance, isResolved, ...wrapperPartial } = metadata;\r\n    Object.assign(this, wrapperPartial);\r\n\r\n    this.setInstanceByContextId(STATIC_CONTEXT, {\r\n      instance,\r\n      isResolved,\r\n    });\r\n    this.scope === Scope.TRANSIENT && (this.transientMap = new Map());\r\n  }\r\n\r\n  private printIntrospectedAsRequestScoped() {\r\n    if (!this.isDebugMode() || this.name === 'REQUEST') {\r\n      return;\r\n    }\r\n    if (isString(this.name)) {\r\n      InstanceWrapper.logger.log(\r\n        `${clc.cyanBright(this.name)}${clc.green(\r\n          ' introspected as ',\r\n        )}${clc.magentaBright('request-scoped')}`,\r\n      );\r\n    }\r\n  }\r\n\r\n  private printIntrospectedAsDurable() {\r\n    if (!this.isDebugMode()) {\r\n      return;\r\n    }\r\n    if (isString(this.name)) {\r\n      InstanceWrapper.logger.log(\r\n        `${clc.cyanBright(this.name)}${clc.green(\r\n          ' introspected as ',\r\n        )}${clc.magentaBright('durable')}`,\r\n      );\r\n    }\r\n  }\r\n\r\n  private isDebugMode(): boolean {\r\n    return !!process.env.NEST_DEBUG;\r\n  }\r\n\r\n  private generateUuid(): string {\r\n    let key = this.name?.toString() ?? this.token?.toString();\r\n    key += this.host?.name ?? '';\r\n\r\n    return key ? UuidFactory.get(key) : randomStringGenerator();\r\n  }\r\n}\r\n"]}