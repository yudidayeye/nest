{"version":3,"file":"internal-core-module-factory.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["injector/internal-core-module/internal-core-module-factory.ts"],"names":[],"mappings":";;;AAAA,2CAAwC;AACxC,qFAAgF;AAChF,uEAAkE;AAElE,uEAAmE;AAKnE,0CAAuC;AACvC,wDAAoD;AACpD,iFAA4E;AAC5E,4DAAwD;AACxD,iEAA4D;AAE5D,MAAa,yBAAyB;IACpC,MAAM,CAAC,MAAM,CACX,SAAwB,EACxB,OAA4B,EAC5B,cAA8B,EAC9B,eAAgC,EAChC,cAA8B,EAC9B,eAAkC;QAElC,MAAM,uBAAuB,GAAG,GAAG,EAAE;YACnC,MAAM,MAAM,GAAG,IAAI,eAAM,CAAC,qCAAgB,CAAC,IAAI,EAAE;gBAC/C,SAAS,EAAE,KAAK;aACjB,CAAC,CAAC;YACH,MAAM,QAAQ,GAAG,IAAI,mBAAQ,EAAE,CAAC;YAChC,MAAM,cAAc,GAAG,IAAI,gCAAc,CACvC,SAAS,EACT,QAAQ,EACR,cAAc,EACd,MAAM,CACP,CAAC;YACF,OAAO,IAAI,qCAAgB,CACzB,OAAO,EACP,cAAc,EACd,cAAc,EACd,SAAS,CAAC,UAAU,EAAE,EACtB,eAAe,CAChB,CAAC;QACJ,CAAC,CAAC;QAEF,OAAO,yCAAkB,CAAC,QAAQ,CAAC;YACjC;gBACE,OAAO,EAAE,iDAAsB;gBAC/B,QAAQ,EAAE,iDAAsB,CAAC,aAAa,CAAC,SAAS,CAAC;aAC1D;YACD;gBACE,OAAO,EAAE,oCAAgB;gBACzB,QAAQ,EAAE,SAAS,CAAC,UAAU,EAAE;aACjC;YACD;gBACE,OAAO,EAAE,mCAAe;gBACxB,QAAQ,EAAE,eAAe;aAC1B;YACD;gBACE,OAAO,EAAE,qCAAgB;gBACzB,UAAU,EAAE,uBAAuB;aACpC;YACD;gBACE,OAAO,EAAE,kCAAe;gBACxB,QAAQ,EAAE,SAAS,CAAC,eAAe;aACpC;SACF,CAAC,CAAC;IACL,CAAC;CACF;AApDD,8DAoDC","sourcesContent":["import { Logger } from '@nestjs/common';\r\nimport { ExternalContextCreator } from '../../helpers/external-context-creator';\r\nimport { HttpAdapterHost } from '../../helpers/http-adapter-host';\r\nimport { GraphInspector } from '../../inspector/graph-inspector';\r\nimport { SerializedGraph } from '../../inspector/serialized-graph';\r\nimport { ModuleOverride } from '../../interfaces/module-override.interface';\r\nimport { DependenciesScanner } from '../../scanner';\r\nimport { ModuleCompiler } from '../compiler';\r\nimport { NestContainer } from '../container';\r\nimport { Injector } from '../injector';\r\nimport { InstanceLoader } from '../instance-loader';\r\nimport { LazyModuleLoader } from '../lazy-module-loader/lazy-module-loader';\r\nimport { ModulesContainer } from '../modules-container';\r\nimport { InternalCoreModule } from './internal-core-module';\r\n\r\nexport class InternalCoreModuleFactory {\r\n  static create(\r\n    container: NestContainer,\r\n    scanner: DependenciesScanner,\r\n    moduleCompiler: ModuleCompiler,\r\n    httpAdapterHost: HttpAdapterHost,\r\n    graphInspector: GraphInspector,\r\n    moduleOverrides?: ModuleOverride[],\r\n  ) {\r\n    const lazyModuleLoaderFactory = () => {\r\n      const logger = new Logger(LazyModuleLoader.name, {\r\n        timestamp: false,\r\n      });\r\n      const injector = new Injector();\r\n      const instanceLoader = new InstanceLoader(\r\n        container,\r\n        injector,\r\n        graphInspector,\r\n        logger,\r\n      );\r\n      return new LazyModuleLoader(\r\n        scanner,\r\n        instanceLoader,\r\n        moduleCompiler,\r\n        container.getModules(),\r\n        moduleOverrides,\r\n      );\r\n    };\r\n\r\n    return InternalCoreModule.register([\r\n      {\r\n        provide: ExternalContextCreator,\r\n        useValue: ExternalContextCreator.fromContainer(container),\r\n      },\r\n      {\r\n        provide: ModulesContainer,\r\n        useValue: container.getModules(),\r\n      },\r\n      {\r\n        provide: HttpAdapterHost,\r\n        useValue: httpAdapterHost,\r\n      },\r\n      {\r\n        provide: LazyModuleLoader,\r\n        useFactory: lazyModuleLoaderFactory,\r\n      },\r\n      {\r\n        provide: SerializedGraph,\r\n        useValue: container.serializedGraph,\r\n      },\r\n    ]);\r\n  }\r\n}\r\n"]}