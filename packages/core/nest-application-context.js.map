{"version":3,"file":"nest-application-context.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["nest-application-context.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  INestApplicationContext,\r\n  Logger,\r\n  LoggerService,\r\n  LogLevel,\r\n  ShutdownSignal,\r\n} from '@nestjs/common';\r\nimport {\r\n  Abstract,\r\n  DynamicModule,\r\n  GetOrResolveOptions,\r\n  Type,\r\n} from '@nestjs/common/interfaces';\r\nimport { NestApplicationContextOptions } from '@nestjs/common/interfaces/nest-application-context-options.interface';\r\nimport { isEmpty } from '@nestjs/common/utils/shared.utils';\r\nimport { iterate } from 'iterare';\r\nimport { MESSAGES } from './constants';\r\nimport { UnknownModuleException } from './errors/exceptions';\r\nimport { createContextId } from './helpers/context-id-factory';\r\nimport {\r\n  callAppShutdownHook,\r\n  callBeforeAppShutdownHook,\r\n  callModuleBootstrapHook,\r\n  callModuleDestroyHook,\r\n  callModuleInitHook,\r\n} from './hooks';\r\nimport { AbstractInstanceResolver } from './injector/abstract-instance-resolver';\r\nimport { ModuleCompiler } from './injector/compiler';\r\nimport { NestContainer } from './injector/container';\r\nimport { Injector } from './injector/injector';\r\nimport { InstanceLinksHost } from './injector/instance-links-host';\r\nimport { ContextId } from './injector/instance-wrapper';\r\nimport { Module } from './injector/module';\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport class NestApplicationContext<\r\n    TOptions extends NestApplicationContextOptions = NestApplicationContextOptions,\r\n  >\r\n  extends AbstractInstanceResolver\r\n  implements INestApplicationContext\r\n{\r\n  protected isInitialized = false;\r\n  protected injector: Injector;\r\n  protected readonly logger = new Logger(NestApplicationContext.name, {\r\n    timestamp: true,\r\n  });\r\n\r\n  private shouldFlushLogsOnOverride = false;\r\n  private readonly activeShutdownSignals = new Array<string>();\r\n  private readonly moduleCompiler = new ModuleCompiler();\r\n  private shutdownCleanupRef?: (...args: unknown[]) => unknown;\r\n  private _instanceLinksHost: InstanceLinksHost;\r\n  private _moduleRefsForHooksByDistance?: Array<Module>;\r\n\r\n  protected get instanceLinksHost() {\r\n    if (!this._instanceLinksHost) {\r\n      this._instanceLinksHost = new InstanceLinksHost(this.container);\r\n    }\r\n    return this._instanceLinksHost;\r\n  }\r\n\r\n  constructor(\r\n    protected readonly container: NestContainer,\r\n    protected readonly appOptions: TOptions = {} as TOptions,\r\n    private contextModule: Module = null,\r\n    private readonly scope = new Array<Type<any>>(),\r\n  ) {\r\n    super();\r\n    this.injector = new Injector();\r\n\r\n    if (this.appOptions.preview) {\r\n      this.printInPreviewModeWarning();\r\n    }\r\n  }\r\n\r\n  public selectContextModule() {\r\n    const modules = this.container.getModules().values();\r\n    this.contextModule = modules.next().value;\r\n  }\r\n\r\n  /**\r\n   * Allows navigating through the modules tree, for example, to pull out a specific instance from the selected module.\r\n   * @returns {INestApplicationContext}\r\n   */\r\n  public select<T>(\r\n    moduleType: Type<T> | DynamicModule,\r\n  ): INestApplicationContext {\r\n    const modulesContainer = this.container.getModules();\r\n    const contextModuleCtor = this.contextModule.metatype;\r\n    const scope = this.scope.concat(contextModuleCtor);\r\n\r\n    const moduleTokenFactory = this.container.getModuleTokenFactory();\r\n    const { type, dynamicMetadata } =\r\n      this.moduleCompiler.extractMetadata(moduleType);\r\n    const token = moduleTokenFactory.create(type, dynamicMetadata);\r\n\r\n    const selectedModule = modulesContainer.get(token);\r\n    if (!selectedModule) {\r\n      throw new UnknownModuleException();\r\n    }\r\n    return new NestApplicationContext(\r\n      this.container,\r\n      this.appOptions,\r\n      selectedModule,\r\n      scope,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Retrieves an instance of either injectable or controller, otherwise, throws exception.\r\n   * @returns {TResult}\r\n   */\r\n  public get<TInput = any, TResult = TInput>(\r\n    typeOrToken: Type<TInput> | Function | string | symbol,\r\n  ): TResult;\r\n  /**\r\n   * Retrieves an instance of either injectable or controller, otherwise, throws exception.\r\n   * @returns {TResult}\r\n   */\r\n  public get<TInput = any, TResult = TInput>(\r\n    typeOrToken: Type<TInput> | Function | string | symbol,\r\n    options: {\r\n      strict?: boolean;\r\n      each?: undefined | false;\r\n    },\r\n  ): TResult;\r\n  /**\r\n   * Retrieves a list of instances of either injectables or controllers, otherwise, throws exception.\r\n   * @returns {Array<TResult>}\r\n   */\r\n  public get<TInput = any, TResult = TInput>(\r\n    typeOrToken: Type<TInput> | Function | string | symbol,\r\n    options: {\r\n      strict?: boolean;\r\n      each: true;\r\n    },\r\n  ): Array<TResult>;\r\n  /**\r\n   * Retrieves an instance (or a list of instances) of either injectable or controller, otherwise, throws exception.\r\n   * @returns {TResult | Array<TResult>}\r\n   */\r\n  public get<TInput = any, TResult = TInput>(\r\n    typeOrToken: Type<TInput> | Abstract<TInput> | string | symbol,\r\n    options: GetOrResolveOptions = { strict: false },\r\n  ): TResult | Array<TResult> {\r\n    return !(options && options.strict)\r\n      ? this.find<TInput, TResult>(typeOrToken, options)\r\n      : this.find<TInput, TResult>(typeOrToken, {\r\n          moduleId: this.contextModule?.id,\r\n          each: options.each,\r\n        });\r\n  }\r\n\r\n  /**\r\n   * Resolves transient or request-scoped instance of either injectable or controller, otherwise, throws exception.\r\n   * @returns {Array<TResult>}\r\n   */\r\n  public resolve<TInput = any, TResult = TInput>(\r\n    typeOrToken: Type<TInput> | Function | string | symbol,\r\n  ): Promise<TResult>;\r\n  /**\r\n   * Resolves transient or request-scoped instance of either injectable or controller, otherwise, throws exception.\r\n   * @returns {Array<TResult>}\r\n   */\r\n  public resolve<TInput = any, TResult = TInput>(\r\n    typeOrToken: Type<TInput> | Function | string | symbol,\r\n    contextId?: {\r\n      id: number;\r\n    },\r\n  ): Promise<TResult>;\r\n  /**\r\n   * Resolves transient or request-scoped instance of either injectable or controller, otherwise, throws exception.\r\n   * @returns {Array<TResult>}\r\n   */\r\n  public resolve<TInput = any, TResult = TInput>(\r\n    typeOrToken: Type<TInput> | Function | string | symbol,\r\n    contextId?: {\r\n      id: number;\r\n    },\r\n    options?: {\r\n      strict?: boolean;\r\n      each?: undefined | false;\r\n    },\r\n  ): Promise<TResult>;\r\n  /**\r\n   * Resolves transient or request-scoped instances of either injectables or controllers, otherwise, throws exception.\r\n   * @returns {Array<TResult>}\r\n   */\r\n  public resolve<TInput = any, TResult = TInput>(\r\n    typeOrToken: Type<TInput> | Function | string | symbol,\r\n    contextId?: {\r\n      id: number;\r\n    },\r\n    options?: {\r\n      strict?: boolean;\r\n      each: true;\r\n    },\r\n  ): Promise<Array<TResult>>;\r\n  /**\r\n   * Resolves transient or request-scoped instance (or a list of instances) of either injectable or controller, otherwise, throws exception.\r\n   * @returns {Promise<TResult | Array<TResult>>}\r\n   */\r\n  public resolve<TInput = any, TResult = TInput>(\r\n    typeOrToken: Type<TInput> | Abstract<TInput> | string | symbol,\r\n    contextId = createContextId(),\r\n    options: GetOrResolveOptions = { strict: false },\r\n  ): Promise<TResult | Array<TResult>> {\r\n    return this.resolvePerContext<TInput, TResult>(\r\n      typeOrToken,\r\n      this.contextModule,\r\n      contextId,\r\n      options,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Registers the request/context object for a given context ID (DI container sub-tree).\r\n   * @returns {void}\r\n   */\r\n  public registerRequestByContextId<T = any>(request: T, contextId: ContextId) {\r\n    this.container.registerRequestProvider(request, contextId);\r\n  }\r\n\r\n  /**\r\n   * Initializes the Nest application.\r\n   * Calls the Nest lifecycle events.\r\n   *\r\n   * @returns {Promise<this>} The NestApplicationContext instance as Promise\r\n   */\r\n  public async init(): Promise<this> {\r\n    if (this.isInitialized) {\r\n      return this;\r\n    }\r\n    await this.callInitHook();\r\n    await this.callBootstrapHook();\r\n\r\n    this.isInitialized = true;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Terminates the application\r\n   * @returns {Promise<void>}\r\n   */\r\n  public async close(signal?: string): Promise<void> {\r\n    await this.callDestroyHook();\r\n    await this.callBeforeShutdownHook(signal);\r\n    await this.dispose();\r\n    await this.callShutdownHook(signal);\r\n    this.unsubscribeFromProcessSignals();\r\n  }\r\n\r\n  /**\r\n   * Sets custom logger service.\r\n   * Flushes buffered logs if auto flush is on.\r\n   * @returns {void}\r\n   */\r\n  public useLogger(logger: LoggerService | LogLevel[] | false) {\r\n    Logger.overrideLogger(logger);\r\n\r\n    if (this.shouldFlushLogsOnOverride) {\r\n      this.flushLogs();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Prints buffered logs and detaches buffer.\r\n   * @returns {void}\r\n   */\r\n  public flushLogs() {\r\n    Logger.flush();\r\n  }\r\n\r\n  /**\r\n   * Define that it must flush logs right after defining a custom logger.\r\n   */\r\n  public flushLogsOnOverride() {\r\n    this.shouldFlushLogsOnOverride = true;\r\n  }\r\n\r\n  /**\r\n   * Enables the usage of shutdown hooks. Will call the\r\n   * `onApplicationShutdown` function of a provider if the\r\n   * process receives a shutdown signal.\r\n   *\r\n   * @param {ShutdownSignal[]} [signals=[]] The system signals it should listen to\r\n   *\r\n   * @returns {this} The Nest application context instance\r\n   */\r\n  public enableShutdownHooks(signals: (ShutdownSignal | string)[] = []): this {\r\n    if (isEmpty(signals)) {\r\n      signals = Object.keys(ShutdownSignal).map(\r\n        (key: string) => ShutdownSignal[key],\r\n      );\r\n    } else {\r\n      // given signals array should be unique because\r\n      // process shouldn't listen to the same signal more than once.\r\n      signals = Array.from(new Set(signals));\r\n    }\r\n\r\n    signals = iterate(signals)\r\n      .map((signal: string) => signal.toString().toUpperCase().trim())\r\n      // filter out the signals which is already listening to\r\n      .filter(signal => !this.activeShutdownSignals.includes(signal))\r\n      .toArray();\r\n\r\n    this.listenToShutdownSignals(signals);\r\n    return this;\r\n  }\r\n\r\n  protected async dispose(): Promise<void> {\r\n    // Nest application context has no server\r\n    // to dispose, therefore just call a noop\r\n    return Promise.resolve();\r\n  }\r\n\r\n  /**\r\n   * Listens to shutdown signals by listening to\r\n   * process events\r\n   *\r\n   * @param {string[]} signals The system signals it should listen to\r\n   */\r\n  protected listenToShutdownSignals(signals: string[]) {\r\n    let receivedSignal = false;\r\n    const cleanup = async (signal: string) => {\r\n      try {\r\n        if (receivedSignal) {\r\n          // If we receive another signal while we're waiting\r\n          // for the server to stop, just ignore it.\r\n          return;\r\n        }\r\n        receivedSignal = true;\r\n        await this.callDestroyHook();\r\n        await this.callBeforeShutdownHook(signal);\r\n        await this.dispose();\r\n        await this.callShutdownHook(signal);\r\n        signals.forEach(sig => process.removeListener(sig, cleanup));\r\n        process.kill(process.pid, signal);\r\n      } catch (err) {\r\n        Logger.error(\r\n          MESSAGES.ERROR_DURING_SHUTDOWN,\r\n          (err as Error)?.stack,\r\n          NestApplicationContext.name,\r\n        );\r\n        process.exit(1);\r\n      }\r\n    };\r\n    this.shutdownCleanupRef = cleanup as (...args: unknown[]) => unknown;\r\n\r\n    signals.forEach((signal: string) => {\r\n      this.activeShutdownSignals.push(signal);\r\n      process.on(signal as any, cleanup);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Unsubscribes from shutdown signals (process events)\r\n   */\r\n  protected unsubscribeFromProcessSignals() {\r\n    if (!this.shutdownCleanupRef) {\r\n      return;\r\n    }\r\n    this.activeShutdownSignals.forEach(signal => {\r\n      process.removeListener(signal, this.shutdownCleanupRef);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Calls the `onModuleInit` function on the registered\r\n   * modules and its children.\r\n   */\r\n  protected async callInitHook(): Promise<void> {\r\n    const modulesSortedByDistance = this.getModulesToTriggerHooksOn();\r\n    for (const module of modulesSortedByDistance) {\r\n      await callModuleInitHook(module);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calls the `onModuleDestroy` function on the registered\r\n   * modules and its children.\r\n   */\r\n  protected async callDestroyHook(): Promise<void> {\r\n    const modulesSortedByDistance = this.getModulesToTriggerHooksOn();\r\n    for (const module of modulesSortedByDistance) {\r\n      await callModuleDestroyHook(module);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calls the `onApplicationBootstrap` function on the registered\r\n   * modules and its children.\r\n   */\r\n  protected async callBootstrapHook(): Promise<void> {\r\n    const modulesSortedByDistance = this.getModulesToTriggerHooksOn();\r\n    for (const module of modulesSortedByDistance) {\r\n      await callModuleBootstrapHook(module);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calls the `onApplicationShutdown` function on the registered\r\n   * modules and children.\r\n   */\r\n  protected async callShutdownHook(signal?: string): Promise<void> {\r\n    const modulesSortedByDistance = this.getModulesToTriggerHooksOn();\r\n    for (const module of modulesSortedByDistance) {\r\n      await callAppShutdownHook(module, signal);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calls the `beforeApplicationShutdown` function on the registered\r\n   * modules and children.\r\n   */\r\n  protected async callBeforeShutdownHook(signal?: string): Promise<void> {\r\n    const modulesSortedByDistance = this.getModulesToTriggerHooksOn();\r\n    for (const module of modulesSortedByDistance) {\r\n      await callBeforeAppShutdownHook(module, signal);\r\n    }\r\n  }\r\n\r\n  protected assertNotInPreviewMode(methodName: string) {\r\n    if (this.appOptions.preview) {\r\n      const error = `Calling the \"${methodName}\" in the preview mode is not supported.`;\r\n      this.logger.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n\r\n  private getModulesToTriggerHooksOn(): Module[] {\r\n    if (this._moduleRefsForHooksByDistance) {\r\n      return this._moduleRefsForHooksByDistance;\r\n    }\r\n    const modulesContainer = this.container.getModules();\r\n    const compareFn = (a: Module, b: Module) => b.distance - a.distance;\r\n    const modulesSortedByDistance = Array.from(modulesContainer.values()).sort(\r\n      compareFn,\r\n    );\r\n\r\n    this._moduleRefsForHooksByDistance = this.appOptions?.preview\r\n      ? modulesSortedByDistance.filter(moduleRef => moduleRef.initOnPreview)\r\n      : modulesSortedByDistance;\r\n    return this._moduleRefsForHooksByDistance;\r\n  }\r\n\r\n  private printInPreviewModeWarning() {\r\n    this.logger.warn('------------------------------------------------');\r\n    this.logger.warn('Application is running in the PREVIEW mode!');\r\n    this.logger.warn('Providers/controllers will not be instantiated.');\r\n    this.logger.warn('------------------------------------------------');\r\n  }\r\n}\r\n"]}