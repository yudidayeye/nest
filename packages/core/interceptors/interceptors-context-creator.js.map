{"version":3,"file":"interceptors-context-creator.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["interceptors/interceptors-context-creator.ts"],"names":[],"mappings":"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","sourcesContent":["import { INTERCEPTORS_METADATA } from '@nestjs/common/constants';\r\nimport { Controller, NestInterceptor, Type } from '@nestjs/common/interfaces';\r\nimport { isEmpty, isFunction } from '@nestjs/common/utils/shared.utils';\r\nimport { iterate } from 'iterare';\r\nimport { ApplicationConfig } from '../application-config';\r\nimport { ContextCreator } from '../helpers/context-creator';\r\nimport { STATIC_CONTEXT } from '../injector/constants';\r\nimport { NestContainer } from '../injector/container';\r\nimport { InstanceWrapper } from '../injector/instance-wrapper';\r\n\r\nexport class InterceptorsContextCreator extends ContextCreator {\r\n  private moduleContext: string;\r\n\r\n  constructor(\r\n    private readonly container: NestContainer,\r\n    private readonly config?: ApplicationConfig,\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  public create(\r\n    instance: Controller,\r\n    callback: (...args: unknown[]) => unknown,\r\n    module: string,\r\n    contextId = STATIC_CONTEXT,\r\n    inquirerId?: string,\r\n  ): NestInterceptor[] {\r\n    this.moduleContext = module;\r\n    return this.createContext(\r\n      instance,\r\n      callback,\r\n      INTERCEPTORS_METADATA,\r\n      contextId,\r\n      inquirerId,\r\n    );\r\n  }\r\n\r\n  public createConcreteContext<T extends any[], R extends any[]>(\r\n    metadata: T,\r\n    contextId = STATIC_CONTEXT,\r\n    inquirerId?: string,\r\n  ): R {\r\n    if (isEmpty(metadata)) {\r\n      return [] as R;\r\n    }\r\n    return iterate(metadata)\r\n      .filter(\r\n        interceptor =>\r\n          interceptor && (interceptor.name || interceptor.intercept),\r\n      )\r\n      .map(interceptor =>\r\n        this.getInterceptorInstance(interceptor, contextId, inquirerId),\r\n      )\r\n      .filter(\r\n        (interceptor: NestInterceptor) =>\r\n          interceptor && isFunction(interceptor.intercept),\r\n      )\r\n      .toArray() as R;\r\n  }\r\n\r\n  public getInterceptorInstance(\r\n    metatype: Function | NestInterceptor,\r\n    contextId = STATIC_CONTEXT,\r\n    inquirerId?: string,\r\n  ): NestInterceptor | null {\r\n    const isObject = (metatype as NestInterceptor).intercept;\r\n    if (isObject) {\r\n      return metatype as NestInterceptor;\r\n    }\r\n    const instanceWrapper = this.getInstanceByMetatype(\r\n      metatype as Type<unknown>,\r\n    );\r\n    if (!instanceWrapper) {\r\n      return null;\r\n    }\r\n    const instanceHost = instanceWrapper.getInstanceByContextId(\r\n      this.getContextId(contextId, instanceWrapper),\r\n      inquirerId,\r\n    );\r\n    return instanceHost && instanceHost.instance;\r\n  }\r\n\r\n  public getInstanceByMetatype(\r\n    metatype: Type<unknown>,\r\n  ): InstanceWrapper | undefined {\r\n    if (!this.moduleContext) {\r\n      return;\r\n    }\r\n    const collection = this.container.getModules();\r\n    const moduleRef = collection.get(this.moduleContext);\r\n    if (!moduleRef) {\r\n      return;\r\n    }\r\n    return moduleRef.injectables.get(metatype);\r\n  }\r\n\r\n  public getGlobalMetadata<T extends unknown[]>(\r\n    contextId = STATIC_CONTEXT,\r\n    inquirerId?: string,\r\n  ): T {\r\n    if (!this.config) {\r\n      return [] as T;\r\n    }\r\n    const globalInterceptors = this.config.getGlobalInterceptors() as T;\r\n    if (contextId === STATIC_CONTEXT && !inquirerId) {\r\n      return globalInterceptors;\r\n    }\r\n    const scopedInterceptorWrappers =\r\n      this.config.getGlobalRequestInterceptors() as InstanceWrapper[];\r\n    const scopedInterceptors = iterate(scopedInterceptorWrappers)\r\n      .map(wrapper =>\r\n        wrapper.getInstanceByContextId(\r\n          this.getContextId(contextId, wrapper),\r\n          inquirerId,\r\n        ),\r\n      )\r\n      .filter(host => !!host)\r\n      .map(host => host.instance)\r\n      .toArray();\r\n\r\n    return globalInterceptors.concat(scopedInterceptors) as T;\r\n  }\r\n}\r\n"]}