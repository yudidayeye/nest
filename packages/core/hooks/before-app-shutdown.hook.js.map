{"version":3,"file":"before-app-shutdown.hook.js","sourceRoot":"D:/04-learn-font/learn-node/nest/packages/core/","sources":["hooks/before-app-shutdown.hook.ts"],"names":[],"mappings":";;;AACA,oEAAsE;AACtE,qCAAkC;AAClC,iFAGiD;AAIjD;;;;GAIG;AACH,SAAS,gCAAgC,CACvC,QAAiB;IAEjB,OAAO,IAAA,yBAAU,EACd,QAAsC,CAAC,yBAAyB,CAClE,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,SAAS,YAAY,CACnB,SAA4B,EAC5B,MAAe;IAEf,OAAO,IAAA,iBAAO,EAAC,SAAS,CAAC;SACtB,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,IAAA,oBAAK,EAAC,QAAQ,CAAC,CAAC;SACpC,MAAM,CAAC,gCAAgC,CAAC;SACxC,GAAG,CAAC,KAAK,EAAC,QAAQ,EAAC,EAAE,CACnB,QAA6C,CAAC,yBAAyB,CACtE,MAAM,CACP,CACF;SACA,OAAO,EAAE,CAAC;AACf,CAAC;AAED;;;;;;GAMG;AACI,KAAK,UAAU,yBAAyB,CAC7C,MAAc,EACd,MAAe;IAEf,MAAM,SAAS,GAAG,MAAM,CAAC,oBAAoB,EAAE,CAAC;IAChD,MAAM,CAAC,CAAC,EAAE,eAAe,CAAC,GAAG,SAAS,CAAC,KAAK,EAAE,CAAC;IAC/C,MAAM,SAAS,GAAG;QAChB,GAAG,MAAM,CAAC,WAAW;QACrB,GAAG,SAAS;QACZ,GAAG,MAAM,CAAC,WAAW;QACrB,GAAG,MAAM,CAAC,WAAW;KACtB,CAAC;IAEF,MAAM,qBAAqB,GAAG,IAAA,8CAAwB,EAAC,SAAS,CAAC,CAAC;IAClE,MAAM,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,qBAAqB,EAAE,MAAM,CAAC,CAAC,CAAC;IAC/D,MAAM,kBAAkB,GAAG,IAAA,2CAAqB,EAAC,SAAS,CAAC,CAAC;IAC5D,MAAM,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAAC,CAAC;IAE5D,MAAM,mBAAmB,GAAG,eAAe,CAAC,QAAQ,CAAC;IACrD,IACE,mBAAmB;QACnB,gCAAgC,CAAC,mBAAmB,CAAC;QACrD,eAAe,CAAC,sBAAsB,EAAE,EACxC;QACA,MACE,mBACD,CAAC,yBAAyB,CAAC,MAAM,CAAC,CAAC;KACrC;AACH,CAAC;AA5BD,8DA4BC","sourcesContent":["import { BeforeApplicationShutdown } from '@nestjs/common';\r\nimport { isFunction, isNil } from '@nestjs/common/utils/shared.utils';\r\nimport { iterate } from 'iterare';\r\nimport {\r\n  getNonTransientInstances,\r\n  getTransientInstances,\r\n} from '../injector/helpers/transient-instances';\r\nimport { InstanceWrapper } from '../injector/instance-wrapper';\r\nimport { Module } from '../injector/module';\r\n\r\n/**\r\n * Checks if the given instance has the `beforeApplicationShutdown` function\r\n *\r\n * @param instance The instance which should be checked\r\n */\r\nfunction hasBeforeApplicationShutdownHook(\r\n  instance: unknown,\r\n): instance is BeforeApplicationShutdown {\r\n  return isFunction(\r\n    (instance as BeforeApplicationShutdown).beforeApplicationShutdown,\r\n  );\r\n}\r\n\r\n/**\r\n * Calls the given instances\r\n */\r\nfunction callOperator(\r\n  instances: InstanceWrapper[],\r\n  signal?: string,\r\n): Promise<any>[] {\r\n  return iterate(instances)\r\n    .filter(instance => !isNil(instance))\r\n    .filter(hasBeforeApplicationShutdownHook)\r\n    .map(async instance =>\r\n      (instance as any as BeforeApplicationShutdown).beforeApplicationShutdown(\r\n        signal,\r\n      ),\r\n    )\r\n    .toArray();\r\n}\r\n\r\n/**\r\n * Calls the `beforeApplicationShutdown` function on the module and its children\r\n * (providers / controllers).\r\n *\r\n * @param module The module which will be initialized\r\n * @param signal The signal which caused the shutdown\r\n */\r\nexport async function callBeforeAppShutdownHook(\r\n  module: Module,\r\n  signal?: string,\r\n): Promise<void> {\r\n  const providers = module.getNonAliasProviders();\r\n  const [_, moduleClassHost] = providers.shift();\r\n  const instances = [\r\n    ...module.controllers,\r\n    ...providers,\r\n    ...module.injectables,\r\n    ...module.middlewares,\r\n  ];\r\n\r\n  const nonTransientInstances = getNonTransientInstances(instances);\r\n  await Promise.all(callOperator(nonTransientInstances, signal));\r\n  const transientInstances = getTransientInstances(instances);\r\n  await Promise.all(callOperator(transientInstances, signal));\r\n\r\n  const moduleClassInstance = moduleClassHost.instance;\r\n  if (\r\n    moduleClassInstance &&\r\n    hasBeforeApplicationShutdownHook(moduleClassInstance) &&\r\n    moduleClassHost.isDependencyTreeStatic()\r\n  ) {\r\n    await (\r\n      moduleClassInstance as BeforeApplicationShutdown\r\n    ).beforeApplicationShutdown(signal);\r\n  }\r\n}\r\n"]}