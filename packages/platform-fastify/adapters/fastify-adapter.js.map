{"version":3,"file":"fastify-adapter.js","sourceRoot":"","sources":["fastify-adapter.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  HttpStatus,\r\n  Logger,\r\n  RawBodyRequest,\r\n  RequestMethod,\r\n  StreamableFile,\r\n  VERSION_NEUTRAL,\r\n  VersioningOptions,\r\n  VersioningType,\r\n} from '@nestjs/common';\r\nimport { VersionValue } from '@nestjs/common/interfaces';\r\nimport {\r\n  CorsOptions,\r\n  CorsOptionsDelegate,\r\n} from '@nestjs/common/interfaces/external/cors-options.interface';\r\nimport { loadPackage } from '@nestjs/common/utils/load-package.util';\r\nimport { isString, isUndefined } from '@nestjs/common/utils/shared.utils';\r\nimport { AbstractHttpAdapter } from '@nestjs/core/adapters/http-adapter';\r\nimport {\r\n  FastifyBaseLogger,\r\n  FastifyBodyParser,\r\n  FastifyInstance,\r\n  FastifyListenOptions,\r\n  FastifyPluginAsync,\r\n  FastifyPluginCallback,\r\n  FastifyRegister,\r\n  FastifyReply,\r\n  FastifyRequest,\r\n  FastifyServerOptions,\r\n  RawReplyDefaultExpression,\r\n  RawRequestDefaultExpression,\r\n  RawServerBase,\r\n  RawServerDefault,\r\n  RequestGenericInterface,\r\n  fastify,\r\n} from 'fastify';\r\nimport * as Reply from 'fastify/lib/reply';\r\nimport { kRouteContext } from 'fastify/lib/symbols';\r\nimport { RouteShorthandMethod } from 'fastify/types/route';\r\nimport * as http2 from 'http2';\r\nimport * as https from 'https';\r\nimport {\r\n  InjectOptions,\r\n  Chain as LightMyRequestChain,\r\n  Response as LightMyRequestResponse,\r\n} from 'light-my-request';\r\nimport * as pathToRegexp from 'path-to-regexp';\r\n// `querystring` is used internally in fastify for registering urlencoded body parser.\r\nimport { parse as querystringParse } from 'querystring';\r\nimport { NestFastifyBodyParserOptions } from '../interfaces';\r\nimport {\r\n  FastifyStaticOptions,\r\n  FastifyViewOptions,\r\n} from '../interfaces/external';\r\n\r\ntype FastifyHttp2SecureOptions<\r\n  Server extends http2.Http2SecureServer,\r\n  Logger extends FastifyBaseLogger = FastifyBaseLogger,\r\n> = FastifyServerOptions<Server, Logger> & {\r\n  http2: true;\r\n  https: http2.SecureServerOptions;\r\n};\r\n\r\ntype FastifyHttp2Options<\r\n  Server extends http2.Http2Server,\r\n  Logger extends FastifyBaseLogger = FastifyBaseLogger,\r\n> = FastifyServerOptions<Server, Logger> & {\r\n  http2: true;\r\n  http2SessionTimeout?: number;\r\n};\r\n\r\ntype FastifyHttpsOptions<\r\n  Server extends https.Server,\r\n  Logger extends FastifyBaseLogger = FastifyBaseLogger,\r\n> = FastifyServerOptions<Server, Logger> & {\r\n  https: https.ServerOptions;\r\n};\r\n\r\ntype VersionedRoute<TRequest, TResponse> = ((\r\n  req: TRequest,\r\n  res: TResponse,\r\n  next: Function,\r\n) => Function) & {\r\n  version: VersionValue;\r\n  versioningOptions: VersioningOptions;\r\n};\r\n\r\n/**\r\n * The following type assertion is valid as we enforce \"middie\" plugin registration\r\n * which enhances the FastifyRequest.RawRequest with the \"originalUrl\" property.\r\n * ref https://github.com/fastify/middie/pull/16\r\n * ref https://github.com/fastify/fastify/pull/559\r\n */\r\ntype FastifyRawRequest<TServer extends RawServerBase> =\r\n  RawRequestDefaultExpression<TServer> & { originalUrl?: string };\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport class FastifyAdapter<\r\n  TServer extends RawServerBase = RawServerDefault,\r\n  TRawRequest extends FastifyRawRequest<TServer> = FastifyRawRequest<TServer>,\r\n  TRawResponse extends RawReplyDefaultExpression<TServer> = RawReplyDefaultExpression<TServer>,\r\n  TRequest extends FastifyRequest<\r\n    RequestGenericInterface,\r\n    TServer,\r\n    TRawRequest\r\n  > = FastifyRequest<RequestGenericInterface, TServer, TRawRequest>,\r\n  TReply extends FastifyReply<\r\n    TServer,\r\n    TRawRequest,\r\n    TRawResponse\r\n  > = FastifyReply<TServer, TRawRequest, TRawResponse>,\r\n  TInstance extends FastifyInstance<\r\n    TServer,\r\n    TRawRequest,\r\n    TRawResponse\r\n  > = FastifyInstance<TServer, TRawRequest, TRawResponse>,\r\n> extends AbstractHttpAdapter<TServer, TRequest, TReply> {\r\n  protected readonly instance: TInstance;\r\n\r\n  private _isParserRegistered: boolean;\r\n  private isMiddieRegistered: boolean;\r\n  private versioningOptions: VersioningOptions;\r\n  private readonly versionConstraint = {\r\n    name: 'version',\r\n    validate(value: unknown) {\r\n      if (!isString(value) && !Array.isArray(value)) {\r\n        throw new Error(\r\n          'Version constraint should be a string or an array of strings.',\r\n        );\r\n      }\r\n    },\r\n    storage() {\r\n      const versions = new Map<string, unknown>();\r\n      return {\r\n        get(version: string | Array<string>) {\r\n          if (Array.isArray(version)) {\r\n            return versions.get(version.find(v => versions.has(v))) || null;\r\n          }\r\n          return versions.get(version) || null;\r\n        },\r\n        set(versionOrVersions: string | Array<string>, store: unknown) {\r\n          const storeVersionConstraint = (version: string) =>\r\n            versions.set(version, store);\r\n          if (Array.isArray(versionOrVersions))\r\n            versionOrVersions.forEach(storeVersionConstraint);\r\n          else storeVersionConstraint(versionOrVersions);\r\n        },\r\n        del(version: string | Array<string>) {\r\n          if (Array.isArray(version)) {\r\n            version.forEach(v => versions.delete(v));\r\n          } else {\r\n            versions.delete(version);\r\n          }\r\n        },\r\n        empty() {\r\n          versions.clear();\r\n        },\r\n      };\r\n    },\r\n    deriveConstraint: (req: FastifyRequest) => {\r\n      // Media Type (Accept Header) Versioning Handler\r\n      if (this.versioningOptions.type === VersioningType.MEDIA_TYPE) {\r\n        const MEDIA_TYPE_HEADER = 'Accept';\r\n        const acceptHeaderValue: string | undefined = (req.headers?.[\r\n          MEDIA_TYPE_HEADER\r\n        ] || req.headers?.[MEDIA_TYPE_HEADER.toLowerCase()]) as string;\r\n\r\n        const acceptHeaderVersionParameter = acceptHeaderValue\r\n          ? acceptHeaderValue.split(';')[1]\r\n          : '';\r\n\r\n        return isUndefined(acceptHeaderVersionParameter)\r\n          ? VERSION_NEUTRAL // No version was supplied\r\n          : acceptHeaderVersionParameter.split(this.versioningOptions.key)[1];\r\n      }\r\n      // Header Versioning Handler\r\n      else if (this.versioningOptions.type === VersioningType.HEADER) {\r\n        const customHeaderVersionParameter: string | string[] | undefined =\r\n          req.headers?.[this.versioningOptions.header] ||\r\n          req.headers?.[this.versioningOptions.header.toLowerCase()];\r\n\r\n        return isUndefined(customHeaderVersionParameter)\r\n          ? VERSION_NEUTRAL // No version was supplied\r\n          : customHeaderVersionParameter;\r\n      }\r\n      // Custom Versioning Handler\r\n      else if (this.versioningOptions.type === VersioningType.CUSTOM) {\r\n        return this.versioningOptions.extractor(req);\r\n      }\r\n      return undefined;\r\n    },\r\n    mustMatchWhenDerived: false,\r\n  };\r\n\r\n  get isParserRegistered(): boolean {\r\n    return !!this._isParserRegistered;\r\n  }\r\n\r\n  constructor(\r\n    instanceOrOptions?:\r\n      | TInstance\r\n      | FastifyHttp2Options<any>\r\n      | FastifyHttp2SecureOptions<any>\r\n      | FastifyHttpsOptions<any>\r\n      | FastifyServerOptions<TServer>,\r\n  ) {\r\n    super();\r\n\r\n    const instance =\r\n      instanceOrOptions && (instanceOrOptions as TInstance).server\r\n        ? instanceOrOptions\r\n        : fastify({\r\n            constraints: {\r\n              version: this.versionConstraint as any,\r\n            },\r\n            ...(instanceOrOptions as FastifyServerOptions),\r\n          });\r\n    this.setInstance(instance);\r\n  }\r\n\r\n  public async init() {\r\n    if (this.isMiddieRegistered) {\r\n      return;\r\n    }\r\n    await this.registerMiddie();\r\n  }\r\n\r\n  public listen(port: string | number, callback?: () => void): void;\r\n  public listen(\r\n    port: string | number,\r\n    hostname: string,\r\n    callback?: () => void,\r\n  ): void;\r\n  public listen(\r\n    listenOptions: string | number | FastifyListenOptions,\r\n    ...args: any[]\r\n  ): void {\r\n    const isFirstArgTypeofFunction = typeof args[0] === 'function';\r\n    const callback = isFirstArgTypeofFunction ? args[0] : args[1];\r\n\r\n    let options: Record<string, any>;\r\n    if (\r\n      typeof listenOptions === 'object' &&\r\n      (listenOptions.host !== undefined ||\r\n        listenOptions.port !== undefined ||\r\n        listenOptions.path !== undefined)\r\n    ) {\r\n      // First parameter is an object with a path, port and/or host attributes\r\n      options = listenOptions;\r\n    } else {\r\n      options = {\r\n        port: +listenOptions,\r\n      };\r\n    }\r\n    if (!isFirstArgTypeofFunction) {\r\n      options.host = args[0];\r\n    }\r\n    return this.instance.listen(options, callback);\r\n  }\r\n\r\n  public get(...args: any[]) {\r\n    return this.injectConstraintsIfVersioned('get', ...args);\r\n  }\r\n\r\n  public post(...args: any[]) {\r\n    return this.injectConstraintsIfVersioned('post', ...args);\r\n  }\r\n\r\n  public head(...args: any[]) {\r\n    return this.injectConstraintsIfVersioned('head', ...args);\r\n  }\r\n\r\n  public delete(...args: any[]) {\r\n    return this.injectConstraintsIfVersioned('delete', ...args);\r\n  }\r\n\r\n  public put(...args: any[]) {\r\n    return this.injectConstraintsIfVersioned('put', ...args);\r\n  }\r\n\r\n  public patch(...args: any[]) {\r\n    return this.injectConstraintsIfVersioned('patch', ...args);\r\n  }\r\n\r\n  public options(...args: any[]) {\r\n    return this.injectConstraintsIfVersioned('options', ...args);\r\n  }\r\n\r\n  public applyVersionFilter(\r\n    handler: Function,\r\n    version: VersionValue,\r\n    versioningOptions: VersioningOptions,\r\n  ): VersionedRoute<TRequest, TReply> {\r\n    if (!this.versioningOptions) {\r\n      this.versioningOptions = versioningOptions;\r\n    }\r\n    const versionedRoute = handler as VersionedRoute<TRequest, TReply>;\r\n    versionedRoute.version = version;\r\n    return versionedRoute;\r\n  }\r\n\r\n  public reply(\r\n    response: TRawResponse | TReply,\r\n    body: any,\r\n    statusCode?: number,\r\n  ) {\r\n    const fastifyReply: TReply = this.isNativeResponse(response)\r\n      ? new Reply(\r\n          response,\r\n          {\r\n            [kRouteContext]: {\r\n              preSerialization: null,\r\n              preValidation: [],\r\n              preHandler: [],\r\n              onSend: [],\r\n              onError: [],\r\n            },\r\n          },\r\n          {},\r\n        )\r\n      : response;\r\n\r\n    if (statusCode) {\r\n      fastifyReply.status(statusCode);\r\n    }\r\n    if (body instanceof StreamableFile) {\r\n      const streamHeaders = body.getHeaders();\r\n      if (\r\n        fastifyReply.getHeader('Content-Type') === undefined &&\r\n        streamHeaders.type !== undefined\r\n      ) {\r\n        fastifyReply.header('Content-Type', streamHeaders.type);\r\n      }\r\n      if (\r\n        fastifyReply.getHeader('Content-Disposition') === undefined &&\r\n        streamHeaders.disposition !== undefined\r\n      ) {\r\n        fastifyReply.header('Content-Disposition', streamHeaders.disposition);\r\n      }\r\n      if (\r\n        fastifyReply.getHeader('Content-Length') === undefined &&\r\n        streamHeaders.length !== undefined\r\n      ) {\r\n        fastifyReply.header('Content-Length', streamHeaders.length);\r\n      }\r\n      body = body.getStream();\r\n    }\r\n    if (\r\n      fastifyReply.getHeader('Content-Type') !== undefined &&\r\n      fastifyReply.getHeader('Content-Type') !== 'application/json' &&\r\n      body?.statusCode >= HttpStatus.BAD_REQUEST\r\n    ) {\r\n      Logger.warn(\r\n        \"Content-Type doesn't match Reply body, you might need a custom ExceptionFilter for non-JSON responses\",\r\n        FastifyAdapter.name,\r\n      );\r\n      fastifyReply.header('Content-Type', 'application/json');\r\n    }\r\n    return fastifyReply.send(body);\r\n  }\r\n\r\n  public status(response: TRawResponse | TReply, statusCode: number) {\r\n    if (this.isNativeResponse(response)) {\r\n      response.statusCode = statusCode;\r\n      return response;\r\n    }\r\n    return (response as TReply).code(statusCode);\r\n  }\r\n\r\n  public end(response: TReply, message?: string) {\r\n    response.raw.end(message);\r\n  }\r\n\r\n  public render(\r\n    response: TReply & { view: Function },\r\n    view: string,\r\n    options: any,\r\n  ) {\r\n    return response && response.view(view, options);\r\n  }\r\n\r\n  public redirect(response: TReply, statusCode: number, url: string) {\r\n    const code = statusCode ?? HttpStatus.FOUND;\r\n    return response.status(code).redirect(url);\r\n  }\r\n\r\n  public setErrorHandler(handler: Parameters<TInstance['setErrorHandler']>[0]) {\r\n    return this.instance.setErrorHandler(handler);\r\n  }\r\n\r\n  public setNotFoundHandler(handler: Function) {\r\n    return this.instance.setNotFoundHandler(handler as any);\r\n  }\r\n\r\n  public getHttpServer<T = TServer>(): T {\r\n    return this.instance.server as unknown as T;\r\n  }\r\n\r\n  public getInstance<T = TInstance>(): T {\r\n    return this.instance as unknown as T;\r\n  }\r\n\r\n  public register<TRegister extends Parameters<FastifyRegister<TInstance>>>(\r\n    plugin: TRegister['0'],\r\n    opts?: TRegister['1'],\r\n  ) {\r\n    return this.instance.register(plugin, opts);\r\n  }\r\n\r\n  public inject(): LightMyRequestChain;\r\n  public inject(opts: InjectOptions | string): Promise<LightMyRequestResponse>;\r\n  public inject(\r\n    opts?: InjectOptions | string,\r\n  ): LightMyRequestChain | Promise<LightMyRequestResponse> {\r\n    return this.instance.inject(opts);\r\n  }\r\n\r\n  public async close() {\r\n    try {\r\n      return await this.instance.close();\r\n    } catch (err) {\r\n      // Check if server is still running\r\n      if (err.code !== 'ERR_SERVER_NOT_RUNNING') {\r\n        throw err;\r\n      }\r\n      return;\r\n    }\r\n  }\r\n\r\n  public initHttpServer() {\r\n    this.httpServer = this.instance.server;\r\n  }\r\n\r\n  public useStaticAssets(options: FastifyStaticOptions) {\r\n    return this.register(\r\n      loadPackage('@fastify/static', 'FastifyAdapter.useStaticAssets()', () =>\r\n        require('@fastify/static'),\r\n      ),\r\n      options,\r\n    );\r\n  }\r\n\r\n  public setViewEngine(options: FastifyViewOptions | string) {\r\n    if (isString(options)) {\r\n      new Logger('FastifyAdapter').error(\r\n        \"setViewEngine() doesn't support a string argument.\",\r\n      );\r\n      process.exit(1);\r\n    }\r\n    return this.register(\r\n      loadPackage('@fastify/view', 'FastifyAdapter.setViewEngine()', () =>\r\n        require('@fastify/view'),\r\n      ),\r\n      options,\r\n    );\r\n  }\r\n\r\n  public isHeadersSent(response: TReply): boolean {\r\n    return response.sent;\r\n  }\r\n\r\n  public setHeader(response: TReply, name: string, value: string) {\r\n    return response.header(name, value);\r\n  }\r\n\r\n  public getRequestHostname(request: TRequest): string {\r\n    return request.hostname;\r\n  }\r\n\r\n  public getRequestMethod(request: TRequest): string {\r\n    return request.raw ? request.raw.method : request.method;\r\n  }\r\n\r\n  public getRequestUrl(request: TRequest): string;\r\n  public getRequestUrl(request: TRawRequest): string;\r\n  public getRequestUrl(request: TRequest & TRawRequest): string {\r\n    return this.getRequestOriginalUrl(request.raw || request);\r\n  }\r\n\r\n  public enableCors(options: CorsOptions | CorsOptionsDelegate<TRequest>) {\r\n    this.register(\r\n      import('@fastify/cors') as Parameters<TInstance['register']>[0],\r\n      options,\r\n    );\r\n  }\r\n\r\n  public registerParserMiddleware(prefix?: string, rawBody?: boolean) {\r\n    if (this._isParserRegistered) {\r\n      return;\r\n    }\r\n\r\n    this.registerUrlencodedContentParser(rawBody);\r\n    this.registerJsonContentParser(rawBody);\r\n\r\n    this._isParserRegistered = true;\r\n  }\r\n\r\n  public useBodyParser(\r\n    type: string | string[] | RegExp,\r\n    rawBody: boolean,\r\n    options?: NestFastifyBodyParserOptions,\r\n    parser?: FastifyBodyParser<Buffer, TServer>,\r\n  ) {\r\n    const parserOptions = {\r\n      ...(options || {}),\r\n      parseAs: 'buffer' as const,\r\n    };\r\n\r\n    this.getInstance().addContentTypeParser<Buffer>(\r\n      type,\r\n      parserOptions,\r\n      (\r\n        req: RawBodyRequest<FastifyRequest<unknown, TServer, TRawRequest>>,\r\n        body: Buffer,\r\n        done,\r\n      ) => {\r\n        if (rawBody === true && Buffer.isBuffer(body)) {\r\n          req.rawBody = body;\r\n        }\r\n\r\n        if (parser) {\r\n          parser(req, body, done);\r\n          return;\r\n        }\r\n\r\n        done(null, body);\r\n      },\r\n    );\r\n\r\n    // To avoid the Nest application init to override our custom\r\n    // body parser, we mark the parsers as registered.\r\n    this._isParserRegistered = true;\r\n  }\r\n\r\n  public async createMiddlewareFactory(\r\n    requestMethod: RequestMethod,\r\n  ): Promise<(path: string, callback: Function) => any> {\r\n    if (!this.isMiddieRegistered) {\r\n      await this.registerMiddie();\r\n    }\r\n    return (path: string, callback: Function) => {\r\n      let normalizedPath = path.endsWith('/*')\r\n        ? `${path.slice(0, -1)}(.*)`\r\n        : path;\r\n\r\n      // Fallback to \"(.*)\" to support plugins like GraphQL\r\n      normalizedPath = normalizedPath === '/(.*)' ? '(.*)' : normalizedPath;\r\n\r\n      const re = pathToRegexp(normalizedPath);\r\n\r\n      // The following type assertion is valid as we use import('@fastify/middie') rather than require('@fastify/middie')\r\n      // ref https://github.com/fastify/middie/pull/55\r\n      this.instance.use(\r\n        normalizedPath,\r\n        (req: any, res: any, next: Function) => {\r\n          const queryParamsIndex = req.originalUrl.indexOf('?');\r\n          const pathname =\r\n            queryParamsIndex >= 0\r\n              ? req.originalUrl.slice(0, queryParamsIndex)\r\n              : req.originalUrl;\r\n\r\n          if (!re.exec(pathname + '/') && normalizedPath) {\r\n            return next();\r\n          }\r\n          return callback(req, res, next);\r\n        },\r\n      );\r\n    };\r\n  }\r\n\r\n  public getType(): string {\r\n    return 'fastify';\r\n  }\r\n\r\n  protected registerWithPrefix(\r\n    factory:\r\n      | FastifyPluginCallback<any>\r\n      | FastifyPluginAsync<any>\r\n      | Promise<{ default: FastifyPluginCallback<any> }>\r\n      | Promise<{ default: FastifyPluginAsync<any> }>,\r\n    prefix = '/',\r\n  ) {\r\n    return this.instance.register(factory, { prefix });\r\n  }\r\n\r\n  private isNativeResponse(\r\n    response: TRawResponse | TReply,\r\n  ): response is TRawResponse {\r\n    return !('status' in response);\r\n  }\r\n\r\n  private registerJsonContentParser(rawBody?: boolean) {\r\n    const contentType = 'application/json';\r\n    const withRawBody = !!rawBody;\r\n    const { bodyLimit } = this.getInstance().initialConfig;\r\n\r\n    this.useBodyParser(\r\n      contentType,\r\n      withRawBody,\r\n      { bodyLimit },\r\n      (req, body, done) => {\r\n        const { onProtoPoisoning, onConstructorPoisoning } =\r\n          this.instance.initialConfig;\r\n        const defaultJsonParser = this.instance.getDefaultJsonParser(\r\n          onProtoPoisoning || 'error',\r\n          onConstructorPoisoning || 'error',\r\n        ) as FastifyBodyParser<string | Buffer, TServer>;\r\n        defaultJsonParser(req, body, done);\r\n      },\r\n    );\r\n  }\r\n\r\n  private registerUrlencodedContentParser(rawBody?: boolean) {\r\n    const contentType = 'application/x-www-form-urlencoded';\r\n    const withRawBody = !!rawBody;\r\n    const { bodyLimit } = this.getInstance().initialConfig;\r\n\r\n    this.useBodyParser(\r\n      contentType,\r\n      withRawBody,\r\n      { bodyLimit },\r\n      (_req, body, done) => {\r\n        done(null, querystringParse(body.toString()));\r\n      },\r\n    );\r\n  }\r\n\r\n  private async registerMiddie() {\r\n    this.isMiddieRegistered = true;\r\n    await this.register(\r\n      import('@fastify/middie') as Parameters<TInstance['register']>[0],\r\n    );\r\n  }\r\n\r\n  private getRequestOriginalUrl(rawRequest: TRawRequest) {\r\n    return rawRequest.originalUrl || rawRequest.url;\r\n  }\r\n\r\n  private injectConstraintsIfVersioned(\r\n    routerMethodKey:\r\n      | 'get'\r\n      | 'post'\r\n      | 'put'\r\n      | 'delete'\r\n      | 'options'\r\n      | 'patch'\r\n      | 'head',\r\n    ...args: any[]\r\n  ) {\r\n    const handlerRef = args[args.length - 1];\r\n    const isVersioned =\r\n      !isUndefined(handlerRef.version) &&\r\n      handlerRef.version !== VERSION_NEUTRAL;\r\n\r\n    if (isVersioned) {\r\n      const isPathAndRouteTuple = args.length === 2;\r\n      if (isPathAndRouteTuple) {\r\n        const options = {\r\n          constraints: {\r\n            version: handlerRef.version,\r\n          },\r\n        };\r\n        const path = args[0];\r\n        return this.instance[routerMethodKey](path, options, handlerRef);\r\n      }\r\n    }\r\n    return this.instance[routerMethodKey](\r\n      ...(args as Parameters<\r\n        RouteShorthandMethod<TServer, TRawRequest, TRawResponse>\r\n      >),\r\n    );\r\n  }\r\n}\r\n"]}