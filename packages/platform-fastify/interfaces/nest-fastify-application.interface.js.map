{"version":3,"file":"nest-fastify-application.interface.js","sourceRoot":"","sources":["nest-fastify-application.interface.ts"],"names":[],"mappings":"","sourcesContent":["import { INestApplication, HttpServer } from '@nestjs/common';\r\nimport {\r\n  FastifyBodyParser,\r\n  FastifyInstance,\r\n  FastifyPluginAsync,\r\n  FastifyPluginCallback,\r\n  FastifyPluginOptions,\r\n  FastifyRegisterOptions,\r\n  FastifyRequest,\r\n  FastifyReply,\r\n  RawServerBase,\r\n  RawServerDefault,\r\n} from 'fastify';\r\nimport {\r\n  Chain as LightMyRequestChain,\r\n  InjectOptions,\r\n  Response as LightMyRequestResponse,\r\n} from 'light-my-request';\r\nimport { FastifyStaticOptions, FastifyViewOptions } from './external';\r\nimport { NestFastifyBodyParserOptions } from './nest-fastify-body-parser-options.interface';\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport interface NestFastifyApplication<\r\n  TServer extends RawServerBase = RawServerDefault,\r\n> extends INestApplication<TServer> {\r\n  /**\r\n   * Returns the underlying HTTP adapter bounded to a Fastify app.\r\n   *\r\n   * @returns {HttpServer}\r\n   */\r\n  getHttpAdapter(): HttpServer<FastifyRequest, FastifyReply, FastifyInstance>;\r\n\r\n  /**\r\n   * A wrapper function around native `fastify.register()` method.\r\n   * Example `app.register(require('@fastify/formbody'))\r\n   * @returns {Promise<FastifyInstance>}\r\n   */\r\n  register<Options extends FastifyPluginOptions = any>(\r\n    plugin:\r\n      | FastifyPluginCallback<Options>\r\n      | FastifyPluginAsync<Options>\r\n      | Promise<{ default: FastifyPluginCallback<Options> }>\r\n      | Promise<{ default: FastifyPluginAsync<Options> }>,\r\n    opts?: FastifyRegisterOptions<Options>,\r\n  ): Promise<FastifyInstance>;\r\n\r\n  /**\r\n   * Register Fastify body parsers on the fly. Will respect\r\n   * the application's `rawBody` option.\r\n   *\r\n   * @example\r\n   * const app = await NestFactory.create<NestFastifyApplication>(\r\n   *   AppModule,\r\n   *   new FastifyAdapter(),\r\n   *   { rawBody: true }\r\n   * );\r\n   * // enable the json parser with a parser limit of 50mb\r\n   * app.useBodyParser('application/json', { bodyLimit: 50 * 1000 * 1024 });\r\n   *\r\n   * @returns {this}\r\n   */\r\n  useBodyParser<TServer extends RawServerBase = RawServerBase>(\r\n    type: string | string[] | RegExp,\r\n    options?: NestFastifyBodyParserOptions,\r\n    parser?: FastifyBodyParser<Buffer, TServer>,\r\n  ): this;\r\n\r\n  /**\r\n   * Sets a base directory for public assets.\r\n   * Example `app.useStaticAssets({ root: 'public' })`\r\n   * @returns {this}\r\n   */\r\n  useStaticAssets(options: FastifyStaticOptions): this;\r\n\r\n  /**\r\n   * Sets a view engine for templates (views), for example: `pug`, `handlebars`, or `ejs`.\r\n   *\r\n   * Don't pass in a string. The string type in the argument is for compatibility reason and will cause an exception.\r\n   * @returns {this}\r\n   */\r\n  setViewEngine(options: FastifyViewOptions | string): this;\r\n\r\n  /**\r\n   * A wrapper function around native `fastify.inject()` method.\r\n   * @returns {void}\r\n   */\r\n  inject(): LightMyRequestChain;\r\n  inject(opts: InjectOptions | string): Promise<LightMyRequestResponse>;\r\n\r\n  /**\r\n   * Starts the application.\r\n   * @returns A Promise that, when resolved, is a reference to the underlying HttpServer.\r\n   */\r\n  listen(\r\n    port: number | string,\r\n    callback?: (err: Error, address: string) => void,\r\n  ): Promise<TServer>;\r\n  listen(\r\n    port: number | string,\r\n    address: string,\r\n    callback?: (err: Error, address: string) => void,\r\n  ): Promise<TServer>;\r\n  listen(\r\n    port: number | string,\r\n    address: string,\r\n    backlog: number,\r\n    callback?: (err: Error, address: string) => void,\r\n  ): Promise<TServer>;\r\n}\r\n"]}