{"version":3,"file":"testing-module.js","sourceRoot":"","sources":["testing-module.ts"],"names":[],"mappings":";;;AAAA,2CAOwB;AAGxB,8EAAqE;AACrE,oEAAgE;AAChE,uCAIsB;AAMtB;;GAEG;AACH,MAAa,aAAc,SAAQ,6BAAsB;IAGvD,YACE,SAAwB,EACxB,cAA8B,EAC9B,aAAqB,EACJ,iBAAoC,EACrD,QAAqB,EAAE;QAEvB,MAAM,OAAO,GAAG,EAAE,CAAC;QACnB,KAAK,CAAC,SAAS,EAAE,OAAO,EAAE,aAAa,EAAE,KAAK,CAAC,CAAC;QAJ/B,sBAAiB,GAAjB,iBAAiB,CAAmB;QAMrD,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IACvC,CAAC;IAEO,YAAY,CAClB,eAIa;QAEb,OAAO,CAAC,CAAC,CAAC,eAAe,IAAK,eAA8B,CAAC,KAAK,CAAC,CAAC;IACtE,CAAC;IASM,qBAAqB,CAC1B,eAIa,EACb,OAAgC;QAEhC,MAAM,CAAC,WAAW,EAAE,UAAU,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC;YAClE,CAAC,CAAC,CAAC,eAAe,EAAE,OAAO,CAAC;YAC5B,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,EAAE,EAAE,eAAe,CAAC,CAAC;QAEhD,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;QAC7B,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;QAE3C,MAAM,QAAQ,GAAG,IAAI,sBAAe,CAClC,IAAI,CAAC,SAAS,EACd,WAAW,EACX,IAAI,CAAC,iBAAiB,EACtB,IAAI,CAAC,cAAc,EACnB,UAAU,CACX,CAAC;QACF,OAAO,IAAI,CAAC,kBAAkB,CAAI,QAAQ,EAAE,WAAW,CAAC,CAAC;IAC3D,CAAC;IAEM,sBAAsB,CAC3B,OAAoC;QAEpC,MAAM,EAAE,gBAAgB,EAAE,GAAG,IAAA,+BAAW,EACtC,uBAAuB,EACvB,eAAe,EACf,GAAG,EAAE,CAAC,OAAO,CAAC,uBAAuB,CAAC,CACvC,CAAC;QACF,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QAC1B,OAAO,IAAI,gBAAgB,CACzB,IAAI,CAAC,SAAS,EACd,OAAO,EACP,IAAI,CAAC,cAAc,EACnB,IAAI,CAAC,iBAAiB,CACvB,CAAC;IACJ,CAAC;IAEO,iBAAiB,CAAU,UAAc;QAC/C,MAAM,EAAE,cAAc,EAAE,GAAG,IAAA,+BAAW,EACpC,0BAA0B,EAC1B,aAAa,EACb,GAAG,EAAE,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAC1C,CAAC;QACF,OAAO,IAAI,cAAc,CAAC,UAAU,CAAC,CAAC;IACxC,CAAC;IAEO,WAAW,CAAC,OAAkD;QACpE,IAAI,CAAC,OAAO,IAAI,IAAA,0BAAW,EAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YAC3C,OAAO;SACR;QACD,eAAM,CAAC,cAAc,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACxC,CAAC;IAEO,kBAAkB,CAAI,GAAoB,EAAE,OAAmB;QACrE,OAAO,IAAI,KAAK,CAAC,GAAG,EAAE;YACpB,GAAG,EAAE,CAAC,QAA6B,EAAE,IAAY,EAAE,EAAE;gBACnD,IAAI,CAAC,CAAC,IAAI,IAAI,QAAQ,CAAC,IAAI,IAAI,IAAI,OAAO,EAAE;oBAC1C,OAAO,OAAO,CAAC,IAAI,CAAC,CAAC;iBACtB;gBACD,OAAO,QAAQ,CAAC,IAAI,CAAC,CAAC;YACxB,CAAC;SACF,CAAa,CAAC;IACjB,CAAC;CACF;AArGD,sCAqGC","sourcesContent":["import {\r\n  HttpServer,\r\n  INestApplication,\r\n  INestMicroservice,\r\n  Logger,\r\n  NestApplicationOptions,\r\n  Type,\r\n} from '@nestjs/common';\r\nimport { NestMicroserviceOptions } from '@nestjs/common/interfaces/microservices/nest-microservice-options.interface';\r\nimport { NestApplicationContextOptions } from '@nestjs/common/interfaces/nest-application-context-options.interface';\r\nimport { loadPackage } from '@nestjs/common/utils/load-package.util';\r\nimport { isUndefined } from '@nestjs/common/utils/shared.utils';\r\nimport {\r\n  AbstractHttpAdapter,\r\n  NestApplication,\r\n  NestApplicationContext,\r\n} from '@nestjs/core';\r\nimport { ApplicationConfig } from '@nestjs/core/application-config';\r\nimport { NestContainer } from '@nestjs/core/injector/container';\r\nimport { Module } from '@nestjs/core/injector/module';\r\nimport { GraphInspector } from '@nestjs/core/inspector/graph-inspector';\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport class TestingModule extends NestApplicationContext {\r\n  protected readonly graphInspector: GraphInspector;\r\n\r\n  constructor(\r\n    container: NestContainer,\r\n    graphInspector: GraphInspector,\r\n    contextModule: Module,\r\n    private readonly applicationConfig: ApplicationConfig,\r\n    scope: Type<any>[] = [],\r\n  ) {\r\n    const options = {};\r\n    super(container, options, contextModule, scope);\r\n\r\n    this.graphInspector = graphInspector;\r\n  }\r\n\r\n  private isHttpServer(\r\n    serverOrOptions:\r\n      | HttpServer\r\n      | AbstractHttpAdapter\r\n      | NestApplicationOptions\r\n      | undefined,\r\n  ): serverOrOptions is HttpServer | AbstractHttpAdapter {\r\n    return !!(serverOrOptions && (serverOrOptions as HttpServer).patch);\r\n  }\r\n\r\n  public createNestApplication<T extends INestApplication = INestApplication>(\r\n    httpAdapter: HttpServer | AbstractHttpAdapter,\r\n    options?: NestApplicationOptions,\r\n  ): T;\r\n  public createNestApplication<T extends INestApplication = INestApplication>(\r\n    options?: NestApplicationOptions,\r\n  ): T;\r\n  public createNestApplication<T extends INestApplication = INestApplication>(\r\n    serverOrOptions:\r\n      | HttpServer\r\n      | AbstractHttpAdapter\r\n      | NestApplicationOptions\r\n      | undefined,\r\n    options?: NestApplicationOptions,\r\n  ): T {\r\n    const [httpAdapter, appOptions] = this.isHttpServer(serverOrOptions)\r\n      ? [serverOrOptions, options]\r\n      : [this.createHttpAdapter(), serverOrOptions];\r\n\r\n    this.applyLogger(appOptions);\r\n    this.container.setHttpAdapter(httpAdapter);\r\n\r\n    const instance = new NestApplication(\r\n      this.container,\r\n      httpAdapter,\r\n      this.applicationConfig,\r\n      this.graphInspector,\r\n      appOptions,\r\n    );\r\n    return this.createAdapterProxy<T>(instance, httpAdapter);\r\n  }\r\n\r\n  public createNestMicroservice<T extends object>(\r\n    options: NestMicroserviceOptions & T,\r\n  ): INestMicroservice {\r\n    const { NestMicroservice } = loadPackage(\r\n      '@nestjs/microservices',\r\n      'TestingModule',\r\n      () => require('@nestjs/microservices'),\r\n    );\r\n    this.applyLogger(options);\r\n    return new NestMicroservice(\r\n      this.container,\r\n      options,\r\n      this.graphInspector,\r\n      this.applicationConfig,\r\n    );\r\n  }\r\n\r\n  private createHttpAdapter<T = any>(httpServer?: T): AbstractHttpAdapter {\r\n    const { ExpressAdapter } = loadPackage(\r\n      '@nestjs/platform-express',\r\n      'NestFactory',\r\n      () => require('@nestjs/platform-express'),\r\n    );\r\n    return new ExpressAdapter(httpServer);\r\n  }\r\n\r\n  private applyLogger(options: NestApplicationContextOptions | undefined) {\r\n    if (!options || isUndefined(options.logger)) {\r\n      return;\r\n    }\r\n    Logger.overrideLogger(options.logger);\r\n  }\r\n\r\n  private createAdapterProxy<T>(app: NestApplication, adapter: HttpServer): T {\r\n    return new Proxy(app, {\r\n      get: (receiver: Record<string, any>, prop: string) => {\r\n        if (!(prop in receiver) && prop in adapter) {\r\n          return adapter[prop];\r\n        }\r\n        return receiver[prop];\r\n      },\r\n    }) as any as T;\r\n  }\r\n}\r\n"]}