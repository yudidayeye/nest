{"version":3,"file":"testing-module.builder.js","sourceRoot":"","sources":["testing-module.builder.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger, LoggerService, Module, ModuleMetadata } from '@nestjs/common';\r\nimport { NestApplicationContextOptions } from '@nestjs/common/interfaces/nest-application-context-options.interface';\r\nimport { ApplicationConfig } from '@nestjs/core/application-config';\r\nimport { NestContainer } from '@nestjs/core/injector/container';\r\nimport { GraphInspector } from '@nestjs/core/inspector/graph-inspector';\r\nimport { NoopGraphInspector } from '@nestjs/core/inspector/noop-graph-inspector';\r\nimport {\r\n  UuidFactory,\r\n  UuidFactoryMode,\r\n} from '@nestjs/core/inspector/uuid-factory';\r\nimport { ModuleDefinition } from '@nestjs/core/interfaces/module-definition.interface';\r\nimport { ModuleOverride } from '@nestjs/core/interfaces/module-override.interface';\r\nimport { MetadataScanner } from '@nestjs/core/metadata-scanner';\r\nimport { DependenciesScanner } from '@nestjs/core/scanner';\r\nimport {\r\n  MockFactory,\r\n  OverrideBy,\r\n  OverrideByFactoryOptions,\r\n} from './interfaces';\r\nimport { OverrideModule } from './interfaces/override-module.interface';\r\nimport { TestingLogger } from './services/testing-logger.service';\r\nimport { TestingInjector } from './testing-injector';\r\nimport { TestingInstanceLoader } from './testing-instance-loader';\r\nimport { TestingModule } from './testing-module';\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport class TestingModuleBuilder {\r\n  private readonly applicationConfig = new ApplicationConfig();\r\n  private readonly container = new NestContainer(this.applicationConfig);\r\n  private readonly overloadsMap = new Map();\r\n  private readonly moduleOverloadsMap = new Map<\r\n    ModuleDefinition,\r\n    ModuleDefinition\r\n  >();\r\n  private readonly module: any;\r\n  private testingLogger: LoggerService;\r\n  private mocker?: MockFactory;\r\n\r\n  constructor(\r\n    private readonly metadataScanner: MetadataScanner,\r\n    metadata: ModuleMetadata,\r\n  ) {\r\n    this.module = this.createModule(metadata);\r\n  }\r\n\r\n  public setLogger(testingLogger: LoggerService) {\r\n    this.testingLogger = testingLogger;\r\n    return this;\r\n  }\r\n\r\n  public overridePipe<T = any>(typeOrToken: T): OverrideBy {\r\n    return this.override(typeOrToken, false);\r\n  }\r\n\r\n  public useMocker(mocker: MockFactory): TestingModuleBuilder {\r\n    this.mocker = mocker;\r\n    return this;\r\n  }\r\n\r\n  public overrideFilter<T = any>(typeOrToken: T): OverrideBy {\r\n    return this.override(typeOrToken, false);\r\n  }\r\n\r\n  public overrideGuard<T = any>(typeOrToken: T): OverrideBy {\r\n    return this.override(typeOrToken, false);\r\n  }\r\n\r\n  public overrideInterceptor<T = any>(typeOrToken: T): OverrideBy {\r\n    return this.override(typeOrToken, false);\r\n  }\r\n\r\n  public overrideProvider<T = any>(typeOrToken: T): OverrideBy {\r\n    return this.override(typeOrToken, true);\r\n  }\r\n\r\n  public overrideModule(moduleToOverride: ModuleDefinition): OverrideModule {\r\n    return {\r\n      useModule: newModule => {\r\n        this.moduleOverloadsMap.set(moduleToOverride, newModule);\r\n        return this;\r\n      },\r\n    };\r\n  }\r\n\r\n  public async compile(\r\n    options: Pick<NestApplicationContextOptions, 'snapshot' | 'preview'> = {},\r\n  ): Promise<TestingModule> {\r\n    this.applyLogger();\r\n\r\n    let graphInspector: GraphInspector;\r\n    if (options?.snapshot) {\r\n      graphInspector = new GraphInspector(this.container);\r\n      UuidFactory.mode = UuidFactoryMode.Deterministic;\r\n    } else {\r\n      graphInspector = NoopGraphInspector;\r\n      UuidFactory.mode = UuidFactoryMode.Random;\r\n    }\r\n\r\n    const scanner = new DependenciesScanner(\r\n      this.container,\r\n      this.metadataScanner,\r\n      graphInspector,\r\n      this.applicationConfig,\r\n    );\r\n    await scanner.scan(this.module, {\r\n      overrides: this.getModuleOverloads(),\r\n    });\r\n\r\n    this.applyOverloadsMap();\r\n    await this.createInstancesOfDependencies(graphInspector, options);\r\n    scanner.applyApplicationProviders();\r\n\r\n    const root = this.getRootModule();\r\n    return new TestingModule(\r\n      this.container,\r\n      graphInspector,\r\n      root,\r\n      this.applicationConfig,\r\n    );\r\n  }\r\n\r\n  private override<T = any>(typeOrToken: T, isProvider: boolean): OverrideBy {\r\n    const addOverload = (options: any) => {\r\n      this.overloadsMap.set(typeOrToken, {\r\n        ...options,\r\n        isProvider,\r\n      });\r\n      return this;\r\n    };\r\n    return this.createOverrideByBuilder(addOverload);\r\n  }\r\n\r\n  private createOverrideByBuilder(\r\n    add: (provider: any) => TestingModuleBuilder,\r\n  ): OverrideBy {\r\n    return {\r\n      useValue: value => add({ useValue: value }),\r\n      useFactory: (options: OverrideByFactoryOptions) =>\r\n        add({ ...options, useFactory: options.factory }),\r\n      useClass: metatype => add({ useClass: metatype }),\r\n    };\r\n  }\r\n\r\n  private applyOverloadsMap() {\r\n    const overloads = [...this.overloadsMap.entries()];\r\n    overloads.forEach(([item, options]) => {\r\n      this.container.replace(item, options);\r\n    });\r\n  }\r\n\r\n  private getModuleOverloads(): ModuleOverride[] {\r\n    const overloads = [...this.moduleOverloadsMap.entries()];\r\n    return overloads.map(([moduleToReplace, newModule]) => ({\r\n      moduleToReplace,\r\n      newModule,\r\n    }));\r\n  }\r\n\r\n  private getRootModule() {\r\n    const modules = this.container.getModules().values();\r\n    return modules.next().value;\r\n  }\r\n\r\n  private async createInstancesOfDependencies(\r\n    graphInspector: GraphInspector,\r\n    options: { preview?: boolean },\r\n  ) {\r\n    const injector = new TestingInjector({\r\n      preview: options?.preview ?? false,\r\n    });\r\n    const instanceLoader = new TestingInstanceLoader(\r\n      this.container,\r\n      injector,\r\n      graphInspector,\r\n    );\r\n    await instanceLoader.createInstancesOfDependencies(\r\n      this.container.getModules(),\r\n      this.mocker,\r\n    );\r\n  }\r\n\r\n  private createModule(metadata: ModuleMetadata) {\r\n    class RootTestModule {}\r\n    Module(metadata)(RootTestModule);\r\n    return RootTestModule;\r\n  }\r\n\r\n  private applyLogger() {\r\n    Logger.overrideLogger(this.testingLogger || new TestingLogger());\r\n  }\r\n}\r\n"]}