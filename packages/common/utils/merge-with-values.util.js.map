{"version":3,"file":"merge-with-values.util.js","sourceRoot":"","sources":["merge-with-values.util.ts"],"names":[],"mappings":";;;AAEO,MAAM,eAAe,GAAG,CAA4B,IAE1D,EAAE,EAAE;IACH,OAAO,CAAC,QAAW,EAAO,EAAE;QAC1B,MAAM,IAAI,GAAG,KAAM,SAAQ,QAAQ;YACjC,YAAY,GAAG,IAAW;gBACxB,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC;YACjB,CAAC;SACF,CAAC;QACF,MAAM,KAAK,GAAG,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACnD,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;QACtD,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QACpC,OAAO,IAAI,CAAC;IACd,CAAC,CAAC;AACJ,CAAC,CAAC;AAdW,QAAA,eAAe,mBAc1B","sourcesContent":["export type Constructor<T> = new (...args: any[]) => T;\r\n\r\nexport const MergeWithValues = <T extends Constructor<{}>>(data: {\r\n  [param: string]: any;\r\n}) => {\r\n  return (Metatype: T): any => {\r\n    const Type = class extends Metatype {\r\n      constructor(...args: any[]) {\r\n        super(...args);\r\n      }\r\n    };\r\n    const token = Metatype.name + JSON.stringify(data);\r\n    Object.defineProperty(Type, 'name', { value: token });\r\n    Object.assign(Type.prototype, data);\r\n    return Type;\r\n  };\r\n};\r\n"]}