{"version":3,"file":"is-log-level-enabled.util.js","sourceRoot":"","sources":["is-log-level-enabled.util.ts"],"names":[],"mappings":";;;AAEA,MAAM,gBAAgB,GAA6B;IACjD,OAAO,EAAE,CAAC;IACV,KAAK,EAAE,CAAC;IACR,GAAG,EAAE,CAAC;IACN,IAAI,EAAE,CAAC;IACP,KAAK,EAAE,CAAC;CACT,CAAC;AAEF;;;;GAIG;AACH,SAAgB,iBAAiB,CAC/B,WAAqB,EACrB,SAAiC;IAEjC,IAAI,CAAC,SAAS,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,SAAS,EAAE,MAAM,KAAK,CAAC,CAAC,EAAE;QACvE,OAAO,KAAK,CAAC;KACd;IACD,IAAI,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE;QACnC,OAAO,IAAI,CAAC;KACb;IACD,MAAM,oBAAoB,GAAG,SAAS;SACnC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;SACrC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAE9B,MAAM,gBAAgB,GAAG,gBAAgB,CAAC,WAAW,CAAC,CAAC;IACvD,OAAO,gBAAgB,IAAI,oBAAoB,CAAC;AAClD,CAAC;AAhBD,8CAgBC","sourcesContent":["import { LogLevel } from '../logger.service';\r\n\r\nconst LOG_LEVEL_VALUES: Record<LogLevel, number> = {\r\n  verbose: 0,\r\n  debug: 1,\r\n  log: 2,\r\n  warn: 3,\r\n  error: 4,\r\n};\r\n\r\n/**\r\n * Checks if target level is enabled.\r\n * @param targetLevel target level\r\n * @param logLevels array of enabled log levels\r\n */\r\nexport function isLogLevelEnabled(\r\n  targetLevel: LogLevel,\r\n  logLevels: LogLevel[] | undefined,\r\n): boolean {\r\n  if (!logLevels || (Array.isArray(logLevels) && logLevels?.length === 0)) {\r\n    return false;\r\n  }\r\n  if (logLevels.includes(targetLevel)) {\r\n    return true;\r\n  }\r\n  const highestLogLevelValue = logLevels\r\n    .map(level => LOG_LEVEL_VALUES[level])\r\n    .sort((a, b) => b - a)?.[0];\r\n\r\n  const targetLevelValue = LOG_LEVEL_VALUES[targetLevel];\r\n  return targetLevelValue >= highestLogLevelValue;\r\n}\r\n"]}