{"version":3,"file":"console-logger.service.js","sourceRoot":"","sources":["console-logger.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Optional } from '../decorators/core';\r\nimport { clc, yellow } from '../utils/cli-colors.util';\r\nimport {\r\n  isFunction,\r\n  isPlainObject,\r\n  isString,\r\n  isUndefined,\r\n} from '../utils/shared.utils';\r\nimport { LoggerService, LogLevel } from './logger.service';\r\nimport { isLogLevelEnabled } from './utils';\r\n\r\nexport interface ConsoleLoggerOptions {\r\n  /**\r\n   * Enabled log levels.\r\n   */\r\n  logLevels?: LogLevel[];\r\n  /**\r\n   * If enabled, will print timestamp (time difference) between current and previous log message.\r\n   */\r\n  timestamp?: boolean;\r\n}\r\n\r\nconst DEFAULT_LOG_LEVELS: LogLevel[] = [\r\n  'log',\r\n  'error',\r\n  'warn',\r\n  'debug',\r\n  'verbose',\r\n];\r\n\r\nconst dateTimeFormatter = new Intl.DateTimeFormat(undefined, {\r\n  year: 'numeric',\r\n  hour: 'numeric',\r\n  minute: 'numeric',\r\n  second: 'numeric',\r\n  day: '2-digit',\r\n  month: '2-digit',\r\n});\r\n\r\n@Injectable()\r\nexport class ConsoleLogger implements LoggerService {\r\n  private static lastTimestampAt?: number;\r\n  private originalContext?: string;\r\n\r\n  constructor();\r\n  constructor(context: string);\r\n  constructor(context: string, options: ConsoleLoggerOptions);\r\n  constructor(\r\n    @Optional()\r\n    protected context?: string,\r\n    @Optional()\r\n    protected options: ConsoleLoggerOptions = {},\r\n  ) {\r\n    if (!options.logLevels) {\r\n      options.logLevels = DEFAULT_LOG_LEVELS;\r\n    }\r\n    if (context) {\r\n      this.originalContext = context;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Write a 'log' level log, if the configured level allows for it.\r\n   * Prints to `stdout` with newline.\r\n   */\r\n  log(message: any, context?: string): void;\r\n  log(message: any, ...optionalParams: [...any, string?]): void;\r\n  log(message: any, ...optionalParams: any[]) {\r\n    if (!this.isLevelEnabled('log')) {\r\n      return;\r\n    }\r\n    const { messages, context } = this.getContextAndMessagesToPrint([\r\n      message,\r\n      ...optionalParams,\r\n    ]);\r\n    this.printMessages(messages, context, 'log');\r\n  }\r\n\r\n  /**\r\n   * Write an 'error' level log, if the configured level allows for it.\r\n   * Prints to `stderr` with newline.\r\n   */\r\n  error(message: any, stackOrContext?: string): void;\r\n  error(message: any, stack?: string, context?: string): void;\r\n  error(message: any, ...optionalParams: [...any, string?, string?]): void;\r\n  error(message: any, ...optionalParams: any[]) {\r\n    if (!this.isLevelEnabled('error')) {\r\n      return;\r\n    }\r\n    const { messages, context, stack } =\r\n      this.getContextAndStackAndMessagesToPrint([message, ...optionalParams]);\r\n\r\n    this.printMessages(messages, context, 'error', 'stderr');\r\n    this.printStackTrace(stack);\r\n  }\r\n\r\n  /**\r\n   * Write a 'warn' level log, if the configured level allows for it.\r\n   * Prints to `stdout` with newline.\r\n   */\r\n  warn(message: any, context?: string): void;\r\n  warn(message: any, ...optionalParams: [...any, string?]): void;\r\n  warn(message: any, ...optionalParams: any[]) {\r\n    if (!this.isLevelEnabled('warn')) {\r\n      return;\r\n    }\r\n    const { messages, context } = this.getContextAndMessagesToPrint([\r\n      message,\r\n      ...optionalParams,\r\n    ]);\r\n    this.printMessages(messages, context, 'warn');\r\n  }\r\n\r\n  /**\r\n   * Write a 'debug' level log, if the configured level allows for it.\r\n   * Prints to `stdout` with newline.\r\n   */\r\n  debug(message: any, context?: string): void;\r\n  debug(message: any, ...optionalParams: [...any, string?]): void;\r\n  debug(message: any, ...optionalParams: any[]) {\r\n    if (!this.isLevelEnabled('debug')) {\r\n      return;\r\n    }\r\n    const { messages, context } = this.getContextAndMessagesToPrint([\r\n      message,\r\n      ...optionalParams,\r\n    ]);\r\n    this.printMessages(messages, context, 'debug');\r\n  }\r\n\r\n  /**\r\n   * Write a 'verbose' level log, if the configured level allows for it.\r\n   * Prints to `stdout` with newline.\r\n   */\r\n  verbose(message: any, context?: string): void;\r\n  verbose(message: any, ...optionalParams: [...any, string?]): void;\r\n  verbose(message: any, ...optionalParams: any[]) {\r\n    if (!this.isLevelEnabled('verbose')) {\r\n      return;\r\n    }\r\n    const { messages, context } = this.getContextAndMessagesToPrint([\r\n      message,\r\n      ...optionalParams,\r\n    ]);\r\n    this.printMessages(messages, context, 'verbose');\r\n  }\r\n\r\n  /**\r\n   * Set log levels\r\n   * @param levels log levels\r\n   */\r\n  setLogLevels(levels: LogLevel[]) {\r\n    if (!this.options) {\r\n      this.options = {};\r\n    }\r\n    this.options.logLevels = levels;\r\n  }\r\n\r\n  /**\r\n   * Set logger context\r\n   * @param context context\r\n   */\r\n  setContext(context: string) {\r\n    this.context = context;\r\n  }\r\n\r\n  /**\r\n   * Resets the logger context to the value that was passed in the constructor.\r\n   */\r\n  resetContext() {\r\n    this.context = this.originalContext;\r\n  }\r\n\r\n  isLevelEnabled(level: LogLevel): boolean {\r\n    const logLevels = this.options?.logLevels;\r\n    return isLogLevelEnabled(level, logLevels);\r\n  }\r\n\r\n  protected getTimestamp(): string {\r\n    return dateTimeFormatter.format(Date.now());\r\n  }\r\n\r\n  protected printMessages(\r\n    messages: unknown[],\r\n    context = '',\r\n    logLevel: LogLevel = 'log',\r\n    writeStreamType?: 'stdout' | 'stderr',\r\n  ) {\r\n    messages.forEach(message => {\r\n      const pidMessage = this.formatPid(process.pid);\r\n      const contextMessage = this.formatContext(context);\r\n      const timestampDiff = this.updateAndGetTimestampDiff();\r\n      const formattedLogLevel = logLevel.toUpperCase().padStart(7, ' ');\r\n      const formattedMessage = this.formatMessage(\r\n        logLevel,\r\n        message,\r\n        pidMessage,\r\n        formattedLogLevel,\r\n        contextMessage,\r\n        timestampDiff,\r\n      );\r\n\r\n      process[writeStreamType ?? 'stdout'].write(formattedMessage);\r\n    });\r\n  }\r\n\r\n  protected formatPid(pid: number) {\r\n    return `[Nest] ${pid}  - `;\r\n  }\r\n\r\n  protected formatContext(context: string): string {\r\n    return context ? yellow(`[${context}] `) : '';\r\n  }\r\n\r\n  protected formatMessage(\r\n    logLevel: LogLevel,\r\n    message: unknown,\r\n    pidMessage: string,\r\n    formattedLogLevel: string,\r\n    contextMessage: string,\r\n    timestampDiff: string,\r\n  ) {\r\n    const output = this.stringifyMessage(message, logLevel);\r\n    pidMessage = this.colorize(pidMessage, logLevel);\r\n    formattedLogLevel = this.colorize(formattedLogLevel, logLevel);\r\n    return `${pidMessage}${this.getTimestamp()} ${formattedLogLevel} ${contextMessage}${output}${timestampDiff}\\n`;\r\n  }\r\n\r\n  protected stringifyMessage(message: unknown, logLevel: LogLevel) {\r\n    // If the message is a function, call it and re-resolve its value.\r\n    return isFunction(message)\r\n      ? this.stringifyMessage(message(), logLevel)\r\n      : isPlainObject(message) || Array.isArray(message)\r\n      ? `${this.colorize('Object:', logLevel)}\\n${JSON.stringify(\r\n          message,\r\n          (key, value) =>\r\n            typeof value === 'bigint' ? value.toString() : value,\r\n          2,\r\n        )}\\n`\r\n      : this.colorize(message as string, logLevel);\r\n  }\r\n\r\n  protected colorize(message: string, logLevel: LogLevel) {\r\n    const color = this.getColorByLogLevel(logLevel);\r\n    return color(message);\r\n  }\r\n\r\n  protected printStackTrace(stack: string) {\r\n    if (!stack) {\r\n      return;\r\n    }\r\n    process.stderr.write(`${stack}\\n`);\r\n  }\r\n\r\n  protected updateAndGetTimestampDiff(): string {\r\n    const includeTimestamp =\r\n      ConsoleLogger.lastTimestampAt && this.options?.timestamp;\r\n    const result = includeTimestamp\r\n      ? this.formatTimestampDiff(Date.now() - ConsoleLogger.lastTimestampAt)\r\n      : '';\r\n    ConsoleLogger.lastTimestampAt = Date.now();\r\n    return result;\r\n  }\r\n\r\n  protected formatTimestampDiff(timestampDiff: number) {\r\n    return yellow(` +${timestampDiff}ms`);\r\n  }\r\n\r\n  private getContextAndMessagesToPrint(args: unknown[]) {\r\n    if (args?.length <= 1) {\r\n      return { messages: args, context: this.context };\r\n    }\r\n    const lastElement = args[args.length - 1];\r\n    const isContext = isString(lastElement);\r\n    if (!isContext) {\r\n      return { messages: args, context: this.context };\r\n    }\r\n    return {\r\n      context: lastElement as string,\r\n      messages: args.slice(0, args.length - 1),\r\n    };\r\n  }\r\n\r\n  private getContextAndStackAndMessagesToPrint(args: unknown[]) {\r\n    if (args.length === 2) {\r\n      return this.isStackFormat(args[1])\r\n        ? {\r\n            messages: [args[0]],\r\n            stack: args[1] as string,\r\n            context: this.context,\r\n          }\r\n        : {\r\n            messages: [args[0]],\r\n            context: args[1] as string,\r\n          };\r\n    }\r\n\r\n    const { messages, context } = this.getContextAndMessagesToPrint(args);\r\n    if (messages?.length <= 1) {\r\n      return { messages, context };\r\n    }\r\n    const lastElement = messages[messages.length - 1];\r\n    const isStack = isString(lastElement);\r\n    // https://github.com/nestjs/nest/issues/11074#issuecomment-1421680060\r\n    if (!isStack && !isUndefined(lastElement)) {\r\n      return { messages, context };\r\n    }\r\n    return {\r\n      stack: lastElement as string,\r\n      messages: messages.slice(0, messages.length - 1),\r\n      context,\r\n    };\r\n  }\r\n\r\n  private isStackFormat(stack: unknown) {\r\n    if (!isString(stack) && !isUndefined(stack)) {\r\n      return false;\r\n    }\r\n\r\n    return /^(.)+\\n\\s+at .+:\\d+:\\d+$/.test(stack);\r\n  }\r\n\r\n  private getColorByLogLevel(level: LogLevel) {\r\n    switch (level) {\r\n      case 'debug':\r\n        return clc.magentaBright;\r\n      case 'warn':\r\n        return clc.yellow;\r\n      case 'error':\r\n        return clc.red;\r\n      case 'verbose':\r\n        return clc.cyanBright;\r\n      default:\r\n        return clc.green;\r\n    }\r\n  }\r\n}\r\n"]}