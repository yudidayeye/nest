{"version":3,"file":"logger.service.js","sourceRoot":"","sources":["logger.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Optional } from '../decorators/core';\r\nimport { isObject } from '../utils/shared.utils';\r\nimport { ConsoleLogger } from './console-logger.service';\r\nimport { isLogLevelEnabled } from './utils';\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport type LogLevel = 'log' | 'error' | 'warn' | 'debug' | 'verbose';\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport interface LoggerService {\r\n  /**\r\n   * Write a 'log' level log.\r\n   */\r\n  log(message: any, ...optionalParams: any[]): any;\r\n\r\n  /**\r\n   * Write an 'error' level log.\r\n   */\r\n  error(message: any, ...optionalParams: any[]): any;\r\n\r\n  /**\r\n   * Write a 'warn' level log.\r\n   */\r\n  warn(message: any, ...optionalParams: any[]): any;\r\n\r\n  /**\r\n   * Write a 'debug' level log.\r\n   */\r\n  debug?(message: any, ...optionalParams: any[]): any;\r\n\r\n  /**\r\n   * Write a 'verbose' level log.\r\n   */\r\n  verbose?(message: any, ...optionalParams: any[]): any;\r\n\r\n  /**\r\n   * Set log levels.\r\n   * @param levels log levels\r\n   */\r\n  setLogLevels?(levels: LogLevel[]): any;\r\n}\r\n\r\ninterface LogBufferRecord {\r\n  /**\r\n   * Method to execute.\r\n   */\r\n  methodRef: Function;\r\n\r\n  /**\r\n   * Arguments to pass to the method.\r\n   */\r\n  arguments: unknown[];\r\n}\r\n\r\nconst DEFAULT_LOGGER = new ConsoleLogger();\r\n\r\nconst dateTimeFormatter = new Intl.DateTimeFormat(undefined, {\r\n  year: 'numeric',\r\n  hour: 'numeric',\r\n  minute: 'numeric',\r\n  second: 'numeric',\r\n  day: '2-digit',\r\n  month: '2-digit',\r\n});\r\n\r\n/**\r\n * @publicApi\r\n */\r\n@Injectable()\r\nexport class Logger implements LoggerService {\r\n  protected static logBuffer = new Array<LogBufferRecord>();\r\n  protected static staticInstanceRef?: LoggerService = DEFAULT_LOGGER;\r\n  protected static logLevels?: LogLevel[];\r\n  private static isBufferAttached: boolean;\r\n\r\n  protected localInstanceRef?: LoggerService;\r\n\r\n  private static WrapBuffer: MethodDecorator = (\r\n    target: object,\r\n    propertyKey: string | symbol,\r\n    descriptor: TypedPropertyDescriptor<any>,\r\n  ) => {\r\n    const originalFn = descriptor.value;\r\n    descriptor.value = function (...args: unknown[]) {\r\n      if (Logger.isBufferAttached) {\r\n        Logger.logBuffer.push({\r\n          methodRef: originalFn.bind(this),\r\n          arguments: args,\r\n        });\r\n        return;\r\n      }\r\n      return originalFn.call(this, ...args);\r\n    };\r\n  };\r\n\r\n  constructor();\r\n  constructor(context: string);\r\n  constructor(context: string, options?: { timestamp?: boolean });\r\n  constructor(\r\n    @Optional() protected context?: string,\r\n    @Optional() protected options: { timestamp?: boolean } = {},\r\n  ) {}\r\n\r\n  get localInstance(): LoggerService {\r\n    if (Logger.staticInstanceRef === DEFAULT_LOGGER) {\r\n      return this.registerLocalInstanceRef();\r\n    } else if (Logger.staticInstanceRef instanceof Logger) {\r\n      const prototype = Object.getPrototypeOf(Logger.staticInstanceRef);\r\n      if (prototype.constructor === Logger) {\r\n        return this.registerLocalInstanceRef();\r\n      }\r\n    }\r\n    return Logger.staticInstanceRef;\r\n  }\r\n\r\n  /**\r\n   * Write an 'error' level log.\r\n   */\r\n  error(message: any, stack?: string, context?: string): void;\r\n  error(message: any, ...optionalParams: [...any, string?, string?]): void;\r\n  @Logger.WrapBuffer\r\n  error(message: any, ...optionalParams: any[]) {\r\n    optionalParams = this.context\r\n      ? (optionalParams.length ? optionalParams : [undefined]).concat(\r\n          this.context,\r\n        )\r\n      : optionalParams;\r\n\r\n    this.localInstance?.error(message, ...optionalParams);\r\n  }\r\n\r\n  /**\r\n   * Write a 'log' level log.\r\n   */\r\n  log(message: any, context?: string): void;\r\n  log(message: any, ...optionalParams: [...any, string?]): void;\r\n  @Logger.WrapBuffer\r\n  log(message: any, ...optionalParams: any[]) {\r\n    optionalParams = this.context\r\n      ? optionalParams.concat(this.context)\r\n      : optionalParams;\r\n    this.localInstance?.log(message, ...optionalParams);\r\n  }\r\n\r\n  /**\r\n   * Write a 'warn' level log.\r\n   */\r\n  warn(message: any, context?: string): void;\r\n  warn(message: any, ...optionalParams: [...any, string?]): void;\r\n  @Logger.WrapBuffer\r\n  warn(message: any, ...optionalParams: any[]) {\r\n    optionalParams = this.context\r\n      ? optionalParams.concat(this.context)\r\n      : optionalParams;\r\n    this.localInstance?.warn(message, ...optionalParams);\r\n  }\r\n\r\n  /**\r\n   * Write a 'debug' level log.\r\n   */\r\n  debug(message: any, context?: string): void;\r\n  debug(message: any, ...optionalParams: [...any, string?]): void;\r\n  @Logger.WrapBuffer\r\n  debug(message: any, ...optionalParams: any[]) {\r\n    optionalParams = this.context\r\n      ? optionalParams.concat(this.context)\r\n      : optionalParams;\r\n    this.localInstance?.debug?.(message, ...optionalParams);\r\n  }\r\n\r\n  /**\r\n   * Write a 'verbose' level log.\r\n   */\r\n  verbose(message: any, context?: string): void;\r\n  verbose(message: any, ...optionalParams: [...any, string?]): void;\r\n  @Logger.WrapBuffer\r\n  verbose(message: any, ...optionalParams: any[]) {\r\n    optionalParams = this.context\r\n      ? optionalParams.concat(this.context)\r\n      : optionalParams;\r\n    this.localInstance?.verbose?.(message, ...optionalParams);\r\n  }\r\n\r\n  /**\r\n   * Write an 'error' level log.\r\n   */\r\n  static error(message: any, stackOrContext?: string): void;\r\n  static error(message: any, context?: string): void;\r\n  static error(message: any, stack?: string, context?: string): void;\r\n  static error(\r\n    message: any,\r\n    ...optionalParams: [...any, string?, string?]\r\n  ): void;\r\n  @Logger.WrapBuffer\r\n  static error(message: any, ...optionalParams: any[]) {\r\n    this.staticInstanceRef?.error(message, ...optionalParams);\r\n  }\r\n\r\n  /**\r\n   * Write a 'log' level log.\r\n   */\r\n  static log(message: any, context?: string): void;\r\n  static log(message: any, ...optionalParams: [...any, string?]): void;\r\n  @Logger.WrapBuffer\r\n  static log(message: any, ...optionalParams: any[]) {\r\n    this.staticInstanceRef?.log(message, ...optionalParams);\r\n  }\r\n\r\n  /**\r\n   * Write a 'warn' level log.\r\n   */\r\n  static warn(message: any, context?: string): void;\r\n  static warn(message: any, ...optionalParams: [...any, string?]): void;\r\n  @Logger.WrapBuffer\r\n  static warn(message: any, ...optionalParams: any[]) {\r\n    this.staticInstanceRef?.warn(message, ...optionalParams);\r\n  }\r\n\r\n  /**\r\n   * Write a 'debug' level log, if the configured level allows for it.\r\n   * Prints to `stdout` with newline.\r\n   */\r\n  static debug(message: any, context?: string): void;\r\n  static debug(message: any, ...optionalParams: [...any, string?]): void;\r\n  @Logger.WrapBuffer\r\n  static debug(message: any, ...optionalParams: any[]) {\r\n    this.staticInstanceRef?.debug?.(message, ...optionalParams);\r\n  }\r\n\r\n  /**\r\n   * Write a 'verbose' level log.\r\n   */\r\n  static verbose(message: any, context?: string): void;\r\n  static verbose(message: any, ...optionalParams: [...any, string?]): void;\r\n  @Logger.WrapBuffer\r\n  static verbose(message: any, ...optionalParams: any[]) {\r\n    this.staticInstanceRef?.verbose?.(message, ...optionalParams);\r\n  }\r\n\r\n  /**\r\n   * Print buffered logs and detach buffer.\r\n   */\r\n  static flush() {\r\n    this.isBufferAttached = false;\r\n    this.logBuffer.forEach(item =>\r\n      item.methodRef(...(item.arguments as [string])),\r\n    );\r\n    this.logBuffer = [];\r\n  }\r\n\r\n  /**\r\n   * Attach buffer.\r\n   * Turns on initialization logs buffering.\r\n   */\r\n  static attachBuffer() {\r\n    this.isBufferAttached = true;\r\n  }\r\n\r\n  /**\r\n   * Detach buffer.\r\n   * Turns off initialization logs buffering.\r\n   */\r\n  static detachBuffer() {\r\n    this.isBufferAttached = false;\r\n  }\r\n\r\n  static getTimestamp() {\r\n    return dateTimeFormatter.format(Date.now());\r\n  }\r\n\r\n  static overrideLogger(logger: LoggerService | LogLevel[] | boolean) {\r\n    if (Array.isArray(logger)) {\r\n      Logger.logLevels = logger;\r\n      return this.staticInstanceRef?.setLogLevels(logger);\r\n    }\r\n    if (isObject(logger)) {\r\n      if (logger instanceof Logger && logger.constructor !== Logger) {\r\n        const errorMessage = `Using the \"extends Logger\" instruction is not allowed in Nest v9. Please, use \"extends ConsoleLogger\" instead.`;\r\n        this.staticInstanceRef.error(errorMessage);\r\n        throw new Error(errorMessage);\r\n      }\r\n      this.staticInstanceRef = logger as LoggerService;\r\n    } else {\r\n      this.staticInstanceRef = undefined;\r\n    }\r\n  }\r\n\r\n  static isLevelEnabled(level: LogLevel): boolean {\r\n    const logLevels = Logger.logLevels;\r\n    return isLogLevelEnabled(level, logLevels);\r\n  }\r\n\r\n  private registerLocalInstanceRef() {\r\n    if (this.localInstanceRef) {\r\n      return this.localInstanceRef;\r\n    }\r\n    this.localInstanceRef = new ConsoleLogger(this.context, {\r\n      timestamp: this.options?.timestamp,\r\n      logLevels: Logger.logLevels,\r\n    });\r\n    return this.localInstanceRef;\r\n  }\r\n}\r\n"]}