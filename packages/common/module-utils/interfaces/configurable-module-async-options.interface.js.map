{"version":3,"file":"configurable-module-async-options.interface.js","sourceRoot":"","sources":["configurable-module-async-options.interface.ts"],"names":[],"mappings":"","sourcesContent":["import {\r\n  FactoryProvider,\r\n  ModuleMetadata,\r\n  Provider,\r\n  Type,\r\n} from '../../interfaces';\r\nimport { DEFAULT_FACTORY_CLASS_METHOD_KEY } from '../constants';\r\n\r\n/**\r\n * Interface that must be implemented by the module options factory class.\r\n * Method key varies depending on the \"FactoryClassMethodKey\" type argument.\r\n *\r\n * @publicApi\r\n */\r\nexport type ConfigurableModuleOptionsFactory<\r\n  ModuleOptions,\r\n  FactoryClassMethodKey extends string,\r\n> = Record<\r\n  `${FactoryClassMethodKey}`,\r\n  () => Promise<ModuleOptions> | ModuleOptions\r\n>;\r\n\r\n/**\r\n * Interface that represents the module async options object\r\n * Factory method name varies depending on the \"FactoryClassMethodKey\" type argument.\r\n *\r\n * @publicApi\r\n */\r\nexport interface ConfigurableModuleAsyncOptions<\r\n  ModuleOptions,\r\n  FactoryClassMethodKey extends string = typeof DEFAULT_FACTORY_CLASS_METHOD_KEY,\r\n> extends Pick<ModuleMetadata, 'imports'> {\r\n  /**\r\n   * Injection token resolving to an existing provider. The provider must implement\r\n   * the corresponding interface.\r\n   */\r\n  useExisting?: Type<\r\n    ConfigurableModuleOptionsFactory<ModuleOptions, FactoryClassMethodKey>\r\n  >;\r\n  /**\r\n   * Injection token resolving to a class that will be instantiated as a provider.\r\n   * The class must implement the corresponding interface.\r\n   */\r\n  useClass?: Type<\r\n    ConfigurableModuleOptionsFactory<ModuleOptions, FactoryClassMethodKey>\r\n  >;\r\n  /**\r\n   * Function returning options (or a Promise resolving to options) to configure the\r\n   * cache module.\r\n   */\r\n  useFactory?: (...args: any[]) => Promise<ModuleOptions> | ModuleOptions;\r\n  /**\r\n   * Dependencies that a Factory may inject.\r\n   */\r\n  inject?: FactoryProvider['inject'];\r\n  /**\r\n   * List of parent module's providers that will be filtered to only provide necessary\r\n   * providers for the 'inject' array\r\n   * useful to pass options to nested async modules\r\n   */\r\n  provideInjectionTokensFrom?: Provider[];\r\n}\r\n"]}