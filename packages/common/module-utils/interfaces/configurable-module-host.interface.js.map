{"version":3,"file":"configurable-module-host.interface.js","sourceRoot":"","sources":["configurable-module-host.interface.ts"],"names":[],"mappings":"","sourcesContent":["import { ConfigurableModuleAsyncOptions } from './configurable-module-async-options.interface';\r\nimport { ConfigurableModuleCls } from './configurable-module-cls.interface';\r\n\r\n/**\r\n * Configurable module host. See properties for more details\r\n *\r\n * @publicApi\r\n */\r\nexport interface ConfigurableModuleHost<\r\n  ModuleOptions = Record<string, unknown>,\r\n  MethodKey extends string = string,\r\n  FactoryClassMethodKey extends string = string,\r\n  ExtraModuleDefinitionOptions = {},\r\n> {\r\n  /**\r\n   * Class that represents a blueprint/prototype for a configurable Nest module.\r\n   * This class provides static methods for constructing dynamic modules. Their names\r\n   * can be controlled through the \"MethodKey\" type argument.\r\n   *\r\n   * Your module class should inherit from this class to make the static methods available.\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * @Module({})\r\n   * class IntegrationModule extends ConfigurableModuleCls {\r\n   *  // ...\r\n   * }\r\n   * ```\r\n   */\r\n  ConfigurableModuleClass: ConfigurableModuleCls<\r\n    ModuleOptions,\r\n    MethodKey,\r\n    FactoryClassMethodKey,\r\n    ExtraModuleDefinitionOptions\r\n  >;\r\n  /**\r\n   * Module options provider token. Can be used to inject the \"options object\" to\r\n   * providers registered within the host module.\r\n   */\r\n  MODULE_OPTIONS_TOKEN: string | symbol;\r\n  /**\r\n   * Can be used to auto-infer the compound \"async module options\" type.\r\n   * Note: this property is not supposed to be used as a value.\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * @Module({})\r\n   * class IntegrationModule extends ConfigurableModuleCls {\r\n   *  static module = initializer(IntegrationModule);\r\n   *\r\n   * static registerAsync(options: typeof ASYNC_OPTIONS_TYPE): DynamicModule {\r\n   *  return super.registerAsync(options);\r\n   * }\r\n   * ```\r\n   */\r\n  ASYNC_OPTIONS_TYPE: ConfigurableModuleAsyncOptions<\r\n    ModuleOptions,\r\n    FactoryClassMethodKey\r\n  > &\r\n    Partial<ExtraModuleDefinitionOptions>;\r\n  /**\r\n   * Can be used to auto-infer the compound \"module options\" type (options interface + extra module definition options).\r\n   * Note: this property is not supposed to be used as a value.\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * @Module({})\r\n   * class IntegrationModule extends ConfigurableModuleCls {\r\n   *  static module = initializer(IntegrationModule);\r\n   *\r\n   * static register(options: typeof OPTIONS_TYPE): DynamicModule {\r\n   *  return super.register(options);\r\n   * }\r\n   * ```\r\n   */\r\n  OPTIONS_TYPE: ModuleOptions & Partial<ExtraModuleDefinitionOptions>;\r\n}\r\n"]}