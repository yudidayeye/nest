{"version":3,"file":"nest-application.interface.js","sourceRoot":"","sources":["nest-application.interface.ts"],"names":[],"mappings":"","sourcesContent":["import {\r\n  CorsOptions,\r\n  CorsOptionsDelegate,\r\n} from './external/cors-options.interface';\r\nimport { CanActivate } from './features/can-activate.interface';\r\nimport { NestInterceptor } from './features/nest-interceptor.interface';\r\nimport { GlobalPrefixOptions } from './global-prefix-options.interface';\r\nimport { HttpServer } from './http/http-server.interface';\r\nimport {\r\n  ExceptionFilter,\r\n  INestMicroservice,\r\n  NestHybridApplicationOptions,\r\n  PipeTransform,\r\n} from './index';\r\nimport { INestApplicationContext } from './nest-application-context.interface';\r\nimport { VersioningOptions } from './version-options.interface';\r\nimport { WebSocketAdapter } from './websockets/web-socket-adapter.interface';\r\n\r\n/**\r\n * Interface defining the core NestApplication object.\r\n *\r\n * @publicApi\r\n */\r\nexport interface INestApplication<TServer = any>\r\n  extends INestApplicationContext {\r\n  /**\r\n   * A wrapper function around HTTP adapter method: `adapter.use()`.\r\n   * Example `app.use(cors())`\r\n   *\r\n   * @returns {this}\r\n   */\r\n  use(...args: any[]): this;\r\n\r\n  /**\r\n   * Enables CORS (Cross-Origin Resource Sharing)\r\n   *\r\n   * @returns {void}\r\n   */\r\n  enableCors(options?: CorsOptions | CorsOptionsDelegate<any>): void;\r\n\r\n  /**\r\n   * Enables Versioning for the application.\r\n   * By default, URI-based versioning is used.\r\n   *\r\n   * @param {VersioningOptions} options\r\n   * @returns {this}\r\n   */\r\n  enableVersioning(options?: VersioningOptions): this;\r\n\r\n  /**\r\n   * Starts the application.\r\n   *\r\n   * @param {number|string} port\r\n   * @param {string} [hostname]\r\n   * @param {Function} [callback] Optional callback\r\n   * @returns {Promise} A Promise that, when resolved, is a reference to the underlying HttpServer.\r\n   */\r\n  listen(port: number | string, callback?: () => void): Promise<any>;\r\n  listen(\r\n    port: number | string,\r\n    hostname: string,\r\n    callback?: () => void,\r\n  ): Promise<any>;\r\n\r\n  /**\r\n   * Returns the url the application is listening at, based on OS and IP version. Returns as an IP value either in IPv6 or IPv4\r\n   *\r\n   * @returns {Promise<string>} The IP where the server is listening\r\n   */\r\n  getUrl(): Promise<string>;\r\n\r\n  /**\r\n   * Registers a prefix for every HTTP route path.\r\n   *\r\n   * @param {string} prefix The prefix for every HTTP route path (for example `/v1/api`)\r\n   * @param {GlobalPrefixOptions} options Global prefix options object\r\n   * @returns {this}\r\n   */\r\n  setGlobalPrefix(prefix: string, options?: GlobalPrefixOptions): this;\r\n\r\n  /**\r\n   * Register Ws Adapter which will be used inside Gateways.\r\n   * Use when you want to override default `socket.io` library.\r\n   *\r\n   * @param {WebSocketAdapter} adapter\r\n   * @returns {this}\r\n   */\r\n  useWebSocketAdapter(adapter: WebSocketAdapter): this;\r\n\r\n  /**\r\n   * Connects microservice to the NestApplication instance. Transforms application\r\n   * to a hybrid instance.\r\n   *\r\n   * @template {object} T\r\n   * @param {T} options Microservice options object\r\n   * @param {NestHybridApplicationOptions} hybridOptions Hybrid options object\r\n   * @returns {INestMicroservice}\r\n   */\r\n  connectMicroservice<T extends object = any>(\r\n    options: T,\r\n    hybridOptions?: NestHybridApplicationOptions,\r\n  ): INestMicroservice;\r\n\r\n  /**\r\n   * Returns array of the microservices connected to the NestApplication.\r\n   *\r\n   * @returns {INestMicroservice[]}\r\n   */\r\n  getMicroservices(): INestMicroservice[];\r\n\r\n  /**\r\n   * Returns the underlying native HTTP server.\r\n   *\r\n   * @returns {TServer}\r\n   */\r\n  getHttpServer(): TServer;\r\n\r\n  /**\r\n   * Returns the underlying HTTP adapter.\r\n   *\r\n   * @returns {HttpServer}\r\n   */\r\n  getHttpAdapter(): HttpServer;\r\n\r\n  /**\r\n   * Starts all connected microservices asynchronously.\r\n   *\r\n   * @returns {Promise}\r\n   */\r\n  startAllMicroservices(): Promise<this>;\r\n\r\n  /**\r\n   * Registers exception filters as global filters (will be used within\r\n   * every HTTP route handler)\r\n   *\r\n   * @param {...ExceptionFilter} filters\r\n   */\r\n  useGlobalFilters(...filters: ExceptionFilter[]): this;\r\n\r\n  /**\r\n   * Registers pipes as global pipes (will be used within every HTTP route handler)\r\n   *\r\n   * @param {...PipeTransform} pipes\r\n   */\r\n  useGlobalPipes(...pipes: PipeTransform<any>[]): this;\r\n\r\n  /**\r\n   * Registers interceptors as global interceptors (will be used within\r\n   * every HTTP route handler)\r\n   *\r\n   * @param {...NestInterceptor} interceptors\r\n   */\r\n  useGlobalInterceptors(...interceptors: NestInterceptor[]): this;\r\n\r\n  /**\r\n   * Registers guards as global guards (will be used within every HTTP route handler)\r\n   *\r\n   * @param {...CanActivate} guards\r\n   */\r\n  useGlobalGuards(...guards: CanActivate[]): this;\r\n\r\n  /**\r\n   * Terminates the application (including NestApplication, Gateways, and each connected\r\n   * microservice)\r\n   *\r\n   * @returns {Promise<void>}\r\n   */\r\n  close(): Promise<void>;\r\n}\r\n"]}