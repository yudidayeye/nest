{"version":3,"file":"http-server.interface.js","sourceRoot":"","sources":["http-server.interface.ts"],"names":[],"mappings":"","sourcesContent":["import { RequestMethod } from '../../enums';\r\nimport {\r\n  CorsOptions,\r\n  CorsOptionsDelegate,\r\n} from '../../interfaces/external/cors-options.interface';\r\nimport { NestApplicationOptions } from '../../interfaces/nest-application-options.interface';\r\nimport { VersioningOptions, VersionValue } from '../version-options.interface';\r\n\r\nexport type ErrorHandler<TRequest = any, TResponse = any> = (\r\n  error: any,\r\n  req: TRequest,\r\n  res: TResponse,\r\n  next?: Function,\r\n) => any;\r\nexport type RequestHandler<TRequest = any, TResponse = any> = (\r\n  req: TRequest,\r\n  res: TResponse,\r\n  next?: Function,\r\n) => any;\r\n\r\nexport interface HttpServer<\r\n  TRequest = any,\r\n  TResponse = any,\r\n  ServerInstance = any,\r\n> {\r\n  use(\r\n    handler:\r\n      | RequestHandler<TRequest, TResponse>\r\n      | ErrorHandler<TRequest, TResponse>,\r\n  ): any;\r\n  use(\r\n    path: string,\r\n    handler:\r\n      | RequestHandler<TRequest, TResponse>\r\n      | ErrorHandler<TRequest, TResponse>,\r\n  ): any;\r\n  useBodyParser?(...args: any[]): any;\r\n  get(handler: RequestHandler<TRequest, TResponse>): any;\r\n  get(path: string, handler: RequestHandler<TRequest, TResponse>): any;\r\n  post(handler: RequestHandler<TRequest, TResponse>): any;\r\n  post(path: string, handler: RequestHandler<TRequest, TResponse>): any;\r\n  head(handler: RequestHandler<TRequest, TResponse>): any;\r\n  head(path: string, handler: RequestHandler<TRequest, TResponse>): any;\r\n  delete(handler: RequestHandler<TRequest, TResponse>): any;\r\n  delete(path: string, handler: RequestHandler<TRequest, TResponse>): any;\r\n  put(handler: RequestHandler<TRequest, TResponse>): any;\r\n  put(path: string, handler: RequestHandler<TRequest, TResponse>): any;\r\n  patch(handler: RequestHandler<TRequest, TResponse>): any;\r\n  patch(path: string, handler: RequestHandler<TRequest, TResponse>): any;\r\n  all(path: string, handler: RequestHandler<TRequest, TResponse>): any;\r\n  all(handler: RequestHandler<TRequest, TResponse>): any;\r\n  options(handler: RequestHandler<TRequest, TResponse>): any;\r\n  options(path: string, handler: RequestHandler<TRequest, TResponse>): any;\r\n  listen(port: number | string, callback?: () => void): any;\r\n  listen(port: number | string, hostname: string, callback?: () => void): any;\r\n  reply(response: any, body: any, statusCode?: number): any;\r\n  status(response: any, statusCode: number): any;\r\n  end(response: any, message?: string): any;\r\n  render(response: any, view: string, options: any): any;\r\n  redirect(response: any, statusCode: number, url: string): any;\r\n  isHeadersSent(response: any): boolean;\r\n  setHeader(response: any, name: string, value: string): any;\r\n  setErrorHandler?(handler: Function, prefix?: string): any;\r\n  setNotFoundHandler?(handler: Function, prefix?: string): any;\r\n  useStaticAssets?(...args: any[]): this;\r\n  setBaseViewsDir?(path: string | string[]): this;\r\n  setViewEngine?(engineOrOptions: any): this;\r\n  createMiddlewareFactory(\r\n    method: RequestMethod,\r\n  ):\r\n    | ((path: string, callback: Function) => any)\r\n    | Promise<(path: string, callback: Function) => any>;\r\n  getRequestHostname?(request: TRequest): string;\r\n  getRequestMethod?(request: TRequest): string;\r\n  getRequestUrl?(request: TRequest): string;\r\n  getInstance(): ServerInstance;\r\n  registerParserMiddleware(...args: any[]): any;\r\n  enableCors(options: CorsOptions | CorsOptionsDelegate<TRequest>): any;\r\n  getHttpServer(): any;\r\n  initHttpServer(options: NestApplicationOptions): void;\r\n  close(): any;\r\n  getType(): string;\r\n  init?(): Promise<void>;\r\n  applyVersionFilter(\r\n    handler: Function,\r\n    version: VersionValue,\r\n    versioningOptions: VersioningOptions,\r\n  ): (req: TRequest, res: TResponse, next: () => void) => Function;\r\n}\r\n"]}