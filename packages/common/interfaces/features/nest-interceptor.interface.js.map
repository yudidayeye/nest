{"version":3,"file":"nest-interceptor.interface.js","sourceRoot":"","sources":["nest-interceptor.interface.ts"],"names":[],"mappings":"","sourcesContent":["import { Observable } from 'rxjs';\r\nimport { ExecutionContext } from './execution-context.interface';\r\n\r\n/**\r\n * Interface providing access to the response stream.\r\n *\r\n * @see [Interceptors](https://docs.nestjs.com/interceptors)\r\n *\r\n * @publicApi\r\n */\r\nexport interface CallHandler<T = any> {\r\n  /**\r\n   * Returns an `Observable` representing the response stream from the route\r\n   * handler.\r\n   */\r\n  handle(): Observable<T>;\r\n}\r\n\r\n/**\r\n * Interface describing implementation of an interceptor.\r\n *\r\n * @see [Interceptors](https://docs.nestjs.com/interceptors)\r\n *\r\n * @publicApi\r\n */\r\n\r\nexport interface NestInterceptor<T = any, R = any> {\r\n  /**\r\n   * Method to implement a custom interceptor.\r\n   *\r\n   * @param context an `ExecutionContext` object providing methods to access the\r\n   * route handler and class about to be invoked.\r\n   * @param next a reference to the `CallHandler`, which provides access to an\r\n   * `Observable` representing the response stream from the route handler.\r\n   */\r\n  intercept(\r\n    context: ExecutionContext,\r\n    next: CallHandler<T>,\r\n  ): Observable<R> | Promise<Observable<R>>;\r\n}\r\n"]}