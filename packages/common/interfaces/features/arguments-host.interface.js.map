{"version":3,"file":"arguments-host.interface.js","sourceRoot":"","sources":["arguments-host.interface.ts"],"names":[],"mappings":"","sourcesContent":["export type ContextType = 'http' | 'ws' | 'rpc';\r\n\r\n/**\r\n * Methods to obtain request and response objects.\r\n *\r\n * @publicApi\r\n */\r\nexport interface HttpArgumentsHost {\r\n  /**\r\n   * Returns the in-flight `request` object.\r\n   */\r\n  getRequest<T = any>(): T;\r\n  /**\r\n   * Returns the in-flight `response` object.\r\n   */\r\n  getResponse<T = any>(): T;\r\n  getNext<T = any>(): T;\r\n}\r\n\r\n/**\r\n * Methods to obtain WebSocket data and client objects.\r\n *\r\n * @publicApi\r\n */\r\nexport interface WsArgumentsHost {\r\n  /**\r\n   * Returns the data object.\r\n   */\r\n  getData<T = any>(): T;\r\n  /**\r\n   * Returns the client object.\r\n   */\r\n  getClient<T = any>(): T;\r\n  /**\r\n   * Returns the pattern for the event\r\n   */\r\n  getPattern(): string;\r\n}\r\n\r\n/**\r\n * Methods to obtain RPC data object.\r\n *\r\n * @publicApi\r\n */\r\nexport interface RpcArgumentsHost {\r\n  /**\r\n   * Returns the data object.\r\n   */\r\n  getData<T = any>(): T;\r\n\r\n  /**\r\n   * Returns the context object.\r\n   */\r\n  getContext<T = any>(): T;\r\n}\r\n\r\n/**\r\n * Provides methods for retrieving the arguments being passed to a handler.\r\n * Allows choosing the appropriate execution context (e.g., Http, RPC, or\r\n * WebSockets) to retrieve the arguments from.\r\n *\r\n * @publicApi\r\n */\r\nexport interface ArgumentsHost {\r\n  /**\r\n   * Returns the array of arguments being passed to the handler.\r\n   */\r\n  getArgs<T extends Array<any> = any[]>(): T;\r\n  /**\r\n   * Returns a particular argument by index.\r\n   * @param index index of argument to retrieve\r\n   */\r\n  getArgByIndex<T = any>(index: number): T;\r\n  /**\r\n   * Switch context to RPC.\r\n   * @returns interface with methods to retrieve RPC arguments\r\n   */\r\n  switchToRpc(): RpcArgumentsHost;\r\n  /**\r\n   * Switch context to HTTP.\r\n   * @returns interface with methods to retrieve HTTP arguments\r\n   */\r\n  switchToHttp(): HttpArgumentsHost;\r\n  /**\r\n   * Switch context to WebSockets.\r\n   * @returns interface with methods to retrieve WebSockets arguments\r\n   */\r\n  switchToWs(): WsArgumentsHost;\r\n  /**\r\n   * Returns the current execution context type (string)\r\n   */\r\n  getType<TContext extends string = ContextType>(): TContext;\r\n}\r\n"]}