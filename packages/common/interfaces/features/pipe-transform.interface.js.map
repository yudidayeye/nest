{"version":3,"file":"pipe-transform.interface.js","sourceRoot":"","sources":["pipe-transform.interface.ts"],"names":[],"mappings":"","sourcesContent":["import { Type } from '../type.interface';\r\nimport { Paramtype } from './paramtype.interface';\r\n\r\nexport type Transform<T = any> = (value: T, metadata: ArgumentMetadata) => any;\r\n\r\n/**\r\n * Interface describing a pipe implementation's `transform()` method metadata argument.\r\n *\r\n * @see [Pipes](https://docs.nestjs.com/pipes)\r\n *\r\n * @publicApi\r\n */\r\nexport interface ArgumentMetadata {\r\n  /**\r\n   * Indicates whether argument is a body, query, param, or custom parameter\r\n   */\r\n  readonly type: Paramtype;\r\n  /**\r\n   * Underlying base type (e.g., `String`) of the parameter, based on the type\r\n   * definition in the route handler.\r\n   */\r\n  readonly metatype?: Type<any> | undefined;\r\n  /**\r\n   * String passed as an argument to the decorator.\r\n   * Example: `@Body('userId')` would yield `userId`\r\n   */\r\n  readonly data?: string | undefined;\r\n}\r\n\r\n/**\r\n * Interface describing implementation of a pipe.\r\n *\r\n * @see [Pipes](https://docs.nestjs.com/pipes)\r\n *\r\n * @publicApi\r\n */\r\nexport interface PipeTransform<T = any, R = any> {\r\n  /**\r\n   * Method to implement a custom pipe.  Called with two parameters\r\n   *\r\n   * @param value argument before it is received by route handler method\r\n   * @param metadata contains metadata about the value\r\n   */\r\n  transform(value: T, metadata: ArgumentMetadata): R;\r\n}\r\n"]}