{"version":3,"file":"scope-options.interface.js","sourceRoot":"","sources":["scope-options.interface.ts"],"names":[],"mappings":";;;AAAA;;GAEG;AACH,IAAY,KAeX;AAfD,WAAY,KAAK;IACf;;;;OAIG;IACH,uCAAO,CAAA;IACP;;OAEG;IACH,2CAAS,CAAA;IACT;;OAEG;IACH,uCAAO,CAAA;AACT,CAAC,EAfW,KAAK,qBAAL,KAAK,QAehB","sourcesContent":["/**\r\n * @publicApi\r\n */\r\nexport enum Scope {\r\n  /**\r\n   * The provider can be shared across multiple classes. The provider lifetime\r\n   * is strictly tied to the application lifecycle. Once the application has\r\n   * bootstrapped, all providers have been instantiated.\r\n   */\r\n  DEFAULT,\r\n  /**\r\n   * A new private instance of the provider is instantiated for every use\r\n   */\r\n  TRANSIENT,\r\n  /**\r\n   * A new instance is instantiated for each request processing pipeline\r\n   */\r\n  REQUEST,\r\n}\r\n\r\n/**\r\n * @publicApi\r\n *\r\n * @see [Injection Scopes](https://docs.nestjs.com/fundamentals/injection-scopes)\r\n */\r\nexport interface ScopeOptions {\r\n  /**\r\n   * Specifies the lifetime of an injected Provider or Controller.\r\n   */\r\n  scope?: Scope;\r\n  /**\r\n   * Flags provider as durable. This flag can be used in combination with custom context id\r\n   * factory strategy to construct lazy DI subtrees.\r\n   *\r\n   * This flag can be used only in conjunction with scope = Scope.REQUEST.\r\n   */\r\n  durable?: boolean;\r\n}\r\n"]}