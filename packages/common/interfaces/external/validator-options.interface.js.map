{"version":3,"file":"validator-options.interface.js","sourceRoot":"","sources":["validator-options.interface.ts"],"names":[],"mappings":"","sourcesContent":["/**\r\n * Options passed to validator during validation.\r\n * @see https://github.com/typestack/class-validator\r\n *\r\n * class-validator@0.13.0\r\n *\r\n * @publicApi\r\n */\r\nexport interface ValidatorOptions {\r\n  /**\r\n   * If set to true then class-validator will print extra warning messages to the console when something is not right.\r\n   */\r\n  enableDebugMessages?: boolean;\r\n  /**\r\n   * If set to true then validator will skip validation of all properties that are undefined in the validating object.\r\n   */\r\n  skipUndefinedProperties?: boolean;\r\n  /**\r\n   * If set to true then validator will skip validation of all properties that are null in the validating object.\r\n   */\r\n  skipNullProperties?: boolean;\r\n  /**\r\n   * If set to true then validator will skip validation of all properties that are null or undefined in the validating object.\r\n   */\r\n  skipMissingProperties?: boolean;\r\n  /**\r\n   * If set to true validator will strip validated object of any properties that do not have any decorators.\r\n   *\r\n   * Tip: if no other decorator is suitable for your property use @Allow decorator.\r\n   */\r\n  whitelist?: boolean;\r\n  /**\r\n   * If set to true, instead of stripping non-whitelisted properties validator will throw an error\r\n   */\r\n  forbidNonWhitelisted?: boolean;\r\n  /**\r\n   * Groups to be used during validation of the object.\r\n   */\r\n  groups?: string[];\r\n  /**\r\n   * Set default for `always` option of decorators. Default can be overridden in decorator options.\r\n   */\r\n  always?: boolean;\r\n  /**\r\n   * If [groups]{@link ValidatorOptions#groups} is not given or is empty,\r\n   * ignore decorators with at least one group.\r\n   */\r\n  strictGroups?: boolean;\r\n  /**\r\n   * If set to true, the validation will not use default messages.\r\n   * Error message always will be undefined if its not explicitly set.\r\n   */\r\n  dismissDefaultMessages?: boolean;\r\n  /**\r\n   * ValidationError special options.\r\n   */\r\n  validationError?: {\r\n    /**\r\n     * Indicates if target should be exposed in ValidationError.\r\n     */\r\n    target?: boolean;\r\n    /**\r\n     * Indicates if validated value should be exposed in ValidationError.\r\n     */\r\n    value?: boolean;\r\n  };\r\n  /**\r\n   * Settings true will cause fail validation of unknown objects.\r\n   */\r\n  forbidUnknownValues?: boolean;\r\n  /**\r\n   * When set to true, validation of the given property will stop after encountering the first error.\r\n   * This is enabled by default.\r\n   */\r\n  stopAtFirstError?: boolean;\r\n}\r\n"]}