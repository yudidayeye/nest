{"version":3,"file":"class-transform-options.interface.js","sourceRoot":"","sources":["class-transform-options.interface.ts"],"names":[],"mappings":"","sourcesContent":["/**\r\n * Options to be passed during transformation.\r\n *\r\n * @see https://github.com/typestack/class-transformer\r\n *\r\n * @publicApi\r\n */\r\nexport interface ClassTransformOptions {\r\n  /**\r\n   * Exclusion strategy. By default exposeAll is used, which means that it will expose all properties that\r\n   * are transformed by default.\r\n   */\r\n  strategy?: 'excludeAll' | 'exposeAll';\r\n  /**\r\n   * Only properties with given groups will be transformed.\r\n   */\r\n  groups?: string[];\r\n  /**\r\n   * Only properties with \"since\" > version < \"until\" will be transformed.\r\n   */\r\n  version?: number;\r\n  /**\r\n   * Excludes properties with the given prefixes. For example, if you mark your private properties with \"_\" and \"__\"\r\n   * you can set this option's value to [\"_\", \"__\"] and all private properties will be skipped.\r\n   * This works only for \"exposeAll\" strategy.\r\n   */\r\n  excludePrefixes?: string[];\r\n  /**\r\n   * If set to true then class transformer will ignore all @Expose and @Exclude decorators and what's inside them.\r\n   * This option is useful if you want to \"clone\" your object but not apply decorators affects.\r\n   */\r\n  ignoreDecorators?: boolean;\r\n  /**\r\n   * Target maps allows to set a Types of the transforming object without using @Type decorator.\r\n   * This is useful when you are transforming external classes, or if you already have type metadata for\r\n   * objects and you don't want to set it up again.\r\n   */\r\n  targetMaps?: any[];\r\n  /**\r\n   * If set to true then class transformer will perform a circular check. (Circular check is turned off by default)\r\n   * This option is useful when you know for sure that your types might have a circular dependency.\r\n   */\r\n  enableCircularCheck?: boolean;\r\n  /**\r\n   * If set to true class-transformer will attempt conversion based on TS reflected type\r\n   */\r\n  enableImplicitConversion?: boolean;\r\n  /**\r\n   * If set to true class-transformer will exclude properties which are not part of the original class\r\n   * and exposing all class properties (with undefined, if nothing else is given)\r\n   */\r\n  excludeExtraneousValues?: boolean;\r\n  /**\r\n   * If set to true then class transformer will take default values for unprovided fields.\r\n   * This is useful when you convert a plain object to a class and have an optional field with a default value.\r\n   */\r\n  exposeDefaultValues?: boolean;\r\n  /**\r\n   * When set to true, fields with `undefined` as value will be included in class to plain transformation. Otherwise\r\n   * those fields will be omitted from the result.\r\n   *\r\n   * DEFAULT: `true`\r\n   */\r\n  exposeUnsetFields?: boolean;\r\n}\r\n"]}