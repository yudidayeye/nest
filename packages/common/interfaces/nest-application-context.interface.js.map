{"version":3,"file":"nest-application-context.interface.js","sourceRoot":"","sources":["nest-application-context.interface.ts"],"names":[],"mappings":"","sourcesContent":["import { ShutdownSignal } from '../enums/shutdown-signal.enum';\r\nimport { LoggerService, LogLevel } from '../services/logger.service';\r\nimport { DynamicModule } from './modules';\r\nimport { Type } from './type.interface';\r\n\r\nexport interface GetOrResolveOptions {\r\n  /**\r\n   * If enabled, lookup will only be performed in the host module.\r\n   * @default false\r\n   */\r\n  strict?: boolean;\r\n  /**\r\n   * If enabled, instead of returning a first instance registered under a given token,\r\n   * a list of instances will be returned.\r\n   * @default false\r\n   */\r\n  each?: boolean;\r\n}\r\n\r\n/**\r\n * Interface defining NestApplicationContext.\r\n *\r\n * @publicApi\r\n */\r\nexport interface INestApplicationContext {\r\n  /**\r\n   * Allows navigating through the modules tree, for example, to pull out a specific instance from the selected module.\r\n   * @returns {INestApplicationContext}\r\n   */\r\n  select<T>(module: Type<T> | DynamicModule): INestApplicationContext;\r\n\r\n  /**\r\n   * Retrieves an instance of either injectable or controller, otherwise, throws exception.\r\n   * @returns {TResult}\r\n   */\r\n  get<TInput = any, TResult = TInput>(\r\n    typeOrToken: Type<TInput> | Function | string | symbol,\r\n  ): TResult;\r\n  /**\r\n   * Retrieves an instance of either injectable or controller, otherwise, throws exception.\r\n   * @returns {TResult}\r\n   */\r\n  get<TInput = any, TResult = TInput>(\r\n    typeOrToken: Type<TInput> | Function | string | symbol,\r\n    options: { strict?: boolean; each?: undefined | false },\r\n  ): TResult;\r\n  /**\r\n   * Retrieves a list of instances of either injectables or controllers, otherwise, throws exception.\r\n   * @returns {Array<TResult>}\r\n   */\r\n  get<TInput = any, TResult = TInput>(\r\n    typeOrToken: Type<TInput> | Function | string | symbol,\r\n    options: { strict?: boolean; each: true },\r\n  ): Array<TResult>;\r\n  /**\r\n   * Retrieves an instance (or a list of instances) of either injectable or controller, otherwise, throws exception.\r\n   * @returns {TResult | Array<TResult>}\r\n   */\r\n  get<TInput = any, TResult = TInput>(\r\n    typeOrToken: Type<TInput> | Function | string | symbol,\r\n    options?: GetOrResolveOptions,\r\n  ): TResult | Array<TResult>;\r\n\r\n  /**\r\n   * Resolves transient or request-scoped instance of either injectable or controller, otherwise, throws exception.\r\n   * @returns {Array<TResult>}\r\n   */\r\n  resolve<TInput = any, TResult = TInput>(\r\n    typeOrToken: Type<TInput> | Function | string | symbol,\r\n  ): Promise<TResult>;\r\n  /**\r\n   * Resolves transient or request-scoped instance of either injectable or controller, otherwise, throws exception.\r\n   * @returns {Array<TResult>}\r\n   */\r\n  resolve<TInput = any, TResult = TInput>(\r\n    typeOrToken: Type<TInput> | Function | string | symbol,\r\n    contextId?: { id: number },\r\n  ): Promise<TResult>;\r\n  /**\r\n   * Resolves transient or request-scoped instance of either injectable or controller, otherwise, throws exception.\r\n   * @returns {Array<TResult>}\r\n   */\r\n  resolve<TInput = any, TResult = TInput>(\r\n    typeOrToken: Type<TInput> | Function | string | symbol,\r\n    contextId?: { id: number },\r\n    options?: { strict?: boolean; each?: undefined | false },\r\n  ): Promise<TResult>;\r\n  /**\r\n   * Resolves transient or request-scoped instances of either injectables or controllers, otherwise, throws exception.\r\n   * @returns {Array<TResult>}\r\n   */\r\n  resolve<TInput = any, TResult = TInput>(\r\n    typeOrToken: Type<TInput> | Function | string | symbol,\r\n    contextId?: { id: number },\r\n    options?: { strict?: boolean; each: true },\r\n  ): Promise<Array<TResult>>;\r\n  /**\r\n   * Resolves transient or request-scoped instance (or a list of instances) of either injectable or controller, otherwise, throws exception.\r\n   * @returns {Promise<TResult | Array<TResult>>}\r\n   */\r\n  resolve<TInput = any, TResult = TInput>(\r\n    typeOrToken: Type<TInput> | Function | string | symbol,\r\n    contextId?: { id: number },\r\n    options?: GetOrResolveOptions,\r\n  ): Promise<TResult | Array<TResult>>;\r\n\r\n  /**\r\n   * Registers the request/context object for a given context ID (DI container sub-tree).\r\n   * @returns {void}\r\n   */\r\n  registerRequestByContextId<T = any>(\r\n    request: T,\r\n    contextId: { id: number },\r\n  ): void;\r\n\r\n  /**\r\n   * Terminates the application\r\n   * @returns {Promise<void>}\r\n   */\r\n  close(): Promise<void>;\r\n\r\n  /**\r\n   * Sets custom logger service.\r\n   * Flushes buffered logs if auto flush is on.\r\n   * @returns {void}\r\n   */\r\n  useLogger(logger: LoggerService | LogLevel[] | false): void;\r\n\r\n  /**\r\n   * Prints buffered logs and detaches buffer.\r\n   * @returns {void}\r\n   */\r\n  flushLogs(): void;\r\n\r\n  /**\r\n   * Enables the usage of shutdown hooks. Will call the\r\n   * `onApplicationShutdown` function of a provider if the\r\n   * process receives a shutdown signal.\r\n   *\r\n   * @returns {this} The Nest application context instance\r\n   */\r\n  enableShutdownHooks(signals?: ShutdownSignal[] | string[]): this;\r\n\r\n  /**\r\n   * Initializes the Nest application.\r\n   * Calls the Nest lifecycle events.\r\n   * It isn't mandatory to call this method directly.\r\n   *\r\n   * @returns {Promise<this>} The NestApplicationContext instance as Promise\r\n   */\r\n  init(): Promise<this>;\r\n}\r\n"]}