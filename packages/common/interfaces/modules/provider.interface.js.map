{"version":3,"file":"provider.interface.js","sourceRoot":"","sources":["provider.interface.ts"],"names":[],"mappings":"","sourcesContent":["import { Scope } from '../scope-options.interface';\r\nimport { Type } from '../type.interface';\r\nimport { InjectionToken } from './injection-token.interface';\r\nimport { OptionalFactoryDependency } from './optional-factory-dependency.interface';\r\n\r\n/**\r\n *\r\n * @publicApi\r\n */\r\nexport type Provider<T = any> =\r\n  | Type<any>\r\n  | ClassProvider<T>\r\n  | ValueProvider<T>\r\n  | FactoryProvider<T>\r\n  | ExistingProvider<T>;\r\n\r\n/**\r\n * Interface defining a *Class* type provider.\r\n *\r\n * For example:\r\n * ```typescript\r\n * const configServiceProvider = {\r\n * provide: ConfigService,\r\n * useClass:\r\n *   process.env.NODE_ENV === 'development'\r\n *     ? DevelopmentConfigService\r\n *     : ProductionConfigService,\r\n * };\r\n * ```\r\n *\r\n * @see [Class providers](https://docs.nestjs.com/fundamentals/custom-providers#class-providers-useclass)\r\n * @see [Injection scopes](https://docs.nestjs.com/fundamentals/injection-scopes)\r\n *\r\n * @publicApi\r\n */\r\nexport interface ClassProvider<T = any> {\r\n  /**\r\n   * Injection token\r\n   */\r\n  provide: InjectionToken;\r\n  /**\r\n   * Type (class name) of provider (instance to be injected).\r\n   */\r\n  useClass: Type<T>;\r\n  /**\r\n   * Optional enum defining lifetime of the provider that is injected.\r\n   */\r\n  scope?: Scope;\r\n  /**\r\n   * This option is only available on factory providers!\r\n   *\r\n   * @see [Use factory](https://docs.nestjs.com/fundamentals/custom-providers#factory-providers-usefactory)\r\n   */\r\n  inject?: never;\r\n  /**\r\n   * Flags provider as durable. This flag can be used in combination with custom context id\r\n   * factory strategy to construct lazy DI subtrees.\r\n   *\r\n   * This flag can be used only in conjunction with scope = Scope.REQUEST.\r\n   */\r\n  durable?: boolean;\r\n}\r\n\r\n/**\r\n * Interface defining a *Value* type provider.\r\n *\r\n * For example:\r\n * ```typescript\r\n * const connectionProvider = {\r\n *   provide: 'CONNECTION',\r\n *   useValue: connection,\r\n * };\r\n * ```\r\n *\r\n * @see [Value providers](https://docs.nestjs.com/fundamentals/custom-providers#value-providers-usevalue)\r\n *\r\n * @publicApi\r\n */\r\nexport interface ValueProvider<T = any> {\r\n  /**\r\n   * Injection token\r\n   */\r\n  provide: InjectionToken;\r\n  /**\r\n   * Instance of a provider to be injected.\r\n   */\r\n  useValue: T;\r\n  /**\r\n   * This option is only available on factory providers!\r\n   *\r\n   * @see [Use factory](https://docs.nestjs.com/fundamentals/custom-providers#factory-providers-usefactory)\r\n   */\r\n  inject?: never;\r\n}\r\n\r\n/**\r\n * Interface defining a *Factory* type provider.\r\n *\r\n * For example:\r\n * ```typescript\r\n * const connectionFactory = {\r\n *   provide: 'CONNECTION',\r\n *   useFactory: (optionsProvider: OptionsProvider) => {\r\n *     const options = optionsProvider.get();\r\n *     return new DatabaseConnection(options);\r\n *   },\r\n *   inject: [OptionsProvider],\r\n * };\r\n * ```\r\n *\r\n * @see [Factory providers](https://docs.nestjs.com/fundamentals/custom-providers#factory-providers-usefactory)\r\n * @see [Injection scopes](https://docs.nestjs.com/fundamentals/injection-scopes)\r\n *\r\n * @publicApi\r\n */\r\nexport interface FactoryProvider<T = any> {\r\n  /**\r\n   * Injection token\r\n   */\r\n  provide: InjectionToken;\r\n  /**\r\n   * Factory function that returns an instance of the provider to be injected.\r\n   */\r\n  useFactory: (...args: any[]) => T | Promise<T>;\r\n  /**\r\n   * Optional list of providers to be injected into the context of the Factory function.\r\n   */\r\n  inject?: Array<InjectionToken | OptionalFactoryDependency>;\r\n  /**\r\n   * Optional enum defining lifetime of the provider that is returned by the Factory function.\r\n   */\r\n  scope?: Scope;\r\n  /**\r\n   * Flags provider as durable. This flag can be used in combination with custom context id\r\n   * factory strategy to construct lazy DI subtrees.\r\n   *\r\n   * This flag can be used only in conjunction with scope = Scope.REQUEST.\r\n   */\r\n  durable?: boolean;\r\n}\r\n\r\n/**\r\n * Interface defining an *Existing* (aliased) type provider.\r\n *\r\n * For example:\r\n * ```typescript\r\n * const loggerAliasProvider = {\r\n *   provide: 'AliasedLoggerService',\r\n *   useExisting: LoggerService\r\n * };\r\n * ```\r\n *\r\n * @see [Alias providers](https://docs.nestjs.com/fundamentals/custom-providers#alias-providers-useexisting)\r\n *\r\n * @publicApi\r\n */\r\nexport interface ExistingProvider<T = any> {\r\n  /**\r\n   * Injection token\r\n   */\r\n  provide: InjectionToken;\r\n  /**\r\n   * Provider to be aliased by the Injection token.\r\n   */\r\n  useExisting: any;\r\n}\r\n"]}