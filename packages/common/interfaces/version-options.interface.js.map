{"version":3,"file":"version-options.interface.js","sourceRoot":"","sources":["version-options.interface.ts"],"names":[],"mappings":";;;AAEA;;;;GAIG;AACU,QAAA,eAAe,GAAG,MAAM,CAAC,iBAAiB,CAAC,CAAC","sourcesContent":["import { VersioningType } from '../enums/version-type.enum';\r\n\r\n/**\r\n * Indicates that this will work for any version passed in the request, or no version.\r\n *\r\n * @publicApi\r\n */\r\nexport const VERSION_NEUTRAL = Symbol('VERSION_NEUTRAL');\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport type VersionValue =\r\n  | string\r\n  | typeof VERSION_NEUTRAL\r\n  | Array<string | typeof VERSION_NEUTRAL>;\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport interface VersionOptions {\r\n  /**\r\n   * Specifies an optional API Version. When configured, methods\r\n   * within the controller will only be routed if the request version\r\n   * matches the specified value.\r\n   *\r\n   * Supported only by HTTP-based applications (does not apply to non-HTTP microservices).\r\n   *\r\n   * @see [Versioning](https://docs.nestjs.com/techniques/versioning)\r\n   */\r\n  version?: VersionValue;\r\n}\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport interface HeaderVersioningOptions {\r\n  type: VersioningType.HEADER;\r\n  /**\r\n   * The name of the Request Header that contains the version.\r\n   */\r\n  header: string;\r\n}\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport interface UriVersioningOptions {\r\n  type: VersioningType.URI;\r\n  /**\r\n   * Optional prefix that will prepend the version within the URI.\r\n   *\r\n   * Defaults to `v`.\r\n   *\r\n   * Ex. Assuming a version of `1`, for `/api/v1/route`, `v` is the prefix.\r\n   */\r\n  prefix?: string | false;\r\n}\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport interface MediaTypeVersioningOptions {\r\n  type: VersioningType.MEDIA_TYPE;\r\n  /**\r\n   * The key within the Media Type Header to determine the version from.\r\n   *\r\n   * Ex. For `application/json;v=1`, the key is `v=`.\r\n   */\r\n  key: string;\r\n}\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport interface CustomVersioningOptions {\r\n  type: VersioningType.CUSTOM;\r\n\r\n  /**\r\n   * A function that accepts a request object (specific to the underlying platform, ie Express or Fastify)\r\n   * and returns a single version value or an ordered array of versions, in order from HIGHEST to LOWEST.\r\n   *\r\n   * Ex. Returned version array = ['3.1', '3.0', '2.5', '2', '1.9']\r\n   *\r\n   * Use type assertion or narrowing to identify the specific request type.\r\n   */\r\n  extractor: (request: unknown) => string | string[];\r\n}\r\n\r\n/**\r\n * @publicApi\r\n */\r\ninterface VersioningCommonOptions {\r\n  /**\r\n   * The default version to be used as a fallback when you did not provide some\r\n   * version to `@Controller()` nor `@Version()`.\r\n   */\r\n  defaultVersion?: VersionOptions['version'];\r\n}\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport type VersioningOptions = VersioningCommonOptions &\r\n  (\r\n    | HeaderVersioningOptions\r\n    | UriVersioningOptions\r\n    | MediaTypeVersioningOptions\r\n    | CustomVersioningOptions\r\n  );\r\n"]}