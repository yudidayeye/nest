{"version":3,"file":"http.exception.js","sourceRoot":"","sources":["http.exception.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  HttpExceptionBody,\r\n  HttpExceptionBodyMessage,\r\n} from '../interfaces/http/http-exception-body.interface';\r\nimport { isObject, isString } from '../utils/shared.utils';\r\n\r\nexport interface HttpExceptionOptions {\r\n  /** original cause of the error */\r\n  cause?: unknown;\r\n  description?: string;\r\n}\r\n\r\nexport interface DescriptionAndOptions {\r\n  description?: string;\r\n  httpExceptionOptions?: HttpExceptionOptions;\r\n}\r\n\r\n/**\r\n * Defines the base Nest HTTP exception, which is handled by the default\r\n * Exceptions Handler.\r\n *\r\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\r\n *\r\n * @publicApi\r\n */\r\nexport class HttpException extends Error {\r\n  /**\r\n   * Instantiate a plain HTTP Exception.\r\n   *\r\n   * @example\r\n   * throw new HttpException()\r\n   * throw new HttpException('message', HttpStatus.BAD_REQUEST)\r\n   * throw new HttpException('custom message', HttpStatus.BAD_REQUEST, {\r\n   *  cause: new Error('Cause Error'),\r\n   * })\r\n   *\r\n   *\r\n   * @usageNotes\r\n   * The constructor arguments define the response and the HTTP response status code.\r\n   * - The `response` argument (required) defines the JSON response body. alternatively, it can also be\r\n   *  an error object that is used to define an error [cause](https://nodejs.org/en/blog/release/v16.9.0/#error-cause).\r\n   * - The `status` argument (required) defines the HTTP Status Code.\r\n   * - The `options` argument (optional) defines additional error options. Currently, it supports the `cause` attribute,\r\n   *  and can be used as an alternative way to specify the error cause: `const error = new HttpException('description', 400, { cause: new Error() });`\r\n   *\r\n   * By default, the JSON response body contains two properties:\r\n   * - `statusCode`: the Http Status Code.\r\n   * - `message`: a short description of the HTTP error by default; override this\r\n   * by supplying a string in the `response` parameter.\r\n   *\r\n   * To override the entire JSON response body, pass an object to the `createBody`\r\n   * method. Nest will serialize the object and return it as the JSON response body.\r\n   *\r\n   * The `status` argument is required, and should be a valid HTTP status code.\r\n   * Best practice is to use the `HttpStatus` enum imported from `nestjs/common`.\r\n   *\r\n   * @param response string, object describing the error condition or the error cause.\r\n   * @param status HTTP response status code.\r\n   * @param options An object used to add an error cause.\r\n   */\r\n  constructor(\r\n    private readonly response: string | Record<string, any>,\r\n    private readonly status: number,\r\n    private readonly options?: HttpExceptionOptions,\r\n  ) {\r\n    super();\r\n    this.initMessage();\r\n    this.initName();\r\n    this.initCause();\r\n  }\r\n\r\n  public cause: unknown;\r\n\r\n  /**\r\n   * Configures error chaining support\r\n   *\r\n   * @see https://nodejs.org/en/blog/release/v16.9.0/#error-cause\r\n   * @see https://github.com/microsoft/TypeScript/issues/45167\r\n   */\r\n  public initCause(): void {\r\n    if (this.options?.cause) {\r\n      this.cause = this.options.cause;\r\n      return;\r\n    }\r\n  }\r\n\r\n  public initMessage() {\r\n    if (isString(this.response)) {\r\n      this.message = this.response;\r\n    } else if (\r\n      isObject(this.response) &&\r\n      isString((this.response as Record<string, any>).message)\r\n    ) {\r\n      this.message = (this.response as Record<string, any>).message;\r\n    } else if (this.constructor) {\r\n      this.message =\r\n        this.constructor.name.match(/[A-Z][a-z]+|[0-9]+/g)?.join(' ') ??\r\n        'Error';\r\n    }\r\n  }\r\n\r\n  public initName(): void {\r\n    this.name = this.constructor.name;\r\n  }\r\n\r\n  public getResponse(): string | object {\r\n    return this.response;\r\n  }\r\n\r\n  public getStatus(): number {\r\n    return this.status;\r\n  }\r\n\r\n  public static createBody(\r\n    nil: null | '',\r\n    message: HttpExceptionBodyMessage,\r\n    statusCode: number,\r\n  ): HttpExceptionBody;\r\n\r\n  public static createBody(\r\n    message: HttpExceptionBodyMessage,\r\n    error: string,\r\n    statusCode: number,\r\n  ): HttpExceptionBody;\r\n\r\n  public static createBody<Body extends Record<string, unknown>>(\r\n    custom: Body,\r\n  ): Body;\r\n\r\n  public static createBody<Body extends Record<string, unknown>>(\r\n    arg0: null | HttpExceptionBodyMessage | Body,\r\n    arg1?: HttpExceptionBodyMessage | string,\r\n    statusCode?: number,\r\n  ): HttpExceptionBody | Body {\r\n    if (!arg0) {\r\n      return {\r\n        message: arg1,\r\n        statusCode: statusCode,\r\n      };\r\n    }\r\n\r\n    if (isString(arg0) || Array.isArray(arg0)) {\r\n      return {\r\n        message: arg0,\r\n        error: arg1 as string,\r\n        statusCode: statusCode,\r\n      };\r\n    }\r\n\r\n    return arg0;\r\n  }\r\n\r\n  public static getDescriptionFrom(\r\n    descriptionOrOptions: string | HttpExceptionOptions,\r\n  ): string {\r\n    return isString(descriptionOrOptions)\r\n      ? descriptionOrOptions\r\n      : descriptionOrOptions?.description;\r\n  }\r\n\r\n  public static getHttpExceptionOptionsFrom(\r\n    descriptionOrOptions: string | HttpExceptionOptions,\r\n  ): HttpExceptionOptions {\r\n    return isString(descriptionOrOptions) ? {} : descriptionOrOptions;\r\n  }\r\n\r\n  /**\r\n   * Utility method used to extract the error description and httpExceptionOptions from the given argument.\r\n   * This is used by inheriting classes to correctly parse both options.\r\n   * @returns the error description and the httpExceptionOptions as an object.\r\n   */\r\n  public static extractDescriptionAndOptionsFrom(\r\n    descriptionOrOptions: string | HttpExceptionOptions,\r\n  ): DescriptionAndOptions {\r\n    const description = isString(descriptionOrOptions)\r\n      ? descriptionOrOptions\r\n      : descriptionOrOptions?.description;\r\n\r\n    const httpExceptionOptions = isString(descriptionOrOptions)\r\n      ? {}\r\n      : descriptionOrOptions;\r\n\r\n    return {\r\n      description,\r\n      httpExceptionOptions,\r\n    };\r\n  }\r\n}\r\n"]}