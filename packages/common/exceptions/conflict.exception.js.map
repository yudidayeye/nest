{"version":3,"file":"conflict.exception.js","sourceRoot":"","sources":["conflict.exception.ts"],"names":[],"mappings":";;;AAAA,gEAAuD;AACvD,qDAAuE;AAEvE;;;;;;GAMG;AACH,MAAa,iBAAkB,SAAQ,8BAAa;IAClD;;;;;;;;;;;;;;;;;;;;;;;OAuBG;IACH,YACE,aAAqC,EACrC,uBAAsD,UAAU;QAEhE,MAAM,EAAE,WAAW,EAAE,oBAAoB,EAAE,GACzC,8BAAa,CAAC,gCAAgC,CAAC,oBAAoB,CAAC,CAAC;QAEvE,KAAK,CACH,8BAAa,CAAC,UAAU,CAAC,aAAa,EAAE,WAAW,EAAE,6BAAU,CAAC,QAAQ,CAAC,EACzE,6BAAU,CAAC,QAAQ,EACnB,oBAAoB,CACrB,CAAC;IACJ,CAAC;CACF;AAtCD,8CAsCC","sourcesContent":["import { HttpStatus } from '../enums/http-status.enum';\r\nimport { HttpException, HttpExceptionOptions } from './http.exception';\r\n\r\n/**\r\n * Defines an HTTP exception for *Conflict* type errors.\r\n *\r\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\r\n *\r\n * @publicApi\r\n */\r\nexport class ConflictException extends HttpException {\r\n  /**\r\n   * Instantiate a `ConflictException` Exception.\r\n   *\r\n   * @example\r\n   * `throw new ConflictException()`\r\n   *\r\n   * @usageNotes\r\n   * The HTTP response status code will be 409.\r\n   * - The `objectOrError` argument defines the JSON response body or the message string.\r\n   * - The `descriptionOrOptions` argument contains either a short description of the HTTP error or an options object used to provide an underlying error cause.\r\n   *\r\n   * By default, the JSON response body contains two properties:\r\n   * - `statusCode`: this will be the value 409.\r\n   * - `message`: the string `'Conflict'` by default; override this by supplying\r\n   * a string in the `objectOrError` parameter.\r\n   *\r\n   * If the parameter `objectOrError` is a string, the response body will contain an\r\n   * additional property, `error`, with a short description of the HTTP error. To override the\r\n   * entire JSON response body, pass an object instead. Nest will serialize the object\r\n   * and return it as the JSON response body.\r\n   *\r\n   * @param objectOrError string or object describing the error condition.\r\n   * @param descriptionOrOptions either a short description of the HTTP error or an options object used to provide an underlying error cause\r\n   */\r\n  constructor(\r\n    objectOrError?: string | object | any,\r\n    descriptionOrOptions: string | HttpExceptionOptions = 'Conflict',\r\n  ) {\r\n    const { description, httpExceptionOptions } =\r\n      HttpException.extractDescriptionAndOptionsFrom(descriptionOrOptions);\r\n\r\n    super(\r\n      HttpException.createBody(objectOrError, description, HttpStatus.CONFLICT),\r\n      HttpStatus.CONFLICT,\r\n      httpExceptionOptions,\r\n    );\r\n  }\r\n}\r\n"]}