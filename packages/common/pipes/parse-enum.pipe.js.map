{"version":3,"file":"parse-enum.pipe.js","sourceRoot":"","sources":["parse-enum.pipe.ts"],"names":[],"mappings":";;;;AAAA,6CAA0D;AAC1D,oCAAwD;AAExD,8EAG0C;AAC1C,wDAA8C;AAW9C;;;;;;GAMG;AAEI,IAAM,aAAa,2BAAnB,MAAM,aAAa;IAExB,YACqB,QAAW,EACC,OAA8B;QAD1C,aAAQ,GAAR,QAAQ,CAAG;QACC,YAAO,GAAP,OAAO,CAAuB;QAE7D,IAAI,CAAC,QAAQ,EAAE;YACb,MAAM,IAAI,KAAK,CACb,oFAAoF,CACrF,CAAC;SACH;QACD,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;QACxB,MAAM,EAAE,gBAAgB,EAAE,mBAAmB,GAAG,kBAAU,CAAC,WAAW,EAAE,GACtE,OAAO,CAAC;QAEV,IAAI,CAAC,gBAAgB;YACnB,gBAAgB;gBAChB,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,yCAAe,CAAC,mBAAmB,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;IAC/D,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,SAAS,CAAC,KAAQ,EAAE,QAA0B;QAClD,IAAI,IAAA,oBAAK,EAAC,KAAK,CAAC,IAAI,IAAI,CAAC,OAAO,EAAE,QAAQ,EAAE;YAC1C,OAAO,KAAK,CAAC;SACd;QACD,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;YACvB,MAAM,IAAI,CAAC,gBAAgB,CACzB,6CAA6C,CAC9C,CAAC;SACH;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAES,MAAM,CAAC,KAAQ;QACvB,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAC/C,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAC5B,CAAC;QACF,OAAO,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;CACF,CAAA;wBA7CY,aAAa;IADzB,IAAA,iBAAU,GAAE;IAKR,mBAAA,IAAA,eAAQ,GAAE,CAAA;;GAJF,aAAa,CA6CzB","sourcesContent":["import { Injectable, Optional } from '../decorators/core';\r\nimport { ArgumentMetadata, HttpStatus } from '../index';\r\nimport { PipeTransform } from '../interfaces/features/pipe-transform.interface';\r\nimport {\r\n  ErrorHttpStatusCode,\r\n  HttpErrorByCode,\r\n} from '../utils/http-error-by-code.util';\r\nimport { isNil } from '../utils/shared.utils';\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport interface ParseEnumPipeOptions {\r\n  optional?: boolean;\r\n  errorHttpStatusCode?: ErrorHttpStatusCode;\r\n  exceptionFactory?: (error: string) => any;\r\n}\r\n\r\n/**\r\n * Defines the built-in ParseEnum Pipe\r\n *\r\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\r\n *\r\n * @publicApi\r\n */\r\n@Injectable()\r\nexport class ParseEnumPipe<T = any> implements PipeTransform<T> {\r\n  protected exceptionFactory: (error: string) => any;\r\n  constructor(\r\n    protected readonly enumType: T,\r\n    @Optional() protected readonly options?: ParseEnumPipeOptions,\r\n  ) {\r\n    if (!enumType) {\r\n      throw new Error(\r\n        `\"ParseEnumPipe\" requires \"enumType\" argument specified (to validate input values).`,\r\n      );\r\n    }\r\n    options = options || {};\r\n    const { exceptionFactory, errorHttpStatusCode = HttpStatus.BAD_REQUEST } =\r\n      options;\r\n\r\n    this.exceptionFactory =\r\n      exceptionFactory ||\r\n      (error => new HttpErrorByCode[errorHttpStatusCode](error));\r\n  }\r\n\r\n  /**\r\n   * Method that accesses and performs optional transformation on argument for\r\n   * in-flight requests.\r\n   *\r\n   * @param value currently processed route argument\r\n   * @param metadata contains metadata about the currently processed route argument\r\n   */\r\n  async transform(value: T, metadata: ArgumentMetadata): Promise<T> {\r\n    if (isNil(value) && this.options?.optional) {\r\n      return value;\r\n    }\r\n    if (!this.isEnum(value)) {\r\n      throw this.exceptionFactory(\r\n        'Validation failed (enum string is expected)',\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  protected isEnum(value: T): boolean {\r\n    const enumValues = Object.keys(this.enumType).map(\r\n      item => this.enumType[item],\r\n    );\r\n    return enumValues.includes(value);\r\n  }\r\n}\r\n"]}