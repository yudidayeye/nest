{"version":3,"file":"parse-float.pipe.js","sourceRoot":"","sources":["parse-float.pipe.ts"],"names":[],"mappings":";;;;AAAA,6CAA0D;AAC1D,oCAAwD;AAExD,8EAG0C;AAC1C,wDAA8C;AAW9C;;;;;;GAMG;AAEI,IAAM,cAAc,4BAApB,MAAM,cAAc;IAGzB,YAA2C,OAA+B;QAA/B,YAAO,GAAP,OAAO,CAAwB;QACxE,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;QACxB,MAAM,EAAE,gBAAgB,EAAE,mBAAmB,GAAG,kBAAU,CAAC,WAAW,EAAE,GACtE,OAAO,CAAC;QAEV,IAAI,CAAC,gBAAgB;YACnB,gBAAgB;gBAChB,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,yCAAe,CAAC,mBAAmB,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;IAC/D,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,SAAS,CAAC,KAAa,EAAE,QAA0B;QACvD,IAAI,IAAA,oBAAK,EAAC,KAAK,CAAC,IAAI,IAAI,CAAC,OAAO,EAAE,QAAQ,EAAE;YAC1C,OAAO,KAAK,CAAC;SACd;QACD,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;YAC1B,MAAM,IAAI,CAAC,gBAAgB,CACzB,gDAAgD,CACjD,CAAC;SACH;QACD,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC;IAED;;;OAGG;IACO,SAAS,CAAC,KAAa;QAC/B,OAAO,CACL,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,QAAQ,CAAC,OAAO,KAAK,CAAC;YAC3C,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YACzB,QAAQ,CAAC,KAAY,CAAC,CACvB,CAAC;IACJ,CAAC;CACF,CAAA;yBA3CY,cAAc;IAD1B,IAAA,iBAAU,GAAE;IAIE,mBAAA,IAAA,eAAQ,GAAE,CAAA;;GAHZ,cAAc,CA2C1B","sourcesContent":["import { Injectable, Optional } from '../decorators/core';\r\nimport { ArgumentMetadata, HttpStatus } from '../index';\r\nimport { PipeTransform } from '../interfaces/features/pipe-transform.interface';\r\nimport {\r\n  ErrorHttpStatusCode,\r\n  HttpErrorByCode,\r\n} from '../utils/http-error-by-code.util';\r\nimport { isNil } from '../utils/shared.utils';\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport interface ParseFloatPipeOptions {\r\n  errorHttpStatusCode?: ErrorHttpStatusCode;\r\n  exceptionFactory?: (error: string) => any;\r\n  optional?: boolean;\r\n}\r\n\r\n/**\r\n * Defines the built-in ParseFloat Pipe\r\n *\r\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\r\n *\r\n * @publicApi\r\n */\r\n@Injectable()\r\nexport class ParseFloatPipe implements PipeTransform<string> {\r\n  protected exceptionFactory: (error: string) => any;\r\n\r\n  constructor(@Optional() protected readonly options?: ParseFloatPipeOptions) {\r\n    options = options || {};\r\n    const { exceptionFactory, errorHttpStatusCode = HttpStatus.BAD_REQUEST } =\r\n      options;\r\n\r\n    this.exceptionFactory =\r\n      exceptionFactory ||\r\n      (error => new HttpErrorByCode[errorHttpStatusCode](error));\r\n  }\r\n\r\n  /**\r\n   * Method that accesses and performs optional transformation on argument for\r\n   * in-flight requests.\r\n   *\r\n   * @param value currently processed route argument\r\n   * @param metadata contains metadata about the currently processed route argument\r\n   */\r\n  async transform(value: string, metadata: ArgumentMetadata): Promise<number> {\r\n    if (isNil(value) && this.options?.optional) {\r\n      return value;\r\n    }\r\n    if (!this.isNumeric(value)) {\r\n      throw this.exceptionFactory(\r\n        'Validation failed (numeric string is expected)',\r\n      );\r\n    }\r\n    return parseFloat(value);\r\n  }\r\n\r\n  /**\r\n   * @param value currently processed route argument\r\n   * @returns `true` if `value` is a valid float number\r\n   */\r\n  protected isNumeric(value: string): boolean {\r\n    return (\r\n      ['string', 'number'].includes(typeof value) &&\r\n      !isNaN(parseFloat(value)) &&\r\n      isFinite(value as any)\r\n    );\r\n  }\r\n}\r\n"]}