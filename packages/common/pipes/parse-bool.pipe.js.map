{"version":3,"file":"parse-bool.pipe.js","sourceRoot":"","sources":["parse-bool.pipe.ts"],"names":[],"mappings":";;;;AAAA,kFAAqE;AACrE,8EAAiE;AACjE,gEAAuD;AAKvD,8EAG0C;AAC1C,wDAA8C;AAW9C;;;;;;GAMG;AAEI,IAAM,aAAa,2BAAnB,MAAM,aAAa;IAKxB,YAA2C,OAA8B;QAA9B,YAAO,GAAP,OAAO,CAAuB;QACvE,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;QACxB,MAAM,EAAE,gBAAgB,EAAE,mBAAmB,GAAG,6BAAU,CAAC,WAAW,EAAE,GACtE,OAAO,CAAC;QACV,IAAI,CAAC,gBAAgB;YACnB,gBAAgB;gBAChB,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,yCAAe,CAAC,mBAAmB,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;IAC/D,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,SAAS,CACb,KAAuB,EACvB,QAA0B;QAE1B,IAAI,IAAA,oBAAK,EAAC,KAAK,CAAC,IAAI,IAAI,CAAC,OAAO,EAAE,QAAQ,EAAE;YAC1C,OAAO,KAAK,CAAC;SACd;QACD,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;YACtB,OAAO,IAAI,CAAC;SACb;QACD,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACvB,OAAO,KAAK,CAAC;SACd;QACD,MAAM,IAAI,CAAC,gBAAgB,CACzB,gDAAgD,CACjD,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACO,MAAM,CAAC,KAAuB;QACtC,OAAO,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,MAAM,CAAC;IAC5C,CAAC;IAED;;;;OAIG;IACO,OAAO,CAAC,KAAuB;QACvC,OAAO,KAAK,KAAK,KAAK,IAAI,KAAK,KAAK,OAAO,CAAC;IAC9C,CAAC;CACF,CAAA;wBAxDY,aAAa;IADzB,IAAA,iCAAU,GAAE;IAME,mBAAA,IAAA,6BAAQ,GAAE,CAAA;;GALZ,aAAa,CAwDzB","sourcesContent":["import { Injectable } from '../decorators/core/injectable.decorator';\r\nimport { Optional } from '../decorators/core/optional.decorator';\r\nimport { HttpStatus } from '../enums/http-status.enum';\r\nimport {\r\n  ArgumentMetadata,\r\n  PipeTransform,\r\n} from '../interfaces/features/pipe-transform.interface';\r\nimport {\r\n  ErrorHttpStatusCode,\r\n  HttpErrorByCode,\r\n} from '../utils/http-error-by-code.util';\r\nimport { isNil } from '../utils/shared.utils';\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport interface ParseBoolPipeOptions {\r\n  errorHttpStatusCode?: ErrorHttpStatusCode;\r\n  exceptionFactory?: (error: string) => any;\r\n  optional?: boolean;\r\n}\r\n\r\n/**\r\n * Defines the built-in ParseBool Pipe\r\n *\r\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\r\n *\r\n * @publicApi\r\n */\r\n@Injectable()\r\nexport class ParseBoolPipe\r\n  implements PipeTransform<string | boolean, Promise<boolean>>\r\n{\r\n  protected exceptionFactory: (error: string) => any;\r\n\r\n  constructor(@Optional() protected readonly options?: ParseBoolPipeOptions) {\r\n    options = options || {};\r\n    const { exceptionFactory, errorHttpStatusCode = HttpStatus.BAD_REQUEST } =\r\n      options;\r\n    this.exceptionFactory =\r\n      exceptionFactory ||\r\n      (error => new HttpErrorByCode[errorHttpStatusCode](error));\r\n  }\r\n\r\n  /**\r\n   * Method that accesses and performs optional transformation on argument for\r\n   * in-flight requests.\r\n   *\r\n   * @param value currently processed route argument\r\n   * @param metadata contains metadata about the currently processed route argument\r\n   */\r\n  async transform(\r\n    value: string | boolean,\r\n    metadata: ArgumentMetadata,\r\n  ): Promise<boolean> {\r\n    if (isNil(value) && this.options?.optional) {\r\n      return value;\r\n    }\r\n    if (this.isTrue(value)) {\r\n      return true;\r\n    }\r\n    if (this.isFalse(value)) {\r\n      return false;\r\n    }\r\n    throw this.exceptionFactory(\r\n      'Validation failed (boolean string is expected)',\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param value currently processed route argument\r\n   * @returns `true` if `value` is said 'true', ie., if it is equal to the boolean\r\n   * `true` or the string `\"true\"`\r\n   */\r\n  protected isTrue(value: string | boolean): boolean {\r\n    return value === true || value === 'true';\r\n  }\r\n\r\n  /**\r\n   * @param value currently processed route argument\r\n   * @returns `true` if `value` is said 'false', ie., if it is equal to the boolean\r\n   * `false` or the string `\"false\"`\r\n   */\r\n  protected isFalse(value: string | boolean): boolean {\r\n    return value === false || value === 'false';\r\n  }\r\n}\r\n"]}