{"version":3,"file":"parse-file.pipe.js","sourceRoot":"","sources":["parse-file.pipe.ts"],"names":[],"mappings":";;;;AAAA,gDAA6D;AAC7D,uCAAyC;AAEzC,iFAAsE;AACtE,2DAA0E;AAI1E;;;;;;;;;GASG;AAEI,IAAM,aAAa,2BAAnB,MAAM,aAAa;IAKxB,YAAwB,UAA4B,EAAE;QACpD,MAAM,EACJ,gBAAgB,EAChB,mBAAmB,GAAG,kBAAU,CAAC,WAAW,EAC5C,UAAU,GAAG,EAAE,EACf,cAAc,GACf,GAAG,OAAO,CAAC;QAEZ,IAAI,CAAC,gBAAgB;YACnB,gBAAgB;gBAChB,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,yCAAe,CAAC,mBAAmB,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QAE7D,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,cAAc,GAAG,cAAc,IAAI,IAAI,CAAC;IAC/C,CAAC;IAED,KAAK,CAAC,SAAS,CAAC,KAAU;QACxB,MAAM,kBAAkB,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;QAEzD,IAAI,kBAAkB,IAAI,IAAI,CAAC,cAAc,EAAE;YAC7C,MAAM,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,CAAC;SACjD;QACD,IAAI,CAAC,kBAAkB,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;YACjD,MAAM,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;SACvC;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAEO,KAAK,CAAC,mBAAmB,CAAC,KAAU;QAC1C,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACxB,MAAM,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SACrD;aAAM;YACL,MAAM,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;SAC5B;IACH,CAAC;IAEO,iBAAiB,CAAC,KAAU;QAClC,MAAM,YAAY,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,IAAA,sBAAO,EAAC,KAAK,CAAC,CAAC;QAC5D,MAAM,aAAa,GAAG,IAAA,uBAAQ,EAAC,KAAK,CAAC,IAAI,IAAA,sBAAO,EAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QACrE,OAAO,IAAA,0BAAW,EAAC,KAAK,CAAC,IAAI,YAAY,IAAI,aAAa,CAAC;IAC7D,CAAC;IAES,KAAK,CAAC,QAAQ,CAAC,IAAS;QAChC,KAAK,MAAM,SAAS,IAAI,IAAI,CAAC,UAAU,EAAE;YACvC,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;SAC7C;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEO,KAAK,CAAC,eAAe,CAAC,IAAS,EAAE,SAAwB;QAC/D,MAAM,OAAO,GAAG,MAAM,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAE9C,IAAI,CAAC,OAAO,EAAE;YACZ,MAAM,YAAY,GAAG,SAAS,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YACvD,MAAM,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;SAC3C;IACH,CAAC;IAED;;OAEG;IACH,aAAa;QACX,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;CACF,CAAA;wBAtEY,aAAa;IADzB,IAAA,iBAAU,GAAE;IAME,mBAAA,IAAA,eAAQ,GAAE,CAAA;;GALZ,aAAa,CAsEzB","sourcesContent":["import { Injectable, Optional } from '../../decorators/core';\r\nimport { HttpStatus } from '../../enums';\r\nimport { PipeTransform } from '../../interfaces/features/pipe-transform.interface';\r\nimport { HttpErrorByCode } from '../../utils/http-error-by-code.util';\r\nimport { isEmpty, isObject, isUndefined } from '../../utils/shared.utils';\r\nimport { FileValidator } from './file-validator.interface';\r\nimport { ParseFileOptions } from './parse-file-options.interface';\r\n\r\n/**\r\n * Defines the built-in ParseFile Pipe. This pipe can be used to validate incoming files\r\n * with `@UploadedFile()` decorator. You can use either other specific built-in validators\r\n * or provide one of your own, simply implementing it through FileValidator interface\r\n * and adding it to ParseFilePipe's constructor.\r\n *\r\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\r\n *\r\n * @publicApi\r\n */\r\n@Injectable()\r\nexport class ParseFilePipe implements PipeTransform<any> {\r\n  protected exceptionFactory: (error: string) => any;\r\n  private readonly validators: FileValidator[];\r\n  private readonly fileIsRequired: boolean;\r\n\r\n  constructor(@Optional() options: ParseFileOptions = {}) {\r\n    const {\r\n      exceptionFactory,\r\n      errorHttpStatusCode = HttpStatus.BAD_REQUEST,\r\n      validators = [],\r\n      fileIsRequired,\r\n    } = options;\r\n\r\n    this.exceptionFactory =\r\n      exceptionFactory ||\r\n      (error => new HttpErrorByCode[errorHttpStatusCode](error));\r\n\r\n    this.validators = validators;\r\n    this.fileIsRequired = fileIsRequired ?? true;\r\n  }\r\n\r\n  async transform(value: any): Promise<any> {\r\n    const areThereAnyFilesIn = this.thereAreNoFilesIn(value);\r\n\r\n    if (areThereAnyFilesIn && this.fileIsRequired) {\r\n      throw this.exceptionFactory('File is required');\r\n    }\r\n    if (!areThereAnyFilesIn && this.validators.length) {\r\n      await this.validateFilesOrFile(value);\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  private async validateFilesOrFile(value: any): Promise<void> {\r\n    if (Array.isArray(value)) {\r\n      await Promise.all(value.map(f => this.validate(f)));\r\n    } else {\r\n      await this.validate(value);\r\n    }\r\n  }\r\n\r\n  private thereAreNoFilesIn(value: any): boolean {\r\n    const isEmptyArray = Array.isArray(value) && isEmpty(value);\r\n    const isEmptyObject = isObject(value) && isEmpty(Object.keys(value));\r\n    return isUndefined(value) || isEmptyArray || isEmptyObject;\r\n  }\r\n\r\n  protected async validate(file: any): Promise<any> {\r\n    for (const validator of this.validators) {\r\n      await this.validateOrThrow(file, validator);\r\n    }\r\n    return file;\r\n  }\r\n\r\n  private async validateOrThrow(file: any, validator: FileValidator) {\r\n    const isValid = await validator.isValid(file);\r\n\r\n    if (!isValid) {\r\n      const errorMessage = validator.buildErrorMessage(file);\r\n      throw this.exceptionFactory(errorMessage);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns list of validators used in this pipe.\r\n   */\r\n  getValidators() {\r\n    return this.validators;\r\n  }\r\n}\r\n"]}