{"version":3,"file":"file-type.validator.js","sourceRoot":"","sources":["file-type.validator.ts"],"names":[],"mappings":";;;AAAA,yEAA2D;AAO3D;;;;;;;;;;GAUG;AACH,MAAa,iBAAkB,SAAQ,wCAGtC;IACC,iBAAiB;QACf,OAAO,uCAAuC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,GAAG,CAAC;IACnF,CAAC;IAED,OAAO,CAAC,IAAY;QAClB,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;YAC3B,OAAO,IAAI,CAAC;SACb;QAED,OAAO,CACL,CAAC,CAAC,IAAI;YACN,UAAU,IAAI,IAAI;YAClB,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CACvD,CAAC;IACJ,CAAC;CACF;AAnBD,8CAmBC","sourcesContent":["import { FileValidator } from './file-validator.interface';\r\nimport { IFile } from './interfaces';\r\n\r\nexport type FileTypeValidatorOptions = {\r\n  fileType: string | RegExp;\r\n};\r\n\r\n/**\r\n * Defines the built-in FileType File Validator. It validates incoming files mime-type\r\n * matching a string or a regular expression. Note that this validator uses a naive strategy\r\n * to check the mime-type and could be fooled if the client provided a file with renamed extension.\r\n * (for instance, renaming a 'malicious.bat' to 'malicious.jpeg'). To handle such security issues\r\n * with more reliability, consider checking against the file's [magic-numbers](https://en.wikipedia.org/wiki/Magic_number_%28programming%29)\r\n *\r\n * @see [File Validators](https://docs.nestjs.com/techniques/file-upload#validators)\r\n *\r\n * @publicApi\r\n */\r\nexport class FileTypeValidator extends FileValidator<\r\n  FileTypeValidatorOptions,\r\n  IFile\r\n> {\r\n  buildErrorMessage(): string {\r\n    return `Validation failed (expected type is ${this.validationOptions.fileType})`;\r\n  }\r\n\r\n  isValid(file?: IFile): boolean {\r\n    if (!this.validationOptions) {\r\n      return true;\r\n    }\r\n\r\n    return (\r\n      !!file &&\r\n      'mimetype' in file &&\r\n      !!file.mimetype.match(this.validationOptions.fileType)\r\n    );\r\n  }\r\n}\r\n"]}