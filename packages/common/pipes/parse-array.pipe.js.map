{"version":3,"file":"parse-array.pipe.js","sourceRoot":"","sources":["parse-array.pipe.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '../decorators/core/injectable.decorator';\r\nimport { Optional } from '../decorators/core/optional.decorator';\r\nimport { HttpStatus } from '../enums/http-status.enum';\r\nimport { Type } from '../interfaces';\r\nimport {\r\n  ArgumentMetadata,\r\n  PipeTransform,\r\n} from '../interfaces/features/pipe-transform.interface';\r\nimport { HttpErrorByCode } from '../utils/http-error-by-code.util';\r\nimport { isNil, isUndefined, isString } from '../utils/shared.utils';\r\nimport { ValidationPipe, ValidationPipeOptions } from './validation.pipe';\r\n\r\nconst VALIDATION_ERROR_MESSAGE = 'Validation failed (parsable array expected)';\r\nconst DEFAULT_ARRAY_SEPARATOR = ',';\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport interface ParseArrayOptions\r\n  extends Omit<\r\n    ValidationPipeOptions,\r\n    'transform' | 'validateCustomDecorators' | 'exceptionFactory'\r\n  > {\r\n  items?: Type<unknown>;\r\n  separator?: string;\r\n  optional?: boolean;\r\n  exceptionFactory?: (error: any) => any;\r\n}\r\n\r\n/**\r\n * Defines the built-in ParseArray Pipe\r\n *\r\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\r\n *\r\n * @publicApi\r\n */\r\n@Injectable()\r\nexport class ParseArrayPipe implements PipeTransform {\r\n  protected readonly validationPipe: ValidationPipe;\r\n  protected exceptionFactory: (error: string) => any;\r\n\r\n  constructor(@Optional() protected readonly options: ParseArrayOptions = {}) {\r\n    this.validationPipe = new ValidationPipe({\r\n      transform: true,\r\n      validateCustomDecorators: true,\r\n      ...options,\r\n    });\r\n\r\n    const { exceptionFactory, errorHttpStatusCode = HttpStatus.BAD_REQUEST } =\r\n      options;\r\n    this.exceptionFactory =\r\n      exceptionFactory ||\r\n      (error => new HttpErrorByCode[errorHttpStatusCode](error));\r\n  }\r\n\r\n  /**\r\n   * Method that accesses and performs optional transformation on argument for\r\n   * in-flight requests.\r\n   *\r\n   * @param value currently processed route argument\r\n   * @param metadata contains metadata about the currently processed route argument\r\n   */\r\n  async transform(value: any, metadata: ArgumentMetadata): Promise<any> {\r\n    if (!value && !this.options.optional) {\r\n      throw this.exceptionFactory(VALIDATION_ERROR_MESSAGE);\r\n    } else if (isNil(value) && this.options.optional) {\r\n      return value;\r\n    }\r\n\r\n    if (!Array.isArray(value)) {\r\n      if (!isString(value)) {\r\n        throw this.exceptionFactory(VALIDATION_ERROR_MESSAGE);\r\n      } else {\r\n        try {\r\n          value = value\r\n            .trim()\r\n            .split(this.options.separator || DEFAULT_ARRAY_SEPARATOR);\r\n        } catch {\r\n          throw this.exceptionFactory(VALIDATION_ERROR_MESSAGE);\r\n        }\r\n      }\r\n    }\r\n    if (this.options.items) {\r\n      const validationMetadata: ArgumentMetadata = {\r\n        metatype: this.options.items,\r\n        type: 'query',\r\n      };\r\n\r\n      const isExpectedTypePrimitive = this.isExpectedTypePrimitive();\r\n      const toClassInstance = (item: any, index?: number) => {\r\n        if (this.options.items !== String) {\r\n          try {\r\n            item = JSON.parse(item);\r\n          } catch {}\r\n        }\r\n        if (isExpectedTypePrimitive) {\r\n          return this.validatePrimitive(item, index);\r\n        }\r\n        return this.validationPipe.transform(item, validationMetadata);\r\n      };\r\n      if (this.options.stopAtFirstError === false) {\r\n        // strict compare to \"false\" to make sure\r\n        // that this option is disabled by default\r\n        let errors = [];\r\n\r\n        const targetArray = value as Array<unknown>;\r\n        for (let i = 0; i < targetArray.length; i++) {\r\n          try {\r\n            targetArray[i] = await toClassInstance(targetArray[i]);\r\n          } catch (err) {\r\n            let message: string[] | unknown;\r\n            if ((err as any).getResponse) {\r\n              const response = (err as any).getResponse();\r\n              if (Array.isArray(response.message)) {\r\n                message = response.message.map(\r\n                  (item: string) => `[${i}] ${item}`,\r\n                );\r\n              } else {\r\n                message = `[${i}] ${response.message}`;\r\n              }\r\n            } else {\r\n              message = err;\r\n            }\r\n            errors = errors.concat(message);\r\n          }\r\n        }\r\n        if (errors.length > 0) {\r\n          throw this.exceptionFactory(errors as any);\r\n        }\r\n        return targetArray;\r\n      } else {\r\n        value = await Promise.all(value.map(toClassInstance));\r\n      }\r\n    }\r\n    return value;\r\n  }\r\n\r\n  protected isExpectedTypePrimitive(): boolean {\r\n    return [Boolean, Number, String].includes(this.options.items as any);\r\n  }\r\n\r\n  protected validatePrimitive(originalValue: any, index?: number) {\r\n    if (this.options.items === Number) {\r\n      const value =\r\n        originalValue !== null && originalValue !== '' ? +originalValue : NaN;\r\n      if (isNaN(value)) {\r\n        throw this.exceptionFactory(\r\n          `${isUndefined(index) ? '' : `[${index}] `}item must be a number`,\r\n        );\r\n      }\r\n      return value;\r\n    } else if (this.options.items === String) {\r\n      if (!isString(originalValue)) {\r\n        return `${originalValue}`;\r\n      }\r\n    } else if (this.options.items === Boolean) {\r\n      if (typeof originalValue !== 'boolean') {\r\n        throw this.exceptionFactory(\r\n          `${\r\n            isUndefined(index) ? '' : `[${index}] `\r\n          }item must be a boolean value`,\r\n        );\r\n      }\r\n    }\r\n    return originalValue;\r\n  }\r\n}\r\n"]}