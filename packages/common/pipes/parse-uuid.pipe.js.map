{"version":3,"file":"parse-uuid.pipe.js","sourceRoot":"","sources":["parse-uuid.pipe.ts"],"names":[],"mappings":";;;;;AAAA,kFAAqE;AACrE,8EAAiE;AACjE,gEAAuD;AAKvD,8EAG0C;AAC1C,wDAAwD;AAYxD;;;;;;GAMG;AAEI,IAAM,aAAa,6CAAnB,MAAM,aAAa;IAUxB,YAA2C,OAA8B;QAA9B,YAAO,GAAP,OAAO,CAAuB;QACvE,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;QACxB,MAAM,EACJ,gBAAgB,EAChB,mBAAmB,GAAG,6BAAU,CAAC,WAAW,EAC5C,OAAO,GACR,GAAG,OAAO,CAAC;QAEZ,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,gBAAgB;YACnB,gBAAgB;gBAChB,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,yCAAe,CAAC,mBAAmB,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;IAC/D,CAAC;IAED,KAAK,CAAC,SAAS,CAAC,KAAa,EAAE,QAA0B;QACvD,IAAI,IAAA,oBAAK,EAAC,KAAK,CAAC,IAAI,IAAI,CAAC,OAAO,EAAE,QAAQ,EAAE;YAC1C,OAAO,KAAK,CAAC;SACd;QACD,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,EAAE;YACrC,MAAM,IAAI,CAAC,gBAAgB,CACzB,0BACE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,EACxC,eAAe,CAChB,CAAC;SACH;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAES,MAAM,CAAC,GAAY,EAAE,OAAO,GAAG,KAAK;QAC5C,IAAI,CAAC,IAAA,uBAAQ,EAAC,GAAG,CAAC,EAAE;YAClB,MAAM,IAAI,CAAC,gBAAgB,CAAC,0CAA0C,CAAC,CAAC;SACzE;QACD,MAAM,OAAO,GAAG,eAAa,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QACnD,OAAO,OAAO,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;IAC5B,CAAC;;AA3CgB,yBAAW,GAAG;IAC7B,CAAC,EAAE,kEAAkE;IACrE,CAAC,EAAE,wEAAwE;IAC3E,CAAC,EAAE,wEAAwE;IAC3E,GAAG,EAAE,iEAAiE;CACvE,AAL2B,CAK1B;wBANS,aAAa;IADzB,IAAA,iCAAU,GAAE;IAWE,mBAAA,IAAA,6BAAQ,GAAE,CAAA;;GAVZ,aAAa,CA6CzB","sourcesContent":["import { Injectable } from '../decorators/core/injectable.decorator';\r\nimport { Optional } from '../decorators/core/optional.decorator';\r\nimport { HttpStatus } from '../enums/http-status.enum';\r\nimport {\r\n  ArgumentMetadata,\r\n  PipeTransform,\r\n} from '../interfaces/features/pipe-transform.interface';\r\nimport {\r\n  ErrorHttpStatusCode,\r\n  HttpErrorByCode,\r\n} from '../utils/http-error-by-code.util';\r\nimport { isNil, isString } from '../utils/shared.utils';\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport interface ParseUUIDPipeOptions {\r\n  version?: '3' | '4' | '5';\r\n  errorHttpStatusCode?: ErrorHttpStatusCode;\r\n  exceptionFactory?: (errors: string) => any;\r\n  optional?: boolean;\r\n}\r\n\r\n/**\r\n * Defines the built-in ParseUUID Pipe\r\n *\r\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\r\n *\r\n * @publicApi\r\n */\r\n@Injectable()\r\nexport class ParseUUIDPipe implements PipeTransform<string> {\r\n  protected static uuidRegExps = {\r\n    3: /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\r\n    4: /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\r\n    5: /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\r\n    all: /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\r\n  };\r\n  private readonly version: '3' | '4' | '5';\r\n  protected exceptionFactory: (errors: string) => any;\r\n\r\n  constructor(@Optional() protected readonly options?: ParseUUIDPipeOptions) {\r\n    options = options || {};\r\n    const {\r\n      exceptionFactory,\r\n      errorHttpStatusCode = HttpStatus.BAD_REQUEST,\r\n      version,\r\n    } = options;\r\n\r\n    this.version = version;\r\n    this.exceptionFactory =\r\n      exceptionFactory ||\r\n      (error => new HttpErrorByCode[errorHttpStatusCode](error));\r\n  }\r\n\r\n  async transform(value: string, metadata: ArgumentMetadata): Promise<string> {\r\n    if (isNil(value) && this.options?.optional) {\r\n      return value;\r\n    }\r\n    if (!this.isUUID(value, this.version)) {\r\n      throw this.exceptionFactory(\r\n        `Validation failed (uuid${\r\n          this.version ? ` v ${this.version}` : ''\r\n        } is expected)`,\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  protected isUUID(str: unknown, version = 'all') {\r\n    if (!isString(str)) {\r\n      throw this.exceptionFactory('The value passed as UUID is not a string');\r\n    }\r\n    const pattern = ParseUUIDPipe.uuidRegExps[version];\r\n    return pattern?.test(str);\r\n  }\r\n}\r\n"]}