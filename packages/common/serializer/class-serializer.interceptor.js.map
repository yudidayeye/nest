{"version":3,"file":"class-serializer.interceptor.js","sourceRoot":"","sources":["class-serializer.interceptor.ts"],"names":[],"mappings":";;;;AAEA,8CAAqC;AACrC,6CAAkE;AAClE,gDAAgD;AAIhD,kEAAyD;AACzD,wDAAiD;AACjD,6EAAwE;AAExE,IAAI,gBAAgB,GAAuB,EAAS,CAAC;AAMrD,kBAAkB;AAClB,kEAAkE;AAClE,mCAAmC;AACnC,MAAM,SAAS,GAAG,WAAW,CAAC;AAU9B;;GAEG;AAEI,IAAM,0BAA0B,wCAAhC,MAAM,0BAA0B;IACrC,YACwC,SAAc,EAEjC,iBAAoD,EAAE;QAFnC,cAAS,GAAT,SAAS,CAAK;QAEjC,mBAAc,GAAd,cAAc,CAAwC;QAEzE,gBAAgB;YACd,cAAc,EAAE,kBAAkB;gBAClC,IAAA,+BAAW,EAAC,mBAAmB,EAAE,4BAA4B,EAAE,GAAG,EAAE,CAClE,OAAO,CAAC,mBAAmB,CAAC,CAC7B,CAAC;QAEJ,IAAI,CAAC,cAAc,EAAE,kBAAkB,EAAE;YACvC,OAAO,CAAC,mBAAmB,CAAC,CAAC;SAC9B;IACH,CAAC;IAED,SAAS,CAAC,OAAyB,EAAE,IAAiB;QACpD,MAAM,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;QACvD,MAAM,OAAO,GAAG;YACd,GAAG,IAAI,CAAC,cAAc;YACtB,GAAG,cAAc;SAClB,CAAC;QACF,OAAO,IAAI;aACR,MAAM,EAAE;aACR,IAAI,CACH,IAAA,eAAG,EAAC,CAAC,GAAmD,EAAE,EAAE,CAC1D,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,OAAO,CAAC,CAC7B,CACF,CAAC;IACN,CAAC;IAED;;OAEG;IACH,SAAS,CACP,QAAwD,EACxD,OAAsC;QAEtC,IAAI,CAAC,IAAA,uBAAQ,EAAC,QAAQ,CAAC,IAAI,QAAQ,YAAY,4BAAc,EAAE;YAC7D,OAAO,QAAQ,CAAC;SACjB;QAED,OAAO,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC;YAC5B,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YAC5D,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IAC/C,CAAC;IAED,gBAAgB,CACd,YAAiB,EACjB,OAAsC;QAEtC,IAAI,CAAC,YAAY,EAAE;YACjB,OAAO,YAAY,CAAC;SACrB;QACD,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;YACjB,OAAO,gBAAgB,CAAC,YAAY,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;SAC7D;QACD,IAAI,YAAY,YAAY,OAAO,CAAC,IAAI,EAAE;YACxC,OAAO,gBAAgB,CAAC,YAAY,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;SAC7D;QACD,MAAM,QAAQ,GAAG,gBAAgB,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;QAC3E,OAAO,gBAAgB,CAAC,YAAY,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IAC1D,CAAC;IAES,iBAAiB,CACzB,OAAyB;QAEzB,OAAO,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,qDAAwB,EAAE;YAChE,OAAO,CAAC,UAAU,EAAE;YACpB,OAAO,CAAC,QAAQ,EAAE;SACnB,CAAC,CAAC;IACL,CAAC;CACF,CAAA;qCAzEY,0BAA0B;IADtC,IAAA,iBAAU,GAAE;IAGR,mBAAA,IAAA,aAAM,EAAC,SAAS,CAAC,CAAA;IACjB,mBAAA,IAAA,eAAQ,GAAE,CAAA;;GAHF,0BAA0B,CAyEtC","sourcesContent":["import { ClassSerializerContextOptions } from './class-serializer.interfaces';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Inject, Injectable, Optional } from '../decorators/core';\r\nimport { StreamableFile } from '../file-stream';\r\nimport { CallHandler, ExecutionContext, NestInterceptor } from '../interfaces';\r\nimport { ClassTransformOptions } from '../interfaces/external/class-transform-options.interface';\r\nimport { TransformerPackage } from '../interfaces/external/transformer-package.interface';\r\nimport { loadPackage } from '../utils/load-package.util';\r\nimport { isObject } from '../utils/shared.utils';\r\nimport { CLASS_SERIALIZER_OPTIONS } from './class-serializer.constants';\r\n\r\nlet classTransformer: TransformerPackage = {} as any;\r\n\r\nexport interface PlainLiteralObject {\r\n  [key: string]: any;\r\n}\r\n\r\n// NOTE (external)\r\n// We need to deduplicate them here due to the circular dependency\r\n// between core and common packages\r\nconst REFLECTOR = 'Reflector';\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport interface ClassSerializerInterceptorOptions\r\n  extends ClassTransformOptions {\r\n  transformerPackage?: TransformerPackage;\r\n}\r\n\r\n/**\r\n * @publicApi\r\n */\r\n@Injectable()\r\nexport class ClassSerializerInterceptor implements NestInterceptor {\r\n  constructor(\r\n    @Inject(REFLECTOR) protected readonly reflector: any,\r\n    @Optional()\r\n    protected readonly defaultOptions: ClassSerializerInterceptorOptions = {},\r\n  ) {\r\n    classTransformer =\r\n      defaultOptions?.transformerPackage ??\r\n      loadPackage('class-transformer', 'ClassSerializerInterceptor', () =>\r\n        require('class-transformer'),\r\n      );\r\n\r\n    if (!defaultOptions?.transformerPackage) {\r\n      require('class-transformer');\r\n    }\r\n  }\r\n\r\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\r\n    const contextOptions = this.getContextOptions(context);\r\n    const options = {\r\n      ...this.defaultOptions,\r\n      ...contextOptions,\r\n    };\r\n    return next\r\n      .handle()\r\n      .pipe(\r\n        map((res: PlainLiteralObject | Array<PlainLiteralObject>) =>\r\n          this.serialize(res, options),\r\n        ),\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Serializes responses that are non-null objects nor streamable files.\r\n   */\r\n  serialize(\r\n    response: PlainLiteralObject | Array<PlainLiteralObject>,\r\n    options: ClassSerializerContextOptions,\r\n  ): PlainLiteralObject | Array<PlainLiteralObject> {\r\n    if (!isObject(response) || response instanceof StreamableFile) {\r\n      return response;\r\n    }\r\n\r\n    return Array.isArray(response)\r\n      ? response.map(item => this.transformToPlain(item, options))\r\n      : this.transformToPlain(response, options);\r\n  }\r\n\r\n  transformToPlain(\r\n    plainOrClass: any,\r\n    options: ClassSerializerContextOptions,\r\n  ): PlainLiteralObject {\r\n    if (!plainOrClass) {\r\n      return plainOrClass;\r\n    }\r\n    if (!options.type) {\r\n      return classTransformer.classToPlain(plainOrClass, options);\r\n    }\r\n    if (plainOrClass instanceof options.type) {\r\n      return classTransformer.classToPlain(plainOrClass, options);\r\n    }\r\n    const instance = classTransformer.plainToClass(options.type, plainOrClass);\r\n    return classTransformer.classToPlain(instance, options);\r\n  }\r\n\r\n  protected getContextOptions(\r\n    context: ExecutionContext,\r\n  ): ClassSerializerContextOptions | undefined {\r\n    return this.reflector.getAllAndOverride(CLASS_SERIALIZER_OPTIONS, [\r\n      context.getHandler(),\r\n      context.getClass(),\r\n    ]);\r\n  }\r\n}\r\n"]}