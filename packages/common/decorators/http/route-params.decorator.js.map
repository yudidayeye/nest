{"version":3,"file":"route-params.decorator.js","sourceRoot":"","sources":["route-params.decorator.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  RESPONSE_PASSTHROUGH_METADATA,\r\n  ROUTE_ARGS_METADATA,\r\n} from '../../constants';\r\nimport { RouteParamtypes } from '../../enums/route-paramtypes.enum';\r\nimport { PipeTransform } from '../../index';\r\nimport { Type } from '../../interfaces';\r\nimport { isNil, isString } from '../../utils/shared.utils';\r\n\r\n/**\r\n * The `@Response()`/`@Res` parameter decorator options.\r\n */\r\nexport interface ResponseDecoratorOptions {\r\n  /**\r\n   * Determines whether the response will be sent manually within the route handler,\r\n   * with the use of native response handling methods exposed by the platform-specific response object,\r\n   * or if it should passthrough Nest response processing pipeline.\r\n   *\r\n   * @default false\r\n   */\r\n  passthrough: boolean;\r\n}\r\n\r\nexport type ParamData = object | string | number;\r\nexport interface RouteParamMetadata {\r\n  index: number;\r\n  data?: ParamData;\r\n}\r\n\r\nexport function assignMetadata<TParamtype = any, TArgs = any>(\r\n  args: TArgs,\r\n  paramtype: TParamtype,\r\n  index: number,\r\n  data?: ParamData,\r\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\r\n) {\r\n  return {\r\n    ...args,\r\n    [`${paramtype}:${index}`]: {\r\n      index,\r\n      data,\r\n      pipes,\r\n    },\r\n  };\r\n}\r\n\r\nfunction createRouteParamDecorator(paramtype: RouteParamtypes) {\r\n  return (data?: ParamData): ParameterDecorator =>\r\n    (target, key, index) => {\r\n      const args =\r\n        Reflect.getMetadata(ROUTE_ARGS_METADATA, target.constructor, key) || {};\r\n      Reflect.defineMetadata(\r\n        ROUTE_ARGS_METADATA,\r\n        assignMetadata<RouteParamtypes, Record<number, RouteParamMetadata>>(\r\n          args,\r\n          paramtype,\r\n          index,\r\n          data,\r\n        ),\r\n        target.constructor,\r\n        key,\r\n      );\r\n    };\r\n}\r\n\r\nconst createPipesRouteParamDecorator =\r\n  (paramtype: RouteParamtypes) =>\r\n  (\r\n    data?: any,\r\n    ...pipes: (Type<PipeTransform> | PipeTransform)[]\r\n  ): ParameterDecorator =>\r\n  (target, key, index) => {\r\n    const args =\r\n      Reflect.getMetadata(ROUTE_ARGS_METADATA, target.constructor, key) || {};\r\n    const hasParamData = isNil(data) || isString(data);\r\n    const paramData = hasParamData ? data : undefined;\r\n    const paramPipes = hasParamData ? pipes : [data, ...pipes];\r\n\r\n    Reflect.defineMetadata(\r\n      ROUTE_ARGS_METADATA,\r\n      assignMetadata(args, paramtype, index, paramData, ...paramPipes),\r\n      target.constructor,\r\n      key,\r\n    );\r\n  };\r\n\r\n/**\r\n * Route handler parameter decorator. Extracts the `Request`\r\n * object from the underlying platform and populates the decorated\r\n * parameter with the value of `Request`.\r\n *\r\n * Example: `logout(@Request() req)`\r\n *\r\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\r\n *\r\n * @publicApi\r\n */\r\nexport const Request: () => ParameterDecorator = createRouteParamDecorator(\r\n  RouteParamtypes.REQUEST,\r\n);\r\n\r\n/**\r\n * Route handler parameter decorator. Extracts the `Response`\r\n * object from the underlying platform and populates the decorated\r\n * parameter with the value of `Response`.\r\n *\r\n * Example: `logout(@Response() res)`\r\n *\r\n * @publicApi\r\n */\r\nexport const Response: (\r\n  options?: ResponseDecoratorOptions,\r\n) => ParameterDecorator =\r\n  (options?: ResponseDecoratorOptions) => (target, key, index) => {\r\n    if (options?.passthrough) {\r\n      Reflect.defineMetadata(\r\n        RESPONSE_PASSTHROUGH_METADATA,\r\n        options?.passthrough,\r\n        target.constructor,\r\n        key,\r\n      );\r\n    }\r\n    return createRouteParamDecorator(RouteParamtypes.RESPONSE)()(\r\n      target,\r\n      key,\r\n      index,\r\n    );\r\n  };\r\n\r\n/**\r\n * Route handler parameter decorator. Extracts reference to the `Next` function\r\n * from the underlying platform and populates the decorated\r\n * parameter with the value of `Next`.\r\n *\r\n * @publicApi\r\n */\r\nexport const Next: () => ParameterDecorator = createRouteParamDecorator(\r\n  RouteParamtypes.NEXT,\r\n);\r\n\r\n/**\r\n * Route handler parameter decorator. Extracts the `Ip` property\r\n * from the `req` object and populates the decorated\r\n * parameter with the value of `ip`.\r\n *\r\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\r\n *\r\n * @publicApi\r\n */\r\nexport const Ip: () => ParameterDecorator = createRouteParamDecorator(\r\n  RouteParamtypes.IP,\r\n);\r\n\r\n/**\r\n * Route handler parameter decorator. Extracts the `Session` object\r\n * from the underlying platform and populates the decorated\r\n * parameter with the value of `Session`.\r\n *\r\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\r\n *\r\n * @publicApi\r\n */\r\nexport const Session: () => ParameterDecorator = createRouteParamDecorator(\r\n  RouteParamtypes.SESSION,\r\n);\r\n\r\n/**\r\n * Route handler parameter decorator. Extracts the `file` object\r\n * and populates the decorated parameter with the value of `file`.\r\n * Used in conjunction with\r\n * [multer middleware](https://github.com/expressjs/multer) for Express-based applications.\r\n *\r\n * For example:\r\n * ```typescript\r\n * uploadFile(@UploadedFile() file) {\r\n *   console.log(file);\r\n * }\r\n * ```\r\n * @see [Request object](https://docs.nestjs.com/techniques/file-upload)\r\n *\r\n * @publicApi\r\n */\r\nexport function UploadedFile(): ParameterDecorator;\r\n/**\r\n * Route handler parameter decorator. Extracts the `file` object\r\n * and populates the decorated parameter with the value of `file`.\r\n * Used in conjunction with\r\n * [multer middleware](https://github.com/expressjs/multer) for Express-based applications.\r\n *\r\n * For example:\r\n * ```typescript\r\n * uploadFile(@UploadedFile() file) {\r\n *   console.log(file);\r\n * }\r\n * ```\r\n * @see [Request object](https://docs.nestjs.com/techniques/file-upload)\r\n *\r\n * @publicApi\r\n */\r\nexport function UploadedFile(\r\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\r\n): ParameterDecorator;\r\n\r\n/**\r\n * Route handler parameter decorator. Extracts the `file` object\r\n * and populates the decorated parameter with the value of `file`.\r\n * Used in conjunction with\r\n * [multer middleware](https://github.com/expressjs/multer) for Express-based applications.\r\n *\r\n * For example:\r\n * ```typescript\r\n * uploadFile(@UploadedFile() file) {\r\n *   console.log(file);\r\n * }\r\n * ```\r\n * @see [Request object](https://docs.nestjs.com/techniques/file-upload)\r\n *\r\n * @publicApi\r\n */\r\nexport function UploadedFile(\r\n  fileKey?: string,\r\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\r\n): ParameterDecorator;\r\n/**\r\n * Route handler parameter decorator. Extracts the `file` object\r\n * and populates the decorated parameter with the value of `file`.\r\n * Used in conjunction with\r\n * [multer middleware](https://github.com/expressjs/multer) for Express-based applications.\r\n *\r\n * For example:\r\n * ```typescript\r\n * uploadFile(@UploadedFile() file) {\r\n *   console.log(file);\r\n * }\r\n * ```\r\n * @see [Request object](https://docs.nestjs.com/techniques/file-upload)\r\n *\r\n * @publicApi\r\n */\r\nexport function UploadedFile(\r\n  fileKey?: string | (Type<PipeTransform> | PipeTransform),\r\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\r\n): ParameterDecorator {\r\n  return createPipesRouteParamDecorator(RouteParamtypes.FILE)(\r\n    fileKey,\r\n    ...pipes,\r\n  );\r\n}\r\n\r\n/**\r\n * Route handler parameter decorator. Extracts the `files` object\r\n * and populates the decorated parameter with the value of `files`.\r\n * Used in conjunction with\r\n * [multer middleware](https://github.com/expressjs/multer) for Express-based applications.\r\n *\r\n * For example:\r\n * ```typescript\r\n * uploadFile(@UploadedFiles() files) {\r\n *   console.log(files);\r\n * }\r\n * ```\r\n * @see [Request object](https://docs.nestjs.com/techniques/file-upload)\r\n *\r\n * @publicApi\r\n */\r\nexport function UploadedFiles(): ParameterDecorator;\r\n/**\r\n * Route handler parameter decorator. Extracts the `files` object\r\n * and populates the decorated parameter with the value of `files`.\r\n * Used in conjunction with\r\n * [multer middleware](https://github.com/expressjs/multer) for Express-based applications.\r\n *\r\n * For example:\r\n * ```typescript\r\n * uploadFile(@UploadedFiles() files) {\r\n *   console.log(files);\r\n * }\r\n * ```\r\n * @see [Request object](https://docs.nestjs.com/techniques/file-upload)\r\n *\r\n * @publicApi\r\n */\r\nexport function UploadedFiles(\r\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\r\n): ParameterDecorator;\r\n/**\r\n * Route handler parameter decorator. Extracts the `files` object\r\n * and populates the decorated parameter with the value of `files`.\r\n * Used in conjunction with\r\n * [multer middleware](https://github.com/expressjs/multer) for Express-based applications.\r\n *\r\n * For example:\r\n * ```typescript\r\n * uploadFile(@UploadedFiles() files) {\r\n *   console.log(files);\r\n * }\r\n * ```\r\n * @see [Request object](https://docs.nestjs.com/techniques/file-upload)\r\n *\r\n * @publicApi\r\n */\r\nexport function UploadedFiles(\r\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\r\n): ParameterDecorator {\r\n  return createPipesRouteParamDecorator(RouteParamtypes.FILES)(\r\n    undefined,\r\n    ...pipes,\r\n  );\r\n}\r\n\r\n/**\r\n * Route handler parameter decorator. Extracts the `headers`\r\n * property from the `req` object and populates the decorated\r\n * parameter with the value of `headers`.\r\n *\r\n * For example: `async update(@Headers('Cache-Control') cacheControl: string)`\r\n *\r\n * @param property name of single header property to extract.\r\n *\r\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\r\n *\r\n * @publicApi\r\n */\r\nexport const Headers: (property?: string) => ParameterDecorator =\r\n  createRouteParamDecorator(RouteParamtypes.HEADERS);\r\n\r\n/**\r\n * Route handler parameter decorator. Extracts the `query`\r\n * property from the `req` object and populates the decorated\r\n * parameter with the value of `query`. May also apply pipes to the bound\r\n * query parameter.\r\n *\r\n * For example:\r\n * ```typescript\r\n * async find(@Query('user') user: string)\r\n * ```\r\n *\r\n * @param property name of single property to extract from the `query` object\r\n * @param pipes one or more pipes to apply to the bound query parameter\r\n *\r\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\r\n *\r\n * @publicApi\r\n */\r\nexport function Query(): ParameterDecorator;\r\n/**\r\n * Route handler parameter decorator. Extracts the `query`\r\n * property from the `req` object and populates the decorated\r\n * parameter with the value of `query`. May also apply pipes to the bound\r\n * query parameter.\r\n *\r\n * For example:\r\n * ```typescript\r\n * async find(@Query('user') user: string)\r\n * ```\r\n *\r\n * @param property name of single property to extract from the `query` object\r\n * @param pipes one or more pipes to apply to the bound query parameter\r\n *\r\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\r\n *\r\n * @publicApi\r\n */\r\nexport function Query(\r\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\r\n): ParameterDecorator;\r\n/**\r\n * Route handler parameter decorator. Extracts the `query`\r\n * property from the `req` object and populates the decorated\r\n * parameter with the value of `query`. May also apply pipes to the bound\r\n * query parameter.\r\n *\r\n * For example:\r\n * ```typescript\r\n * async find(@Query('user') user: string)\r\n * ```\r\n *\r\n * @param property name of single property to extract from the `query` object\r\n * @param pipes one or more pipes to apply to the bound query parameter\r\n *\r\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\r\n *\r\n * @publicApi\r\n */\r\nexport function Query(\r\n  property: string,\r\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\r\n): ParameterDecorator;\r\n/**\r\n * Route handler parameter decorator. Extracts the `query`\r\n * property from the `req` object and populates the decorated\r\n * parameter with the value of `query`. May also apply pipes to the bound\r\n * query parameter.\r\n *\r\n * For example:\r\n * ```typescript\r\n * async find(@Query('user') user: string)\r\n * ```\r\n *\r\n * @param property name of single property to extract from the `query` object\r\n * @param pipes one or more pipes to apply to the bound query parameter\r\n *\r\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\r\n *\r\n * @publicApi\r\n */\r\nexport function Query(\r\n  property?: string | (Type<PipeTransform> | PipeTransform),\r\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\r\n): ParameterDecorator {\r\n  return createPipesRouteParamDecorator(RouteParamtypes.QUERY)(\r\n    property,\r\n    ...pipes,\r\n  );\r\n}\r\n\r\n/**\r\n * Route handler parameter decorator. Extracts the entire `body`\r\n * object from the `req` object and populates the decorated\r\n * parameter with the value of `body`.\r\n *\r\n * For example:\r\n * ```typescript\r\n * async create(@Body() createDto: CreateCatDto)\r\n * ```\r\n *\r\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\r\n *\r\n * @publicApi\r\n */\r\nexport function Body(): ParameterDecorator;\r\n\r\n/**\r\n * Route handler parameter decorator. Extracts the entire `body`\r\n * object from the `req` object and populates the decorated\r\n * parameter with the value of `body`. Also applies the specified\r\n * pipes to that parameter.\r\n *\r\n * For example:\r\n * ```typescript\r\n * async create(@Body(new ValidationPipe()) createDto: CreateCatDto)\r\n * ```\r\n *\r\n * @param pipes one or more pipes - either instances or classes - to apply to\r\n * the bound body parameter.\r\n *\r\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\r\n * @see [Working with pipes](https://docs.nestjs.com/custom-decorators#working-with-pipes)\r\n *\r\n * @publicApi\r\n */\r\nexport function Body(\r\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\r\n): ParameterDecorator;\r\n\r\n/**\r\n * Route handler parameter decorator. Extracts a single property from\r\n * the `body` object property of the `req` object and populates the decorated\r\n * parameter with the value of that property. Also applies pipes to the bound\r\n * body parameter.\r\n *\r\n * For example:\r\n * ```typescript\r\n * async create(@Body('role', new ValidationPipe()) role: string)\r\n * ```\r\n *\r\n * @param property name of single property to extract from the `body` object\r\n * @param pipes one or more pipes - either instances or classes - to apply to\r\n * the bound body parameter.\r\n *\r\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\r\n * @see [Working with pipes](https://docs.nestjs.com/custom-decorators#working-with-pipes)\r\n *\r\n * @publicApi\r\n */\r\nexport function Body(\r\n  property: string,\r\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\r\n): ParameterDecorator;\r\n\r\n/**\r\n * Route handler parameter decorator. Extracts the entire `body` object\r\n * property, or optionally a named property of the `body` object, from\r\n * the `req` object and populates the decorated parameter with that value.\r\n * Also applies pipes to the bound body parameter.\r\n *\r\n * For example:\r\n * ```typescript\r\n * async create(@Body('role', new ValidationPipe()) role: string)\r\n * ```\r\n *\r\n * @param property name of single property to extract from the `body` object\r\n * @param pipes one or more pipes - either instances or classes - to apply to\r\n * the bound body parameter.\r\n *\r\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\r\n * @see [Working with pipes](https://docs.nestjs.com/custom-decorators#working-with-pipes)\r\n *\r\n * @publicApi\r\n */\r\nexport function Body(\r\n  property?: string | (Type<PipeTransform> | PipeTransform),\r\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\r\n): ParameterDecorator {\r\n  return createPipesRouteParamDecorator(RouteParamtypes.BODY)(\r\n    property,\r\n    ...pipes,\r\n  );\r\n}\r\n\r\n/**\r\n * Route handler parameter decorator. Extracts the `params`\r\n * property from the `req` object and populates the decorated\r\n * parameter with the value of `params`. May also apply pipes to the bound\r\n * parameter.\r\n *\r\n * For example, extracting all params:\r\n * ```typescript\r\n * findOne(@Param() params: string[])\r\n * ```\r\n *\r\n * For example, extracting a single param:\r\n * ```typescript\r\n * findOne(@Param('id') id: string)\r\n * ```\r\n * @param property name of single property to extract from the `req` object\r\n * @param pipes one or more pipes - either instances or classes - to apply to\r\n * the bound parameter.\r\n *\r\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\r\n * @see [Working with pipes](https://docs.nestjs.com/custom-decorators#working-with-pipes)\r\n *\r\n * @publicApi\r\n */\r\nexport function Param(): ParameterDecorator;\r\n/**\r\n * Route handler parameter decorator. Extracts the `params`\r\n * property from the `req` object and populates the decorated\r\n * parameter with the value of `params`. May also apply pipes to the bound\r\n * parameter.\r\n *\r\n * For example, extracting all params:\r\n * ```typescript\r\n * findOne(@Param() params: string[])\r\n * ```\r\n *\r\n * For example, extracting a single param:\r\n * ```typescript\r\n * findOne(@Param('id') id: string)\r\n * ```\r\n * @param property name of single property to extract from the `req` object\r\n * @param pipes one or more pipes - either instances or classes - to apply to\r\n * the bound parameter.\r\n *\r\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\r\n * @see [Working with pipes](https://docs.nestjs.com/custom-decorators#working-with-pipes)\r\n *\r\n * @publicApi\r\n */\r\nexport function Param(\r\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\r\n): ParameterDecorator;\r\n/**\r\n * Route handler parameter decorator. Extracts the `params`\r\n * property from the `req` object and populates the decorated\r\n * parameter with the value of `params`. May also apply pipes to the bound\r\n * parameter.\r\n *\r\n * For example, extracting all params:\r\n * ```typescript\r\n * findOne(@Param() params: string[])\r\n * ```\r\n *\r\n * For example, extracting a single param:\r\n * ```typescript\r\n * findOne(@Param('id') id: string)\r\n * ```\r\n * @param property name of single property to extract from the `req` object\r\n * @param pipes one or more pipes - either instances or classes - to apply to\r\n * the bound parameter.\r\n *\r\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\r\n * @see [Working with pipes](https://docs.nestjs.com/custom-decorators#working-with-pipes)\r\n *\r\n * @publicApi\r\n */\r\nexport function Param(\r\n  property: string,\r\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\r\n): ParameterDecorator;\r\n/**\r\n * Route handler parameter decorator. Extracts the `params`\r\n * property from the `req` object and populates the decorated\r\n * parameter with the value of `params`. May also apply pipes to the bound\r\n * parameter.\r\n *\r\n * For example, extracting all params:\r\n * ```typescript\r\n * findOne(@Param() params: string[])\r\n * ```\r\n *\r\n * For example, extracting a single param:\r\n * ```typescript\r\n * findOne(@Param('id') id: string)\r\n * ```\r\n * @param property name of single property to extract from the `req` object\r\n * @param pipes one or more pipes - either instances or classes - to apply to\r\n * the bound parameter.\r\n *\r\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\r\n * @see [Working with pipes](https://docs.nestjs.com/custom-decorators#working-with-pipes)\r\n *\r\n * @publicApi\r\n */\r\nexport function Param(\r\n  property?: string | (Type<PipeTransform> | PipeTransform),\r\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\r\n): ParameterDecorator {\r\n  return createPipesRouteParamDecorator(RouteParamtypes.PARAM)(\r\n    property,\r\n    ...pipes,\r\n  );\r\n}\r\n\r\n/**\r\n * Route handler parameter decorator. Extracts the `hosts`\r\n * property from the `req` object and populates the decorated\r\n * parameter with the value of `hosts`. May also apply pipes to the bound\r\n * parameter.\r\n *\r\n * For example, extracting all params:\r\n * ```typescript\r\n * findOne(@HostParam() params: string[])\r\n * ```\r\n *\r\n * For example, extracting a single param:\r\n * ```typescript\r\n * findOne(@HostParam('id') id: string)\r\n * ```\r\n * @param property name of single property to extract from the `req` object\r\n *\r\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\r\n *\r\n * @publicApi\r\n */\r\nexport function HostParam(): ParameterDecorator;\r\n/**\r\n * Route handler parameter decorator. Extracts the `hosts`\r\n * property from the `req` object and populates the decorated\r\n * parameter with the value of `hosts`. May also apply pipes to the bound\r\n * parameter.\r\n *\r\n * For example, extracting all params:\r\n * ```typescript\r\n * findOne(@HostParam() params: string[])\r\n * ```\r\n *\r\n * For example, extracting a single param:\r\n * ```typescript\r\n * findOne(@HostParam('id') id: string)\r\n * ```\r\n * @param property name of single property to extract from the `req` object\r\n *\r\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\r\n *\r\n * @publicApi\r\n */\r\nexport function HostParam(property: string): ParameterDecorator;\r\n/**\r\n * Route handler parameter decorator. Extracts the `hosts`\r\n * property from the `req` object and populates the decorated\r\n * parameter with the value of `params`. May also apply pipes to the bound\r\n * parameter.\r\n *\r\n * For example, extracting all params:\r\n * ```typescript\r\n * findOne(@HostParam() params: string[])\r\n * ```\r\n *\r\n * For example, extracting a single param:\r\n * ```typescript\r\n * findOne(@HostParam('id') id: string)\r\n * ```\r\n * @param property name of single property to extract from the `req` object\r\n *\r\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\r\n *\r\n * @publicApi\r\n */\r\nexport function HostParam(\r\n  property?: string | (Type<PipeTransform> | PipeTransform),\r\n): ParameterDecorator {\r\n  return createRouteParamDecorator(RouteParamtypes.HOST)(property);\r\n}\r\n\r\nexport const Req = Request;\r\nexport const Res = Response;\r\n"]}