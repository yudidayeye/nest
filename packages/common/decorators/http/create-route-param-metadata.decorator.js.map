{"version":3,"file":"create-route-param-metadata.decorator.js","sourceRoot":"","sources":["create-route-param-metadata.decorator.ts"],"names":[],"mappings":";;;AAAA,6BAA0B;AAC1B,+CAAsD;AAItD,yFAAwF;AACxF,2DAA6D;AAI7D;;;;;;GAMG;AACH,SAAgB,oBAAoB,CAKlC,OAAqE,EACrE,YAAsC,EAAE;IAIxC,MAAM,SAAS,GAAG,IAAA,SAAG,EAAC,EAAE,CAAC,CAAC;IAC1B,OAAO,CACH,IAAK,EACL,GAAG,KAA4D,EAC3C,EAAE,CACxB,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE;QACrB,MAAM,IAAI,GACR,OAAO,CAAC,WAAW,CAAC,+BAAmB,EAAE,MAAM,CAAC,WAAW,EAAE,GAAG,CAAC,IAAI,EAAE,CAAC;QAE1E,MAAM,MAAM,GAAG,CAAC,IAAS,EAAE,EAAE,CAC3B,IAAI;YACJ,CAAC,CAAC,IAAA,yBAAU,EAAC,IAAI,CAAC;gBAChB,IAAI,CAAC,SAAS;gBACd,IAAA,yBAAU,EAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;gBACrC,IAAA,yBAAU,EAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;QAEhC,MAAM,YAAY,GAAG,IAAA,oBAAK,EAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAClD,MAAM,SAAS,GAAG,YAAY,CAAC,CAAC,CAAE,IAAY,CAAC,CAAC,CAAC,SAAS,CAAC;QAC3D,MAAM,UAAU,GAAG,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,GAAG,KAAK,CAAC,CAAC;QAE3D,OAAO,CAAC,cAAc,CACpB,+BAAmB,EACnB,IAAA,2DAA6B,EAC3B,IAAI,EACJ,SAAS,EACT,KAAK,EACL,OAAO,EACP,SAAS,EACT,GAAI,UAA8B,CACnC,EACD,MAAM,CAAC,WAAW,EAClB,GAAG,CACJ,CAAC;QACF,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC;IAClD,CAAC,CAAC;AACN,CAAC;AA7CD,oDA6CC","sourcesContent":["import { uid } from 'uid';\r\nimport { ROUTE_ARGS_METADATA } from '../../constants';\r\nimport { PipeTransform } from '../../index';\r\nimport { Type } from '../../interfaces';\r\nimport { CustomParamFactory } from '../../interfaces/features/custom-route-param-factory.interface';\r\nimport { assignCustomParameterMetadata } from '../../utils/assign-custom-metadata.util';\r\nimport { isFunction, isNil } from '../../utils/shared.utils';\r\n\r\nexport type ParamDecoratorEnhancer = ParameterDecorator;\r\n\r\n/**\r\n * Defines HTTP route param decorator\r\n *\r\n * @param factory\r\n *\r\n * @publicApi\r\n */\r\nexport function createParamDecorator<\r\n  FactoryData = any,\r\n  FactoryInput = any,\r\n  FactoryOutput = any,\r\n>(\r\n  factory: CustomParamFactory<FactoryData, FactoryInput, FactoryOutput>,\r\n  enhancers: ParamDecoratorEnhancer[] = [],\r\n): (\r\n  ...dataOrPipes: (Type<PipeTransform> | PipeTransform | FactoryData)[]\r\n) => ParameterDecorator {\r\n  const paramtype = uid(21);\r\n  return (\r\n      data?,\r\n      ...pipes: (Type<PipeTransform> | PipeTransform | FactoryData)[]\r\n    ): ParameterDecorator =>\r\n    (target, key, index) => {\r\n      const args =\r\n        Reflect.getMetadata(ROUTE_ARGS_METADATA, target.constructor, key) || {};\r\n\r\n      const isPipe = (pipe: any) =>\r\n        pipe &&\r\n        ((isFunction(pipe) &&\r\n          pipe.prototype &&\r\n          isFunction(pipe.prototype.transform)) ||\r\n          isFunction(pipe.transform));\r\n\r\n      const hasParamData = isNil(data) || !isPipe(data);\r\n      const paramData = hasParamData ? (data as any) : undefined;\r\n      const paramPipes = hasParamData ? pipes : [data, ...pipes];\r\n\r\n      Reflect.defineMetadata(\r\n        ROUTE_ARGS_METADATA,\r\n        assignCustomParameterMetadata(\r\n          args,\r\n          paramtype,\r\n          index,\r\n          factory,\r\n          paramData,\r\n          ...(paramPipes as PipeTransform[]),\r\n        ),\r\n        target.constructor,\r\n        key,\r\n      );\r\n      enhancers.forEach(fn => fn(target, key, index));\r\n    };\r\n}\r\n"]}