{"version":3,"file":"use-interceptors.decorator.js","sourceRoot":"","sources":["use-interceptors.decorator.ts"],"names":[],"mappings":";;;AAAA,+CAAwD;AAExD,2EAAuE;AACvE,2DAAsD;AACtD,uEAA8D;AAE9D;;;;;;;;;;;;;;;;;;;;GAoBG;AACH,SAAgB,eAAe,CAC7B,GAAG,YAA4C;IAE/C,OAAO,CACL,MAAW,EACX,GAAqB,EACrB,UAAyC,EACzC,EAAE;QACF,MAAM,kBAAkB,GAAG,CACzB,WAAc,EACd,EAAE,CACF,WAAW;YACX,CAAC,IAAA,yBAAU,EAAC,WAAW,CAAC;gBACtB,IAAA,yBAAU,EAAE,WAAmC,CAAC,SAAS,CAAC,CAAC,CAAC;QAEhE,IAAI,UAAU,EAAE;YACd,IAAA,iCAAY,EACV,MAAM,CAAC,WAAW,EAClB,YAAY,EACZ,kBAAkB,EAClB,kBAAkB,EAClB,aAAa,CACd,CAAC;YACF,IAAA,0CAAmB,EACjB,iCAAqB,EACrB,YAAY,EACZ,UAAU,CAAC,KAAK,CACjB,CAAC;YACF,OAAO,UAAU,CAAC;SACnB;QACD,IAAA,iCAAY,EACV,MAAM,EACN,YAAY,EACZ,kBAAkB,EAClB,kBAAkB,EAClB,aAAa,CACd,CAAC;QACF,IAAA,0CAAmB,EAAC,iCAAqB,EAAE,YAAY,EAAE,MAAM,CAAC,CAAC;QACjE,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC;AACJ,CAAC;AAxCD,0CAwCC","sourcesContent":["import { INTERCEPTORS_METADATA } from '../../constants';\r\nimport { NestInterceptor } from '../../interfaces';\r\nimport { extendArrayMetadata } from '../../utils/extend-metadata.util';\r\nimport { isFunction } from '../../utils/shared.utils';\r\nimport { validateEach } from '../../utils/validate-each.util';\r\n\r\n/**\r\n * Decorator that binds interceptors to the scope of the controller or method,\r\n * depending on its context.\r\n *\r\n * When `@UseInterceptors` is used at the controller level, the interceptor will\r\n * be applied to every handler (method) in the controller.\r\n *\r\n * When `@UseInterceptors` is used at the individual handler level, the interceptor\r\n * will apply only to that specific method.\r\n *\r\n * @param interceptors a single interceptor instance or class, or a list of\r\n * interceptor instances or classes.\r\n *\r\n * @see [Interceptors](https://docs.nestjs.com/interceptors)\r\n *\r\n * @usageNotes\r\n * Interceptors can also be set up globally for all controllers and routes\r\n * using `app.useGlobalInterceptors()`.  [See here for details](https://docs.nestjs.com/interceptors#binding-interceptors)\r\n *\r\n * @publicApi\r\n */\r\nexport function UseInterceptors(\r\n  ...interceptors: (NestInterceptor | Function)[]\r\n): MethodDecorator & ClassDecorator {\r\n  return (\r\n    target: any,\r\n    key?: string | symbol,\r\n    descriptor?: TypedPropertyDescriptor<any>,\r\n  ) => {\r\n    const isInterceptorValid = <T extends Function | Record<string, any>>(\r\n      interceptor: T,\r\n    ) =>\r\n      interceptor &&\r\n      (isFunction(interceptor) ||\r\n        isFunction((interceptor as Record<string, any>).intercept));\r\n\r\n    if (descriptor) {\r\n      validateEach(\r\n        target.constructor,\r\n        interceptors,\r\n        isInterceptorValid,\r\n        '@UseInterceptors',\r\n        'interceptor',\r\n      );\r\n      extendArrayMetadata(\r\n        INTERCEPTORS_METADATA,\r\n        interceptors,\r\n        descriptor.value,\r\n      );\r\n      return descriptor;\r\n    }\r\n    validateEach(\r\n      target,\r\n      interceptors,\r\n      isInterceptorValid,\r\n      '@UseInterceptors',\r\n      'interceptor',\r\n    );\r\n    extendArrayMetadata(INTERCEPTORS_METADATA, interceptors, target);\r\n    return target;\r\n  };\r\n}\r\n"]}