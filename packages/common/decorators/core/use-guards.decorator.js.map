{"version":3,"file":"use-guards.decorator.js","sourceRoot":"","sources":["use-guards.decorator.ts"],"names":[],"mappings":";;;AAAA,+CAAkD;AAElD,2EAAuE;AACvE,2DAAsD;AACtD,uEAA8D;AAE9D;;;;;;;;;;;;;;;;;;;;GAoBG;AACH,SAAgB,SAAS,CACvB,GAAG,MAAkC;IAErC,OAAO,CACL,MAAW,EACX,GAAqB,EACrB,UAAyC,EACzC,EAAE;QACF,MAAM,YAAY,GAAG,CAA2C,KAAQ,EAAE,EAAE,CAC1E,KAAK;YACL,CAAC,IAAA,yBAAU,EAAC,KAAK,CAAC;gBAChB,IAAA,yBAAU,EAAE,KAA6B,CAAC,WAAW,CAAC,CAAC,CAAC;QAE5D,IAAI,UAAU,EAAE;YACd,IAAA,iCAAY,EACV,MAAM,CAAC,WAAW,EAClB,MAAM,EACN,YAAY,EACZ,YAAY,EACZ,OAAO,CACR,CAAC;YACF,IAAA,0CAAmB,EAAC,2BAAe,EAAE,MAAM,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC;YAC/D,OAAO,UAAU,CAAC;SACnB;QACD,IAAA,iCAAY,EAAC,MAAM,EAAE,MAAM,EAAE,YAAY,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;QAClE,IAAA,0CAAmB,EAAC,2BAAe,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;QACrD,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC;AACJ,CAAC;AA5BD,8BA4BC","sourcesContent":["import { GUARDS_METADATA } from '../../constants';\r\nimport { CanActivate } from '../../interfaces';\r\nimport { extendArrayMetadata } from '../../utils/extend-metadata.util';\r\nimport { isFunction } from '../../utils/shared.utils';\r\nimport { validateEach } from '../../utils/validate-each.util';\r\n\r\n/**\r\n * Decorator that binds guards to the scope of the controller or method,\r\n * depending on its context.\r\n *\r\n * When `@UseGuards` is used at the controller level, the guard will be\r\n * applied to every handler (method) in the controller.\r\n *\r\n * When `@UseGuards` is used at the individual handler level, the guard\r\n * will apply only to that specific method.\r\n *\r\n * @param guards a single guard instance or class, or a list of guard instances\r\n * or classes.\r\n *\r\n * @see [Guards](https://docs.nestjs.com/guards)\r\n *\r\n * @usageNotes\r\n * Guards can also be set up globally for all controllers and routes\r\n * using `app.useGlobalGuards()`.  [See here for details](https://docs.nestjs.com/guards#binding-guards)\r\n *\r\n * @publicApi\r\n */\r\nexport function UseGuards(\r\n  ...guards: (CanActivate | Function)[]\r\n): MethodDecorator & ClassDecorator {\r\n  return (\r\n    target: any,\r\n    key?: string | symbol,\r\n    descriptor?: TypedPropertyDescriptor<any>,\r\n  ) => {\r\n    const isGuardValid = <T extends Function | Record<string, any>>(guard: T) =>\r\n      guard &&\r\n      (isFunction(guard) ||\r\n        isFunction((guard as Record<string, any>).canActivate));\r\n\r\n    if (descriptor) {\r\n      validateEach(\r\n        target.constructor,\r\n        guards,\r\n        isGuardValid,\r\n        '@UseGuards',\r\n        'guard',\r\n      );\r\n      extendArrayMetadata(GUARDS_METADATA, guards, descriptor.value);\r\n      return descriptor;\r\n    }\r\n    validateEach(target, guards, isGuardValid, '@UseGuards', 'guard');\r\n    extendArrayMetadata(GUARDS_METADATA, guards, target);\r\n    return target;\r\n  };\r\n}\r\n"]}