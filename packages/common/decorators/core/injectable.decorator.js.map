{"version":3,"file":"injectable.decorator.js","sourceRoot":"","sources":["injectable.decorator.ts"],"names":[],"mappings":";;;AAAA,6BAA0B;AAC1B,+CAA+E;AAa/E;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2BG;AACH,SAAgB,UAAU,CAAC,OAA2B;IACpD,OAAO,CAAC,MAAc,EAAE,EAAE;QACxB,OAAO,CAAC,cAAc,CAAC,gCAAoB,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;QAC3D,OAAO,CAAC,cAAc,CAAC,kCAAsB,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;IAClE,CAAC,CAAC;AACJ,CAAC;AALD,gCAKC;AAED;;GAEG;AACH,SAAgB,KAAK,CAAI,UAAmB;IAC1C,MAAM,CAAC,cAAc,CAAC,UAAU,EAAE,MAAM,EAAE;QACxC,KAAK,EAAE,IAAA,SAAG,EAAC,EAAE,CAAC;KACf,CAAC,CAAC;IACH,UAAU,EAAE,CAAC,UAAU,CAAC,CAAC;IACzB,OAAO,UAAU,CAAC;AACpB,CAAC;AAND,sBAMC","sourcesContent":["import { uid } from 'uid';\r\nimport { INJECTABLE_WATERMARK, SCOPE_OPTIONS_METADATA } from '../../constants';\r\nimport { ScopeOptions } from '../../interfaces/scope-options.interface';\r\nimport { Type } from '../../interfaces/type.interface';\r\n\r\n/**\r\n * Defines the injection scope.\r\n *\r\n * @see [Injection Scopes](https://docs.nestjs.com/fundamentals/injection-scopes)\r\n *\r\n * @publicApi\r\n */\r\nexport type InjectableOptions = ScopeOptions;\r\n\r\n/**\r\n * Decorator that marks a class as a [provider](https://docs.nestjs.com/providers).\r\n * Providers can be injected into other classes via constructor parameter injection\r\n * using Nest's built-in [Dependency Injection (DI)](https://docs.nestjs.com/providers#dependency-injection)\r\n * system.\r\n *\r\n * When injecting a provider, it must be visible within the module scope (loosely\r\n * speaking, the containing module) of the class it is being injected into. This\r\n * can be done by:\r\n *\r\n * - defining the provider in the same module scope\r\n * - exporting the provider from one module scope and importing that module into the\r\n *   module scope of the class being injected into\r\n * - exporting the provider from a module that is marked as global using the\r\n *   `@Global()` decorator\r\n *\r\n * Providers can also be defined in a more explicit and imperative form using\r\n * various [custom provider](https://docs.nestjs.com/fundamentals/custom-providers) techniques that expose\r\n * more capabilities of the DI system.\r\n *\r\n * @param options options specifying scope of injectable\r\n *\r\n * @see [Providers](https://docs.nestjs.com/providers)\r\n * @see [Custom Providers](https://docs.nestjs.com/fundamentals/custom-providers)\r\n * @see [Injection Scopes](https://docs.nestjs.com/fundamentals/injection-scopes)\r\n *\r\n * @publicApi\r\n */\r\nexport function Injectable(options?: InjectableOptions): ClassDecorator {\r\n  return (target: object) => {\r\n    Reflect.defineMetadata(INJECTABLE_WATERMARK, true, target);\r\n    Reflect.defineMetadata(SCOPE_OPTIONS_METADATA, options, target);\r\n  };\r\n}\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport function mixin<T>(mixinClass: Type<T>) {\r\n  Object.defineProperty(mixinClass, 'name', {\r\n    value: uid(21),\r\n  });\r\n  Injectable()(mixinClass);\r\n  return mixinClass;\r\n}\r\n"]}