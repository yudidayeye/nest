{"version":3,"file":"inject.decorator.js","sourceRoot":"","sources":["inject.decorator.ts"],"names":[],"mappings":";;;AAAA,+CAGyB;AACzB,2DAAuD;AAEvD;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BG;AACH,SAAgB,MAAM,CACpB,KAAS;IAET,OAAO,CAAC,MAAc,EAAE,GAAgC,EAAE,KAAc,EAAE,EAAE;QAC1E,MAAM,IAAI,GAAG,KAAK,IAAI,OAAO,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;QAEtE,IAAI,CAAC,IAAA,0BAAW,EAAC,KAAK,CAAC,EAAE;YACvB,IAAI,YAAY,GACd,OAAO,CAAC,WAAW,CAAC,uCAA2B,EAAE,MAAM,CAAC,IAAI,EAAE,CAAC;YAEjE,YAAY,GAAG,CAAC,GAAG,YAAY,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;YACzD,OAAO,CAAC,cAAc,CAAC,uCAA2B,EAAE,YAAY,EAAE,MAAM,CAAC,CAAC;YAC1E,OAAO;SACR;QACD,IAAI,UAAU,GACZ,OAAO,CAAC,WAAW,CAAC,kCAAsB,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;QAExE,UAAU,GAAG,CAAC,GAAG,UAAU,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;QAC5C,OAAO,CAAC,cAAc,CACpB,kCAAsB,EACtB,UAAU,EACV,MAAM,CAAC,WAAW,CACnB,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC;AAxBD,wBAwBC","sourcesContent":["import {\r\n  PROPERTY_DEPS_METADATA,\r\n  SELF_DECLARED_DEPS_METADATA,\r\n} from '../../constants';\r\nimport { isUndefined } from '../../utils/shared.utils';\r\n\r\n/**\r\n * Decorator that marks a constructor parameter as a target for\r\n * [Dependency Injection (DI)](https://docs.nestjs.com/providers#dependency-injection).\r\n *\r\n * Any injected provider must be visible within the module scope (loosely\r\n * speaking, the containing module) of the class it is being injected into. This\r\n * can be done by:\r\n *\r\n * - defining the provider in the same module scope\r\n * - exporting the provider from one module scope and importing that module into the\r\n *   module scope of the class being injected into\r\n * - exporting the provider from a module that is marked as global using the\r\n *   `@Global()` decorator\r\n *\r\n * #### Injection tokens\r\n * Can be *types* (class names), *strings* or *symbols*. This depends on how the\r\n * provider with which it is associated was defined. Providers defined with the\r\n * `@Injectable()` decorator use the class name. Custom Providers may use strings\r\n * or symbols as the injection token.\r\n *\r\n * @param token lookup key for the provider to be injected (assigned to the constructor\r\n * parameter).\r\n *\r\n * @see [Providers](https://docs.nestjs.com/providers)\r\n * @see [Custom Providers](https://docs.nestjs.com/fundamentals/custom-providers)\r\n * @see [Injection Scopes](https://docs.nestjs.com/fundamentals/injection-scopes)\r\n *\r\n * @publicApi\r\n */\r\nexport function Inject<T = any>(\r\n  token?: T,\r\n): PropertyDecorator & ParameterDecorator {\r\n  return (target: object, key: string | symbol | undefined, index?: number) => {\r\n    const type = token || Reflect.getMetadata('design:type', target, key);\r\n\r\n    if (!isUndefined(index)) {\r\n      let dependencies =\r\n        Reflect.getMetadata(SELF_DECLARED_DEPS_METADATA, target) || [];\r\n\r\n      dependencies = [...dependencies, { index, param: type }];\r\n      Reflect.defineMetadata(SELF_DECLARED_DEPS_METADATA, dependencies, target);\r\n      return;\r\n    }\r\n    let properties =\r\n      Reflect.getMetadata(PROPERTY_DEPS_METADATA, target.constructor) || [];\r\n\r\n    properties = [...properties, { key, type }];\r\n    Reflect.defineMetadata(\r\n      PROPERTY_DEPS_METADATA,\r\n      properties,\r\n      target.constructor,\r\n    );\r\n  };\r\n}\r\n"]}