{"version":3,"file":"exception-filters.decorator.js","sourceRoot":"","sources":["exception-filters.decorator.ts"],"names":[],"mappings":";;;AAAA,4DAA4D;AAC5D,+CAA6D;AAE7D,2EAAuE;AACvE,2DAAsD;AACtD,uEAA8D;AAE9D;;;;;;;;;;;;;;;;;;;;GAoBG;AAEI,MAAM,UAAU,GAAG,CAAC,GAAG,OAAuC,EAAE,EAAE,CACvE,2BAA2B,CAAC,GAAG,OAAO,CAAC,CAAC;AAD7B,QAAA,UAAU,cACmB;AAE1C,SAAS,2BAA2B,CAClC,GAAG,OAAuC;IAE1C,OAAO,CACL,MAAW,EACX,GAAqB,EACrB,UAAyC,EACzC,EAAE;QACF,MAAM,aAAa,GAAG,CACpB,MAAS,EACT,EAAE,CACF,MAAM;YACN,CAAC,IAAA,yBAAU,EAAC,MAAM,CAAC,IAAI,IAAA,yBAAU,EAAE,MAA8B,CAAC,KAAK,CAAC,CAAC,CAAC;QAE5E,IAAI,UAAU,EAAE;YACd,IAAA,iCAAY,EACV,MAAM,CAAC,WAAW,EAClB,OAAO,EACP,aAAa,EACb,aAAa,EACb,QAAQ,CACT,CAAC;YACF,IAAA,0CAAmB,EACjB,sCAA0B,EAC1B,OAAO,EACP,UAAU,CAAC,KAAK,CACjB,CAAC;YACF,OAAO,UAAU,CAAC;SACnB;QACD,IAAA,iCAAY,EAAC,MAAM,EAAE,OAAO,EAAE,aAAa,EAAE,aAAa,EAAE,QAAQ,CAAC,CAAC;QACtE,IAAA,0CAAmB,EAAC,sCAA0B,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;QACjE,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC;AACJ,CAAC","sourcesContent":["/* eslint-disable @typescript-eslint/no-use-before-define */\r\nimport { EXCEPTION_FILTERS_METADATA } from '../../constants';\r\nimport { ExceptionFilter } from '../../index';\r\nimport { extendArrayMetadata } from '../../utils/extend-metadata.util';\r\nimport { isFunction } from '../../utils/shared.utils';\r\nimport { validateEach } from '../../utils/validate-each.util';\r\n\r\n/**\r\n * Decorator that binds exception filters to the scope of the controller or\r\n * method, depending on its context.\r\n *\r\n * When `@UseFilters` is used at the controller level, the filter will be\r\n * applied to every handler (method) in the controller.\r\n *\r\n * When `@UseFilters` is used at the individual handler level, the filter\r\n * will apply only to that specific method.\r\n *\r\n * @param filters exception filter instance or class, or a list of exception\r\n * filter instances or classes.\r\n *\r\n * @see [Exception filters](https://docs.nestjs.com/exception-filters)\r\n *\r\n * @usageNotes\r\n * Exception filters can also be set up globally for all controllers and routes\r\n * using `app.useGlobalFilters()`.  [See here for details](https://docs.nestjs.com/exception-filters#binding-filters)\r\n *\r\n * @publicApi\r\n */\r\n\r\nexport const UseFilters = (...filters: (ExceptionFilter | Function)[]) =>\r\n  addExceptionFiltersMetadata(...filters);\r\n\r\nfunction addExceptionFiltersMetadata(\r\n  ...filters: (Function | ExceptionFilter)[]\r\n): MethodDecorator & ClassDecorator {\r\n  return (\r\n    target: any,\r\n    key?: string | symbol,\r\n    descriptor?: TypedPropertyDescriptor<any>,\r\n  ) => {\r\n    const isFilterValid = <T extends Function | Record<string, any>>(\r\n      filter: T,\r\n    ) =>\r\n      filter &&\r\n      (isFunction(filter) || isFunction((filter as Record<string, any>).catch));\r\n\r\n    if (descriptor) {\r\n      validateEach(\r\n        target.constructor,\r\n        filters,\r\n        isFilterValid,\r\n        '@UseFilters',\r\n        'filter',\r\n      );\r\n      extendArrayMetadata(\r\n        EXCEPTION_FILTERS_METADATA,\r\n        filters,\r\n        descriptor.value,\r\n      );\r\n      return descriptor;\r\n    }\r\n    validateEach(target, filters, isFilterValid, '@UseFilters', 'filter');\r\n    extendArrayMetadata(EXCEPTION_FILTERS_METADATA, filters, target);\r\n    return target;\r\n  };\r\n}\r\n"]}