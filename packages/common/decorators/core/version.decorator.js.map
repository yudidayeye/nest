{"version":3,"file":"version.decorator.js","sourceRoot":"","sources":["version.decorator.ts"],"names":[],"mappings":";;;AAAA,+CAAmD;AAGnD;;;;GAIG;AACH,SAAgB,OAAO,CAAC,OAAqB;IAC3C,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;QAC1B,2BAA2B;QAC3B,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;KACxC;IAED,OAAO,CACL,MAAW,EACX,GAAoB,EACpB,UAAwC,EACxC,EAAE;QACF,OAAO,CAAC,cAAc,CAAC,4BAAgB,EAAE,OAAO,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC;QACpE,OAAO,UAAU,CAAC;IACpB,CAAC,CAAC;AACJ,CAAC;AAdD,0BAcC","sourcesContent":["import { VERSION_METADATA } from '../../constants';\r\nimport { VersionValue } from '../../interfaces/version-options.interface';\r\n\r\n/**\r\n * Sets the version of the endpoint to the passed version\r\n *\r\n * @publicApi\r\n */\r\nexport function Version(version: VersionValue): MethodDecorator {\r\n  if (Array.isArray(version)) {\r\n    // Drop duplicated versions\r\n    version = Array.from(new Set(version));\r\n  }\r\n\r\n  return (\r\n    target: any,\r\n    key: string | symbol,\r\n    descriptor: TypedPropertyDescriptor<any>,\r\n  ) => {\r\n    Reflect.defineMetadata(VERSION_METADATA, version, descriptor.value);\r\n    return descriptor;\r\n  };\r\n}\r\n"]}