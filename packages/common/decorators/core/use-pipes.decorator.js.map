{"version":3,"file":"use-pipes.decorator.js","sourceRoot":"","sources":["use-pipes.decorator.ts"],"names":[],"mappings":";;;AAAA,+CAAiD;AAEjD,2EAAuE;AACvE,2DAAsD;AACtD,uEAA8D;AAE9D;;;;;;;;;;;;;;;;;;;;GAoBG;AAEH,SAAgB,QAAQ,CACtB,GAAG,KAAmC;IAEtC,OAAO,CACL,MAAW,EACX,GAAqB,EACrB,UAAyC,EACzC,EAAE;QACF,MAAM,WAAW,GAAG,CAA2C,IAAO,EAAE,EAAE,CACxE,IAAI;YACJ,CAAC,IAAA,yBAAU,EAAC,IAAI,CAAC,IAAI,IAAA,yBAAU,EAAE,IAA4B,CAAC,SAAS,CAAC,CAAC,CAAC;QAE5E,IAAI,UAAU,EAAE;YACd,IAAA,0CAAmB,EAAC,0BAAc,EAAE,KAAK,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC;YAC7D,OAAO,UAAU,CAAC;SACnB;QACD,IAAA,iCAAY,EAAC,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,WAAW,EAAE,MAAM,CAAC,CAAC;QAC9D,IAAA,0CAAmB,EAAC,0BAAc,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;QACnD,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC;AACJ,CAAC;AApBD,4BAoBC","sourcesContent":["import { PIPES_METADATA } from '../../constants';\r\nimport { PipeTransform } from '../../interfaces/index';\r\nimport { extendArrayMetadata } from '../../utils/extend-metadata.util';\r\nimport { isFunction } from '../../utils/shared.utils';\r\nimport { validateEach } from '../../utils/validate-each.util';\r\n\r\n/**\r\n * Decorator that binds pipes to the scope of the controller or method,\r\n * depending on its context.\r\n *\r\n * When `@UsePipes` is used at the controller level, the pipe will be\r\n * applied to every handler (method) in the controller.\r\n *\r\n * When `@UsePipes` is used at the individual handler level, the pipe\r\n * will apply only to that specific method.\r\n *\r\n * @param pipes a single pipe instance or class, or a list of pipe instances or\r\n * classes.\r\n *\r\n * @see [Pipes](https://docs.nestjs.com/pipes)\r\n *\r\n * @usageNotes\r\n * Pipes can also be set up globally for all controllers and routes\r\n * using `app.useGlobalPipes()`.  [See here for details](https://docs.nestjs.com/pipes#class-validator)\r\n *\r\n * @publicApi\r\n */\r\n\r\nexport function UsePipes(\r\n  ...pipes: (PipeTransform | Function)[]\r\n): ClassDecorator & MethodDecorator {\r\n  return (\r\n    target: any,\r\n    key?: string | symbol,\r\n    descriptor?: TypedPropertyDescriptor<any>,\r\n  ) => {\r\n    const isPipeValid = <T extends Function | Record<string, any>>(pipe: T) =>\r\n      pipe &&\r\n      (isFunction(pipe) || isFunction((pipe as Record<string, any>).transform));\r\n\r\n    if (descriptor) {\r\n      extendArrayMetadata(PIPES_METADATA, pipes, descriptor.value);\r\n      return descriptor;\r\n    }\r\n    validateEach(target, pipes, isPipeValid, '@UsePipes', 'pipe');\r\n    extendArrayMetadata(PIPES_METADATA, pipes, target);\r\n    return target;\r\n  };\r\n}\r\n"]}