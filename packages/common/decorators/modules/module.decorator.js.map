{"version":3,"file":"module.decorator.js","sourceRoot":"","sources":["module.decorator.ts"],"names":[],"mappings":";;;AACA,qFAA2E;AAE3E;;;;;;;;;;;;;GAaG;AACH,SAAgB,MAAM,CAAC,QAAwB;IAC7C,MAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACxC,IAAA,8CAAkB,EAAC,SAAS,CAAC,CAAC;IAE9B,OAAO,CAAC,MAAgB,EAAE,EAAE;QAC1B,KAAK,MAAM,QAAQ,IAAI,QAAQ,EAAE;YAC/B,IAAI,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;gBACrC,OAAO,CAAC,cAAc,CAAC,QAAQ,EAAG,QAAgB,CAAC,QAAQ,CAAC,EAAE,MAAM,CAAC,CAAC;aACvE;SACF;IACH,CAAC,CAAC;AACJ,CAAC;AAXD,wBAWC","sourcesContent":["import { ModuleMetadata } from '../../interfaces/modules/module-metadata.interface';\r\nimport { validateModuleKeys } from '../../utils/validate-module-keys.util';\r\n\r\n/**\r\n * Decorator that marks a class as a [module](https://docs.nestjs.com/modules).\r\n *\r\n * Modules are used by Nest to organize the application structure into scopes. Controllers\r\n * and Providers are scoped by the module they are declared in. Modules and their\r\n * classes (Controllers and Providers) form a graph that determines how Nest\r\n * performs [Dependency Injection (DI)](https://docs.nestjs.com/providers#dependency-injection).\r\n *\r\n * @param metadata module configuration metadata\r\n *\r\n * @see [Modules](https://docs.nestjs.com/modules)\r\n *\r\n * @publicApi\r\n */\r\nexport function Module(metadata: ModuleMetadata): ClassDecorator {\r\n  const propsKeys = Object.keys(metadata);\r\n  validateModuleKeys(propsKeys);\r\n\r\n  return (target: Function) => {\r\n    for (const property in metadata) {\r\n      if (metadata.hasOwnProperty(property)) {\r\n        Reflect.defineMetadata(property, (metadata as any)[property], target);\r\n      }\r\n    }\r\n  };\r\n}\r\n"]}