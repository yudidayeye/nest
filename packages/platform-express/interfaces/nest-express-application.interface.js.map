{"version":3,"file":"nest-express-application.interface.js","sourceRoot":"","sources":["nest-express-application.interface.ts"],"names":[],"mappings":"","sourcesContent":["import { INestApplication, HttpServer } from '@nestjs/common';\r\nimport type { Server as CoreHttpServer } from 'http';\r\nimport type { Server as CoreHttpsServer } from 'https';\r\nimport type { Express } from 'express';\r\nimport { NestExpressBodyParserOptions } from './nest-express-body-parser-options.interface';\r\nimport { NestExpressBodyParserType } from './nest-express-body-parser.interface';\r\nimport { ServeStaticOptions } from './serve-static-options.interface';\r\n\r\n/**\r\n * Interface describing methods on NestExpressApplication.\r\n *\r\n * @see [Platform](https://docs.nestjs.com/first-steps#platform)\r\n *\r\n * @publicApi\r\n */\r\nexport interface NestExpressApplication<\r\n  TServer extends CoreHttpServer | CoreHttpsServer = CoreHttpServer,\r\n> extends INestApplication<TServer> {\r\n  /**\r\n   * Returns the underlying HTTP adapter bounded to the Express.js app.\r\n   *\r\n   * @returns {HttpServer}\r\n   */\r\n  getHttpAdapter(): HttpServer<Express.Request, Express.Response, Express>;\r\n\r\n  /**\r\n   * Starts the application.\r\n   *\r\n   * @param {number|string} port\r\n   * @param {string} [hostname]\r\n   * @param {Function} [callback] Optional callback\r\n   * @returns {Promise} A Promise that, when resolved, is a reference to the underlying HttpServer.\r\n   */\r\n  listen(port: number | string, callback?: () => void): Promise<TServer>;\r\n  listen(\r\n    port: number | string,\r\n    hostname: string,\r\n    callback?: () => void,\r\n  ): Promise<TServer>;\r\n\r\n  /**\r\n   * A wrapper function around native `express.set()` method.\r\n   *\r\n   * @example\r\n   * app.set('trust proxy', 'loopback')\r\n   *\r\n   * @returns {this}\r\n   */\r\n  set(...args: any[]): this;\r\n\r\n  /**\r\n   * A wrapper function around native `express.engine()` method.\r\n   * @example\r\n   * app.engine('mustache', mustacheExpress())\r\n   *\r\n   * @returns {this}\r\n   */\r\n  engine(...args: any[]): this;\r\n\r\n  /**\r\n   * A wrapper function around native `express.enable()` method.\r\n   * @example\r\n   * app.enable('x-powered-by')\r\n   *\r\n   * @returns {this}\r\n   */\r\n  enable(...args: any[]): this;\r\n\r\n  /**\r\n   * A wrapper function around native `express.disable()` method.\r\n   *\r\n   * @example\r\n   * app.disable('x-powered-by')\r\n   *\r\n   * @returns {this}\r\n   */\r\n  disable(...args: any[]): this;\r\n\r\n  useStaticAssets(options: ServeStaticOptions): this;\r\n  /**\r\n   * Sets a base directory for public assets.\r\n   * @example\r\n   * app.useStaticAssets('public')\r\n   *\r\n   * @returns {this}\r\n   */\r\n  useStaticAssets(path: string, options?: ServeStaticOptions): this;\r\n\r\n  /**\r\n   * Register Express body parsers on the fly. Will respect\r\n   * the application's `rawBody` option.\r\n   *\r\n   * @example\r\n   * const app = await NestFactory.create<NestExpressApplication>(\r\n   *   AppModule,\r\n   *   { rawBody: true }\r\n   * );\r\n   * app.useBodyParser('json', { limit: '50mb' });\r\n   *\r\n   * @returns {this}\r\n   */\r\n  useBodyParser<Options = NestExpressBodyParserOptions>(\r\n    parser: NestExpressBodyParserType,\r\n    options?: Omit<Options, 'verify'>,\r\n  ): this;\r\n\r\n  /**\r\n   * Sets one or multiple base directories for templates (views).\r\n   *\r\n   * @example\r\n   * app.setBaseViewsDir('views')\r\n   *\r\n   * @returns {this}\r\n   */\r\n  setBaseViewsDir(path: string | string[]): this;\r\n\r\n  /**\r\n   * Sets a view engine for templates (views).\r\n   * @example\r\n   * app.setViewEngine('pug')\r\n   *\r\n   * @returns {this}\r\n   */\r\n  setViewEngine(engine: string): this;\r\n\r\n  /**\r\n   * Sets app-level globals for view templates.\r\n   *\r\n   * @example\r\n   * app.setLocal('title', 'My Site')\r\n   *\r\n   * @see https://expressjs.com/en/4x/api.html#app.locals\r\n   *\r\n   * @returns {this}\r\n   */\r\n  setLocal(key: string, value: any): this;\r\n}\r\n"]}