{"version":3,"file":"nest-express-body-parser-options.interface.js","sourceRoot":"","sources":["nest-express-body-parser-options.interface.ts"],"names":[],"mappings":"","sourcesContent":["import type { IncomingMessage } from 'http';\r\n\r\n/**\r\n * Type alias to keep compatibility with @types/body-parser\r\n * @see https://github.com/DefinitelyTyped/DefinitelyTyped/blob/dcd1673c4fa18a15ea8cd8ff8af7d563bb6dc8e6/types/body-parser/index.d.ts#L48-L66#L48-L66\r\n * @publicApi\r\n */\r\nexport interface NestExpressBodyParserOptions {\r\n  /** When set to true, then deflated (compressed) bodies will be inflated; when false, deflated bodies are rejected. Defaults to true. */\r\n  inflate?: boolean | undefined;\r\n\r\n  /**\r\n   * Controls the maximum request body size. If this is a number,\r\n   * then the value specifies the number of bytes; if it is a string,\r\n   * the value is passed to the bytes library for parsing. Defaults to '100kb'.\r\n   */\r\n  limit?: number | string | undefined;\r\n\r\n  /**\r\n   * The type option is used to determine what media type the middleware will parse\r\n   */\r\n  type?: string | string[] | ((req: IncomingMessage) => any) | undefined;\r\n\r\n  // Catch-all for body-parser type specific options\r\n  [key: string]: unknown;\r\n}\r\n"]}