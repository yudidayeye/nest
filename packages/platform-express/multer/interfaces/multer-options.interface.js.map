{"version":3,"file":"multer-options.interface.js","sourceRoot":"","sources":["multer-options.interface.ts"],"names":[],"mappings":"","sourcesContent":["/**\r\n * @see https://github.com/expressjs/multer\r\n * \r\n * @publicApi\r\n */\r\nexport interface MulterOptions {\r\n  dest?: string;\r\n  /** The storage engine to use for uploaded files. */\r\n  storage?: any;\r\n  /**\r\n   * An object specifying the size limits of the following optional properties. This object is passed to busboy\r\n   * directly, and the details of properties can be found on https://github.com/mscdex/busboy#busboy-methods\r\n   */\r\n  limits?: {\r\n    /** Max field name size (Default: 100 bytes) */\r\n    fieldNameSize?: number;\r\n    /** Max field value size (Default: 1MB) */\r\n    fieldSize?: number;\r\n    /** Max number of non- file fields (Default: Infinity) */\r\n    fields?: number;\r\n    /** For multipart forms, the max file size (in bytes)(Default: Infinity) */\r\n    fileSize?: number;\r\n    /** For multipart forms, the max number of file fields (Default: Infinity) */\r\n    files?: number;\r\n    /** For multipart forms, the max number of parts (fields + files)(Default: Infinity) */\r\n    parts?: number;\r\n    /** For multipart forms, the max number of header key=> value pairs to parse Default: 2000(same as node's http). */\r\n    headerPairs?: number;\r\n  };\r\n\r\n  /** Keep the full path of files instead of just the base name (Default: false) */\r\n  preservePath?: boolean;\r\n\r\n  fileFilter?(\r\n    req: any,\r\n    file: {\r\n      /** Field name specified in the form */\r\n      fieldname: string;\r\n      /** Name of the file on the user's computer */\r\n      originalname: string;\r\n      /** Encoding type of the file */\r\n      encoding: string;\r\n      /** Mime type of the file */\r\n      mimetype: string;\r\n      /** Size of the file in bytes */\r\n      size: number;\r\n      /** The folder to which the file has been saved (DiskStorage) */\r\n      destination: string;\r\n      /** The name of the file within the destination (DiskStorage) */\r\n      filename: string;\r\n      /** Location of the uploaded file (DiskStorage) */\r\n      path: string;\r\n      /** A Buffer of the entire file (MemoryStorage) */\r\n      buffer: Buffer;\r\n    },\r\n    callback: (error: Error | null, acceptFile: boolean) => void,\r\n  ): void;\r\n}\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport interface MulterField {\r\n  /** The field name. */\r\n  name: string;\r\n  /** Optional maximum number of files per field to accept. */\r\n  maxCount?: number;\r\n}\r\n"]}