{"version":3,"file":"file.interceptor.js","sourceRoot":"","sources":["file.interceptor.ts"],"names":[],"mappings":";;;;AAAA,2CAQwB;AACxB,iCAAiC;AAEjC,wDAA2D;AAG3D,yDAA4D;AAI5D;;;;;GAKG;AACH,SAAgB,eAAe,CAC7B,SAAiB,EACjB,YAA4B;IAE5B,IAAM,gBAAgB,GAAtB,MAAM,gBAAgB;QAGpB,YAGE,UAA+B,EAAE;YAEjC,IAAI,CAAC,MAAM,GAAI,MAAc,CAAC;gBAC5B,GAAG,OAAO;gBACV,GAAG,YAAY;aAChB,CAAC,CAAC;QACL,CAAC;QAED,KAAK,CAAC,SAAS,CACb,OAAyB,EACzB,IAAiB;YAEjB,MAAM,GAAG,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC;YAEnC,MAAM,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE,CAC1C,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAC3B,GAAG,CAAC,UAAU,EAAE,EAChB,GAAG,CAAC,WAAW,EAAE,EACjB,CAAC,GAAQ,EAAE,EAAE;gBACX,IAAI,GAAG,EAAE;oBACP,MAAM,KAAK,GAAG,IAAA,iCAAkB,EAAC,GAAG,CAAC,CAAC;oBACtC,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC;iBACtB;gBACD,OAAO,EAAE,CAAC;YACZ,CAAC,CACF,CACF,CAAC;YACF,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC;QACvB,CAAC;KACF,CAAA;IAnCK,gBAAgB;QAIjB,mBAAA,IAAA,iBAAQ,GAAE,CAAA;QACV,mBAAA,IAAA,eAAM,EAAC,uCAAqB,CAAC,CAAA;;OAL5B,gBAAgB,CAmCrB;IACD,MAAM,WAAW,GAAG,IAAA,cAAK,EAAC,gBAAgB,CAAC,CAAC;IAC5C,OAAO,WAAW,CAAC;AACrB,CAAC;AA1CD,0CA0CC","sourcesContent":["import {\r\n  CallHandler,\r\n  ExecutionContext,\r\n  Inject,\r\n  mixin,\r\n  NestInterceptor,\r\n  Optional,\r\n  Type,\r\n} from '@nestjs/common';\r\nimport * as multer from 'multer';\r\nimport { Observable } from 'rxjs';\r\nimport { MULTER_MODULE_OPTIONS } from '../files.constants';\r\nimport { MulterModuleOptions } from '../interfaces';\r\nimport { MulterOptions } from '../interfaces/multer-options.interface';\r\nimport { transformException } from '../multer/multer.utils';\r\n\r\ntype MulterInstance = any;\r\n\r\n/**\r\n * @param fieldName \r\n * @param localOptions \r\n * \r\n * @publicApi\r\n */\r\nexport function FileInterceptor(\r\n  fieldName: string,\r\n  localOptions?: MulterOptions,\r\n): Type<NestInterceptor> {\r\n  class MixinInterceptor implements NestInterceptor {\r\n    protected multer: MulterInstance;\r\n\r\n    constructor(\r\n      @Optional()\r\n      @Inject(MULTER_MODULE_OPTIONS)\r\n      options: MulterModuleOptions = {},\r\n    ) {\r\n      this.multer = (multer as any)({\r\n        ...options,\r\n        ...localOptions,\r\n      });\r\n    }\r\n\r\n    async intercept(\r\n      context: ExecutionContext,\r\n      next: CallHandler,\r\n    ): Promise<Observable<any>> {\r\n      const ctx = context.switchToHttp();\r\n\r\n      await new Promise<void>((resolve, reject) =>\r\n        this.multer.single(fieldName)(\r\n          ctx.getRequest(),\r\n          ctx.getResponse(),\r\n          (err: any) => {\r\n            if (err) {\r\n              const error = transformException(err);\r\n              return reject(error);\r\n            }\r\n            resolve();\r\n          },\r\n        ),\r\n      );\r\n      return next.handle();\r\n    }\r\n  }\r\n  const Interceptor = mixin(MixinInterceptor);\r\n  return Interceptor;\r\n}\r\n"]}