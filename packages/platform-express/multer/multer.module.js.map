{"version":3,"file":"multer.module.js","sourceRoot":"","sources":["multer.module.ts"],"names":[],"mappings":";;;;;AAAA,2CAAiE;AACjE,oGAA0F;AAC1F,uDAA0D;AAM1D,yDAAsD;AAEtD;;GAEG;AAEI,IAAM,YAAY,2CAAlB,MAAM,YAAY;IACvB,MAAM,CAAC,QAAQ,CAAC,UAA+B,EAAE;QAC/C,OAAO;YACL,MAAM,EAAE,cAAY;YACpB,SAAS,EAAE;gBACT,EAAE,OAAO,EAAE,uCAAqB,EAAE,QAAQ,EAAE,OAAO,EAAE;gBACrD;oBACE,OAAO,EAAE,mCAAgB;oBACzB,QAAQ,EAAE,IAAA,oDAAqB,GAAE;iBAClC;aACF;YACD,OAAO,EAAE,CAAC,uCAAqB,CAAC;SACjC,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,aAAa,CAAC,OAAiC;QACpD,OAAO;YACL,MAAM,EAAE,cAAY;YACpB,OAAO,EAAE,OAAO,CAAC,OAAO;YACxB,SAAS,EAAE;gBACT,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC;gBACrC;oBACE,OAAO,EAAE,mCAAgB;oBACzB,QAAQ,EAAE,IAAA,oDAAqB,GAAE;iBAClC;aACF;YACD,OAAO,EAAE,CAAC,uCAAqB,CAAC;SACjC,CAAC;IACJ,CAAC;IAEO,MAAM,CAAC,oBAAoB,CACjC,OAAiC;QAEjC,IAAI,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,UAAU,EAAE;YAC7C,OAAO,CAAC,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC,CAAC;SACnD;QACD,OAAO;YACL,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC;YACxC;gBACE,OAAO,EAAE,OAAO,CAAC,QAAQ;gBACzB,QAAQ,EAAE,OAAO,CAAC,QAAQ;aAC3B;SACF,CAAC;IACJ,CAAC;IAEO,MAAM,CAAC,0BAA0B,CACvC,OAAiC;QAEjC,IAAI,OAAO,CAAC,UAAU,EAAE;YACtB,OAAO;gBACL,OAAO,EAAE,uCAAqB;gBAC9B,UAAU,EAAE,OAAO,CAAC,UAAU;gBAC9B,MAAM,EAAE,OAAO,CAAC,MAAM,IAAI,EAAE;aAC7B,CAAC;SACH;QACD,OAAO;YACL,OAAO,EAAE,uCAAqB;YAC9B,UAAU,EAAE,KAAK,EAAE,cAAoC,EAAE,EAAE,CACzD,cAAc,CAAC,mBAAmB,EAAE;YACtC,MAAM,EAAE,CAAC,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,QAAQ,CAAC;SAClD,CAAC;IACJ,CAAC;CACF,CAAA;uBA9DY,YAAY;IADxB,IAAA,eAAM,EAAC,EAAE,CAAC;GACE,YAAY,CA8DxB","sourcesContent":["import { DynamicModule, Module, Provider } from '@nestjs/common';\r\nimport { randomStringGenerator } from '@nestjs/common/utils/random-string-generator.util';\r\nimport { MULTER_MODULE_OPTIONS } from './files.constants';\r\nimport {\r\n  MulterModuleAsyncOptions,\r\n  MulterModuleOptions,\r\n  MulterOptionsFactory,\r\n} from './interfaces/files-upload-module.interface';\r\nimport { MULTER_MODULE_ID } from './multer.constants';\r\n\r\n/**\r\n * @publicApi\r\n */\r\n@Module({})\r\nexport class MulterModule {\r\n  static register(options: MulterModuleOptions = {}): DynamicModule {\r\n    return {\r\n      module: MulterModule,\r\n      providers: [\r\n        { provide: MULTER_MODULE_OPTIONS, useValue: options },\r\n        {\r\n          provide: MULTER_MODULE_ID,\r\n          useValue: randomStringGenerator(),\r\n        },\r\n      ],\r\n      exports: [MULTER_MODULE_OPTIONS],\r\n    };\r\n  }\r\n\r\n  static registerAsync(options: MulterModuleAsyncOptions): DynamicModule {\r\n    return {\r\n      module: MulterModule,\r\n      imports: options.imports,\r\n      providers: [\r\n        ...this.createAsyncProviders(options),\r\n        {\r\n          provide: MULTER_MODULE_ID,\r\n          useValue: randomStringGenerator(),\r\n        },\r\n      ],\r\n      exports: [MULTER_MODULE_OPTIONS],\r\n    };\r\n  }\r\n\r\n  private static createAsyncProviders(\r\n    options: MulterModuleAsyncOptions,\r\n  ): Provider[] {\r\n    if (options.useExisting || options.useFactory) {\r\n      return [this.createAsyncOptionsProvider(options)];\r\n    }\r\n    return [\r\n      this.createAsyncOptionsProvider(options),\r\n      {\r\n        provide: options.useClass,\r\n        useClass: options.useClass,\r\n      },\r\n    ];\r\n  }\r\n\r\n  private static createAsyncOptionsProvider(\r\n    options: MulterModuleAsyncOptions,\r\n  ): Provider {\r\n    if (options.useFactory) {\r\n      return {\r\n        provide: MULTER_MODULE_OPTIONS,\r\n        useFactory: options.useFactory,\r\n        inject: options.inject || [],\r\n      };\r\n    }\r\n    return {\r\n      provide: MULTER_MODULE_OPTIONS,\r\n      useFactory: async (optionsFactory: MulterOptionsFactory) =>\r\n        optionsFactory.createMulterOptions(),\r\n      inject: [options.useExisting || options.useClass],\r\n    };\r\n  }\r\n}\r\n"]}