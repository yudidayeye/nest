{"version":3,"file":"express-adapter.js","sourceRoot":"","sources":["express-adapter.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Server } from 'http';\r\nimport {\r\n  HttpStatus,\r\n  InternalServerErrorException,\r\n  Logger,\r\n  RequestMethod,\r\n  StreamableFile,\r\n  VersioningOptions,\r\n  VersioningType,\r\n  VERSION_NEUTRAL,\r\n} from '@nestjs/common';\r\nimport { VersionValue } from '@nestjs/common/interfaces';\r\nimport {\r\n  CorsOptions,\r\n  CorsOptionsDelegate,\r\n} from '@nestjs/common/interfaces/external/cors-options.interface';\r\nimport { NestApplicationOptions } from '@nestjs/common/interfaces/nest-application-options.interface';\r\nimport {\r\n  isFunction,\r\n  isNil,\r\n  isObject,\r\n  isString,\r\n  isUndefined,\r\n} from '@nestjs/common/utils/shared.utils';\r\nimport { AbstractHttpAdapter } from '@nestjs/core/adapters/http-adapter';\r\nimport { RouterMethodFactory } from '@nestjs/core/helpers/router-method-factory';\r\nimport {\r\n  json as bodyParserJson,\r\n  urlencoded as bodyParserUrlencoded,\r\n} from 'body-parser';\r\nimport * as bodyparser from 'body-parser';\r\nimport * as cors from 'cors';\r\nimport * as express from 'express';\r\nimport * as http from 'http';\r\nimport * as https from 'https';\r\nimport { Duplex, pipeline } from 'stream';\r\nimport { NestExpressBodyParserOptions } from '../interfaces/nest-express-body-parser-options.interface';\r\nimport { NestExpressBodyParserType } from '../interfaces/nest-express-body-parser.interface';\r\nimport { ServeStaticOptions } from '../interfaces/serve-static-options.interface';\r\nimport { getBodyParserOptions } from './utils/get-body-parser-options.util';\r\n\r\ntype VersionedRoute = <\r\n  TRequest extends Record<string, any> = any,\r\n  TResponse = any,\r\n>(\r\n  req: TRequest,\r\n  res: TResponse,\r\n  next: () => void,\r\n) => any;\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport class ExpressAdapter extends AbstractHttpAdapter<\r\n  http.Server | https.Server\r\n> {\r\n  private readonly routerMethodFactory = new RouterMethodFactory();\r\n  private readonly logger = new Logger(ExpressAdapter.name);\r\n  private readonly openConnections = new Set<Duplex>();\r\n\r\n  constructor(instance?: any) {\r\n    super(instance || express());\r\n  }\r\n\r\n  public reply(response: any, body: any, statusCode?: number) {\r\n    if (statusCode) {\r\n      response.status(statusCode);\r\n    }\r\n    if (isNil(body)) {\r\n      return response.send();\r\n    }\r\n    if (body instanceof StreamableFile) {\r\n      const streamHeaders = body.getHeaders();\r\n      if (\r\n        response.getHeader('Content-Type') === undefined &&\r\n        streamHeaders.type !== undefined\r\n      ) {\r\n        response.setHeader('Content-Type', streamHeaders.type);\r\n      }\r\n      if (\r\n        response.getHeader('Content-Disposition') === undefined &&\r\n        streamHeaders.disposition !== undefined\r\n      ) {\r\n        response.setHeader('Content-Disposition', streamHeaders.disposition);\r\n      }\r\n      if (\r\n        response.getHeader('Content-Length') === undefined &&\r\n        streamHeaders.length !== undefined\r\n      ) {\r\n        response.setHeader('Content-Length', streamHeaders.length);\r\n      }\r\n      return pipeline(\r\n        body.getStream().once('error', (err: Error) => {\r\n          body.errorHandler(err, response);\r\n        }),\r\n        response,\r\n        (err: Error) => {\r\n          if (err) {\r\n            this.logger.error(err.message, err.stack);\r\n          }\r\n        },\r\n      );\r\n    }\r\n    if (\r\n      response.getHeader('Content-Type') !== undefined &&\r\n      !response.getHeader('Content-Type').startsWith('application/json') &&\r\n      body?.statusCode >= HttpStatus.BAD_REQUEST\r\n    ) {\r\n      this.logger.warn(\r\n        \"Content-Type doesn't match Reply body, you might need a custom ExceptionFilter for non-JSON responses\",\r\n      );\r\n      response.setHeader('Content-Type', 'application/json');\r\n    }\r\n    return isObject(body) ? response.json(body) : response.send(String(body));\r\n  }\r\n\r\n  public status(response: any, statusCode: number) {\r\n    return response.status(statusCode);\r\n  }\r\n\r\n  public end(response: any, message?: string) {\r\n    return response.end(message);\r\n  }\r\n\r\n  public render(response: any, view: string, options: any) {\r\n    return response.render(view, options);\r\n  }\r\n\r\n  public redirect(response: any, statusCode: number, url: string) {\r\n    return response.redirect(statusCode, url);\r\n  }\r\n\r\n  public setErrorHandler(handler: Function, prefix?: string) {\r\n    return this.use(handler);\r\n  }\r\n\r\n  public setNotFoundHandler(handler: Function, prefix?: string) {\r\n    return this.use(handler);\r\n  }\r\n\r\n  public isHeadersSent(response: any): boolean {\r\n    return response.headersSent;\r\n  }\r\n\r\n  public setHeader(response: any, name: string, value: string) {\r\n    return response.set(name, value);\r\n  }\r\n\r\n  public listen(port: string | number, callback?: () => void): Server;\r\n  public listen(\r\n    port: string | number,\r\n    hostname: string,\r\n    callback?: () => void,\r\n  ): Server;\r\n  public listen(port: any, ...args: any[]): Server {\r\n    return this.httpServer.listen(port, ...args);\r\n  }\r\n\r\n  public close() {\r\n    this.closeOpenConnections();\r\n\r\n    if (!this.httpServer) {\r\n      return undefined;\r\n    }\r\n    return new Promise(resolve => this.httpServer.close(resolve));\r\n  }\r\n\r\n  public set(...args: any[]) {\r\n    return this.instance.set(...args);\r\n  }\r\n\r\n  public enable(...args: any[]) {\r\n    return this.instance.enable(...args);\r\n  }\r\n\r\n  public disable(...args: any[]) {\r\n    return this.instance.disable(...args);\r\n  }\r\n\r\n  public engine(...args: any[]) {\r\n    return this.instance.engine(...args);\r\n  }\r\n\r\n  public useStaticAssets(path: string, options: ServeStaticOptions) {\r\n    if (options && options.prefix) {\r\n      return this.use(options.prefix, express.static(path, options));\r\n    }\r\n    return this.use(express.static(path, options));\r\n  }\r\n\r\n  public setBaseViewsDir(path: string | string[]) {\r\n    return this.set('views', path);\r\n  }\r\n\r\n  public setViewEngine(engine: string) {\r\n    return this.set('view engine', engine);\r\n  }\r\n\r\n  public getRequestHostname(request: any): string {\r\n    return request.hostname;\r\n  }\r\n\r\n  public getRequestMethod(request: any): string {\r\n    return request.method;\r\n  }\r\n\r\n  public getRequestUrl(request: any): string {\r\n    return request.originalUrl;\r\n  }\r\n\r\n  public enableCors(options: CorsOptions | CorsOptionsDelegate<any>) {\r\n    return this.use(cors(options));\r\n  }\r\n\r\n  public createMiddlewareFactory(\r\n    requestMethod: RequestMethod,\r\n  ): (path: string, callback: Function) => any {\r\n    return this.routerMethodFactory\r\n      .get(this.instance, requestMethod)\r\n      .bind(this.instance);\r\n  }\r\n\r\n  public initHttpServer(options: NestApplicationOptions) {\r\n    const isHttpsEnabled = options && options.httpsOptions;\r\n    if (isHttpsEnabled) {\r\n      this.httpServer = https.createServer(\r\n        options.httpsOptions,\r\n        this.getInstance(),\r\n      );\r\n    } else {\r\n      this.httpServer = http.createServer(this.getInstance());\r\n    }\r\n\r\n    if (options?.forceCloseConnections) {\r\n      this.trackOpenConnections();\r\n    }\r\n  }\r\n\r\n  public registerParserMiddleware(prefix?: string, rawBody?: boolean) {\r\n    const bodyParserJsonOptions = getBodyParserOptions(rawBody);\r\n    const bodyParserUrlencodedOptions = getBodyParserOptions(rawBody, {\r\n      extended: true,\r\n    });\r\n\r\n    const parserMiddleware = {\r\n      jsonParser: bodyParserJson(bodyParserJsonOptions),\r\n      urlencodedParser: bodyParserUrlencoded(bodyParserUrlencodedOptions),\r\n    };\r\n    Object.keys(parserMiddleware)\r\n      .filter(parser => !this.isMiddlewareApplied(parser))\r\n      .forEach(parserKey => this.use(parserMiddleware[parserKey]));\r\n  }\r\n\r\n  public useBodyParser<Options = NestExpressBodyParserOptions>(\r\n    type: NestExpressBodyParserType,\r\n    rawBody: boolean,\r\n    options?: Omit<Options, 'verify'>,\r\n  ): this {\r\n    const parserOptions = getBodyParserOptions<Options>(rawBody, options);\r\n    const parser = bodyparser[type](parserOptions);\r\n\r\n    this.use(parser);\r\n\r\n    return this;\r\n  }\r\n\r\n  public setLocal(key: string, value: any) {\r\n    this.instance.locals[key] = value;\r\n    return this;\r\n  }\r\n\r\n  public getType(): string {\r\n    return 'express';\r\n  }\r\n\r\n  public applyVersionFilter(\r\n    handler: Function,\r\n    version: VersionValue,\r\n    versioningOptions: VersioningOptions,\r\n  ): VersionedRoute {\r\n    const callNextHandler: VersionedRoute = (req, res, next) => {\r\n      if (!next) {\r\n        throw new InternalServerErrorException(\r\n          'HTTP adapter does not support filtering on version',\r\n        );\r\n      }\r\n      return next();\r\n    };\r\n\r\n    if (\r\n      version === VERSION_NEUTRAL ||\r\n      // URL Versioning is done via the path, so the filter continues forward\r\n      versioningOptions.type === VersioningType.URI\r\n    ) {\r\n      const handlerForNoVersioning: VersionedRoute = (req, res, next) =>\r\n        handler(req, res, next);\r\n\r\n      return handlerForNoVersioning;\r\n    }\r\n\r\n    // Custom Extractor Versioning Handler\r\n    if (versioningOptions.type === VersioningType.CUSTOM) {\r\n      const handlerForCustomVersioning: VersionedRoute = (req, res, next) => {\r\n        const extractedVersion = versioningOptions.extractor(req);\r\n\r\n        if (Array.isArray(version)) {\r\n          if (\r\n            Array.isArray(extractedVersion) &&\r\n            version.filter(v => extractedVersion.includes(v as string)).length\r\n          ) {\r\n            return handler(req, res, next);\r\n          }\r\n\r\n          if (\r\n            isString(extractedVersion) &&\r\n            version.includes(extractedVersion)\r\n          ) {\r\n            return handler(req, res, next);\r\n          }\r\n        } else if (isString(version)) {\r\n          // Known bug here - if there are multiple versions supported across separate\r\n          // handlers/controllers, we can't select the highest matching handler.\r\n          // Since this code is evaluated per-handler, then we can't see if the highest\r\n          // specified version exists in a different handler.\r\n          if (\r\n            Array.isArray(extractedVersion) &&\r\n            extractedVersion.includes(version)\r\n          ) {\r\n            return handler(req, res, next);\r\n          }\r\n\r\n          if (isString(extractedVersion) && version === extractedVersion) {\r\n            return handler(req, res, next);\r\n          }\r\n        }\r\n\r\n        return callNextHandler(req, res, next);\r\n      };\r\n\r\n      return handlerForCustomVersioning;\r\n    }\r\n\r\n    // Media Type (Accept Header) Versioning Handler\r\n    if (versioningOptions.type === VersioningType.MEDIA_TYPE) {\r\n      const handlerForMediaTypeVersioning: VersionedRoute = (\r\n        req,\r\n        res,\r\n        next,\r\n      ) => {\r\n        const MEDIA_TYPE_HEADER = 'Accept';\r\n        const acceptHeaderValue: string | undefined =\r\n          req.headers?.[MEDIA_TYPE_HEADER] ||\r\n          req.headers?.[MEDIA_TYPE_HEADER.toLowerCase()];\r\n\r\n        const acceptHeaderVersionParameter = acceptHeaderValue\r\n          ? acceptHeaderValue.split(';')[1]\r\n          : undefined;\r\n\r\n        // No version was supplied\r\n        if (isUndefined(acceptHeaderVersionParameter)) {\r\n          if (Array.isArray(version)) {\r\n            if (version.includes(VERSION_NEUTRAL)) {\r\n              return handler(req, res, next);\r\n            }\r\n          }\r\n        } else {\r\n          const headerVersion = acceptHeaderVersionParameter.split(\r\n            versioningOptions.key,\r\n          )[1];\r\n\r\n          if (Array.isArray(version)) {\r\n            if (version.includes(headerVersion)) {\r\n              return handler(req, res, next);\r\n            }\r\n          } else if (isString(version)) {\r\n            if (version === headerVersion) {\r\n              return handler(req, res, next);\r\n            }\r\n          }\r\n        }\r\n\r\n        return callNextHandler(req, res, next);\r\n      };\r\n\r\n      return handlerForMediaTypeVersioning;\r\n    }\r\n\r\n    // Header Versioning Handler\r\n    if (versioningOptions.type === VersioningType.HEADER) {\r\n      const handlerForHeaderVersioning: VersionedRoute = (req, res, next) => {\r\n        const customHeaderVersionParameter: string | undefined =\r\n          req.headers?.[versioningOptions.header] ||\r\n          req.headers?.[versioningOptions.header.toLowerCase()];\r\n\r\n        // No version was supplied\r\n        if (isUndefined(customHeaderVersionParameter)) {\r\n          if (Array.isArray(version)) {\r\n            if (version.includes(VERSION_NEUTRAL)) {\r\n              return handler(req, res, next);\r\n            }\r\n          }\r\n        } else {\r\n          if (Array.isArray(version)) {\r\n            if (version.includes(customHeaderVersionParameter)) {\r\n              return handler(req, res, next);\r\n            }\r\n          } else if (isString(version)) {\r\n            if (version === customHeaderVersionParameter) {\r\n              return handler(req, res, next);\r\n            }\r\n          }\r\n        }\r\n\r\n        return callNextHandler(req, res, next);\r\n      };\r\n\r\n      return handlerForHeaderVersioning;\r\n    }\r\n  }\r\n\r\n  private trackOpenConnections() {\r\n    this.httpServer.on('connection', (socket: Duplex) => {\r\n      this.openConnections.add(socket);\r\n\r\n      socket.on('close', () => this.openConnections.delete(socket));\r\n    });\r\n  }\r\n\r\n  private closeOpenConnections() {\r\n    for (const socket of this.openConnections) {\r\n      socket.destroy();\r\n      this.openConnections.delete(socket);\r\n    }\r\n  }\r\n\r\n  private isMiddlewareApplied(name: string): boolean {\r\n    const app = this.getInstance();\r\n    return (\r\n      !!app._router &&\r\n      !!app._router.stack &&\r\n      isFunction(app._router.stack.filter) &&\r\n      app._router.stack.some(\r\n        (layer: any) => layer && layer.handle && layer.handle.name === name,\r\n      )\r\n    );\r\n  }\r\n}\r\n"]}