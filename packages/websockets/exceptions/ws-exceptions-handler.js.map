{"version":3,"file":"ws-exceptions-handler.js","sourceRoot":"","sources":["ws-exceptions-handler.ts"],"names":[],"mappings":";;;AAAA,oEAA4D;AAG5D,sHAA2G;AAC3G,0HAAoH;AAEpH,yEAAmE;AAEnE;;GAEG;AACH,MAAa,mBAAoB,SAAQ,gDAAqB;IAA9D;;QACU,YAAO,GAA8B,EAAE,CAAC;IA2BlD,CAAC;IAzBQ,MAAM,CAAC,SAAoC,EAAE,IAAmB;QACrE,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC,SAAS,EAAE,CAAC;QAC7C,IAAI,IAAI,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE;YAC7D,OAAO;SACR;QACD,KAAK,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IAC/B,CAAC;IAEM,gBAAgB,CAAC,OAAkC;QACxD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YAC3B,MAAM,IAAI,oEAA+B,EAAE,CAAC;SAC7C;QACD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAEM,mBAAmB,CACxB,SAAY,EACZ,IAAmB;QAEnB,IAAI,IAAA,sBAAO,EAAC,IAAI,CAAC,OAAO,CAAC;YAAE,OAAO,KAAK,CAAC;QAExC,MAAM,MAAM,GAAG,IAAA,qEAA6B,EAAC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QACtE,MAAM,IAAI,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QACvC,OAAO,CAAC,CAAC,MAAM,CAAC;IAClB,CAAC;CACF;AA5BD,kDA4BC","sourcesContent":["import { isEmpty } from '@nestjs/common/utils/shared.utils';\r\nimport { ArgumentsHost } from '@nestjs/common';\r\nimport { ExceptionFilterMetadata } from '@nestjs/common/interfaces/exceptions/exception-filter-metadata.interface';\r\nimport { selectExceptionFilterMetadata } from '@nestjs/common/utils/select-exception-filter-metadata.util';\r\nimport { InvalidExceptionFilterException } from '@nestjs/core/errors/exceptions/invalid-exception-filter.exception';\r\nimport { WsException } from '../errors/ws-exception';\r\nimport { BaseWsExceptionFilter } from './base-ws-exception-filter';\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport class WsExceptionsHandler extends BaseWsExceptionFilter {\r\n  private filters: ExceptionFilterMetadata[] = [];\r\n\r\n  public handle(exception: Error | WsException | any, host: ArgumentsHost) {\r\n    const client = host.switchToWs().getClient();\r\n    if (this.invokeCustomFilters(exception, host) || !client.emit) {\r\n      return;\r\n    }\r\n    super.catch(exception, host);\r\n  }\r\n\r\n  public setCustomFilters(filters: ExceptionFilterMetadata[]) {\r\n    if (!Array.isArray(filters)) {\r\n      throw new InvalidExceptionFilterException();\r\n    }\r\n    this.filters = filters;\r\n  }\r\n\r\n  public invokeCustomFilters<T = any>(\r\n    exception: T,\r\n    args: ArgumentsHost,\r\n  ): boolean {\r\n    if (isEmpty(this.filters)) return false;\r\n\r\n    const filter = selectExceptionFilterMetadata(this.filters, exception);\r\n    filter && filter.func(exception, args);\r\n    return !!filter;\r\n  }\r\n}\r\n"]}