{"version":3,"file":"base-ws-exception-filter.js","sourceRoot":"","sources":["base-ws-exception-filter.ts"],"names":[],"mappings":";;;AAAA,2CAA0E;AAC1E,oEAA6D;AAC7D,sDAAkD;AAClD,yDAAqD;AAErD;;GAEG;AACH,MAAa,qBAAqB;IAKzB,KAAK,CAAC,SAAiB,EAAE,IAAmB;QACjD,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC,SAAS,EAAE,CAAC;QAC7C,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;IACtC,CAAC;IAEM,WAAW,CAChB,MAAe,EACf,SAAiB;QAEjB,IAAI,CAAC,CAAC,SAAS,YAAY,0BAAW,CAAC,EAAE;YACvC,OAAO,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;SACnD;QAED,MAAM,MAAM,GAAG,OAAO,CAAC;QACvB,MAAM,MAAM,GAAG,SAAS,CAAC,QAAQ,EAAE,CAAC;QACpC,MAAM,OAAO,GAAG,IAAA,uBAAQ,EAAC,MAAM,CAAC;YAC9B,CAAC,CAAC,MAAM;YACR,CAAC,CAAC;gBACE,MAAM;gBACN,OAAO,EAAE,MAAM;aAChB,CAAC;QAEN,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;IACpC,CAAC;IAEM,kBAAkB,CACvB,SAAiB,EACjB,MAAe;QAEf,MAAM,MAAM,GAAG,OAAO,CAAC;QACvB,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE;YACvB,MAAM;YACN,OAAO,EAAE,oBAAQ,CAAC,yBAAyB;SAC5C,CAAC,CAAC;QAEH,IAAI,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,EAAE;YACrC,OAAO,qBAAqB,CAAC,MAAM,CAAC,KAAK,CACvC,SAAS,CAAC,OAAO,EACjB,SAAS,CAAC,KAAK,CAChB,CAAC;SACH;QACD,OAAO,qBAAqB,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IACvD,CAAC;IAEM,iBAAiB,CAAC,GAAQ;QAC/B,OAAO,IAAA,uBAAQ,EAAC,GAAG,CAAC,IAAI,CAAC,CAAE,GAAa,CAAC,OAAO,CAAC;IACnD,CAAC;;AAnDH,sDAoDC;AAjDyB,4BAAM,GAAG,IAAI,eAAM,CAAC,qBAAqB,CAAC,CAAC","sourcesContent":["import { ArgumentsHost, Logger, WsExceptionFilter } from '@nestjs/common';\r\nimport { isObject } from '@nestjs/common/utils/shared.utils';\r\nimport { MESSAGES } from '@nestjs/core/constants';\r\nimport { WsException } from '../errors/ws-exception';\r\n\r\n/**\r\n * @publicApi\r\n */\r\nexport class BaseWsExceptionFilter<TError = any>\r\n  implements WsExceptionFilter<TError>\r\n{\r\n  private static readonly logger = new Logger('WsExceptionsHandler');\r\n\r\n  public catch(exception: TError, host: ArgumentsHost) {\r\n    const client = host.switchToWs().getClient();\r\n    this.handleError(client, exception);\r\n  }\r\n\r\n  public handleError<TClient extends { emit: Function }>(\r\n    client: TClient,\r\n    exception: TError,\r\n  ) {\r\n    if (!(exception instanceof WsException)) {\r\n      return this.handleUnknownError(exception, client);\r\n    }\r\n\r\n    const status = 'error';\r\n    const result = exception.getError();\r\n    const message = isObject(result)\r\n      ? result\r\n      : {\r\n          status,\r\n          message: result,\r\n        };\r\n\r\n    client.emit('exception', message);\r\n  }\r\n\r\n  public handleUnknownError<TClient extends { emit: Function }>(\r\n    exception: TError,\r\n    client: TClient,\r\n  ) {\r\n    const status = 'error';\r\n    client.emit('exception', {\r\n      status,\r\n      message: MESSAGES.UNKNOWN_EXCEPTION_MESSAGE,\r\n    });\r\n\r\n    if (this.isExceptionObject(exception)) {\r\n      return BaseWsExceptionFilter.logger.error(\r\n        exception.message,\r\n        exception.stack,\r\n      );\r\n    }\r\n    return BaseWsExceptionFilter.logger.error(exception);\r\n  }\r\n\r\n  public isExceptionObject(err: any): err is Error {\r\n    return isObject(err) && !!(err as Error).message;\r\n  }\r\n}\r\n"]}