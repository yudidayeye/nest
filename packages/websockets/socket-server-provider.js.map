{"version":3,"file":"socket-server-provider.js","sourceRoot":"","sources":["socket-server-provider.ts"],"names":[],"mappings":";;;AAAA,oEAA8E;AAE9E,mGAA4F;AAK5F,MAAa,oBAAoB;IAC/B,YACmB,gBAAkC,EAClC,iBAAoC;QADpC,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,sBAAiB,GAAjB,iBAAiB,CAAmB;IACpD,CAAC;IAEG,mBAAmB,CACxB,OAAU,EACV,IAAY;QAEZ,MAAM,oBAAoB,GAAG,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC;YAChE,IAAI;YACJ,IAAI,EAAE,OAAO,CAAC,IAAI;SACnB,CAAC,CAAC;QACH,IAAI,oBAAoB,IAAI,OAAO,CAAC,SAAS,EAAE;YAC7C,OAAO,IAAI,CAAC,qBAAqB,CAC/B,OAAO,EACP,IAAI,EACJ,oBAAoB,CAAC,MAAM,CAC5B,CAAC;SACH;QACD,OAAO,oBAAoB;YACzB,CAAC,CAAC,oBAAoB;YACtB,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAC7C,CAAC;IAEO,kBAAkB,CACxB,OAAU,EACV,IAAY;QAEZ,MAAM,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,CAAC;QACtD,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,GAAG,cAAc,EAAE,GAAG,OAGhD,CAAC;QACF,MAAM,QAAQ,GAAG,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;QACtD,MAAM,yBAAyB,GAC7B,+DAA4B,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAEhD,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAC1B,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC,IAAI,EAAE,EAC5B,yBAAyB,CAC1B,CAAC;QACF,IAAI,CAAC,SAAS,EAAE;YACd,OAAO,yBAAyB,CAAC;SAClC;QACD,OAAO,IAAI,CAAC,qBAAqB,CAAC,OAAO,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC7D,CAAC;IAEO,qBAAqB,CAC3B,OAAU,EACV,IAAY,EACZ,YAAqB;QAErB,MAAM,eAAe,GAAG,IAAI,CAAC,oBAAoB,CAC/C,OAAO,EACP,IAAI,EACJ,YAAY,CACb,CAAC;QACF,MAAM,yBAAyB,GAC7B,+DAA4B,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;QACvD,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAC1B,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC,IAAI,EAAE,SAAS,EAAE,OAAO,CAAC,SAAS,EAAE,EAC1D,yBAAyB,CAC1B,CAAC;QACF,OAAO,yBAAyB,CAAC;IACnC,CAAC;IAEO,oBAAoB,CAG1B,OAAiB,EAAE,IAAY,EAAE,MAAe;QAChD,MAAM,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,CAAC;QACtD,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE;YAC1B,GAAG,OAAO;YACV,SAAS,EAAE,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,SAAS,IAAI,EAAE,CAAC;YAC1D,MAAM;SACP,CAAC,CAAC;IACL,CAAC;IAEO,iBAAiB,CAAC,SAA0B;QAClD,IAAI,CAAC,IAAA,uBAAQ,EAAC,SAAS,CAAC,EAAE;YACxB,OAAO,SAAS,CAAC;SAClB;QACD,OAAO,IAAA,8BAAe,EAAC,SAAS,CAAC,CAAC;IACpC,CAAC;CACF;AAtFD,oDAsFC","sourcesContent":["import { addLeadingSlash, isString } from '@nestjs/common/utils/shared.utils';\r\nimport { ApplicationConfig } from '@nestjs/core/application-config';\r\nimport { ServerAndEventStreamsFactory } from './factories/server-and-event-streams-factory';\r\nimport { GatewayMetadata } from './interfaces/gateway-metadata.interface';\r\nimport { ServerAndEventStreamsHost } from './interfaces/server-and-event-streams-host.interface';\r\nimport { SocketsContainer } from './sockets-container';\r\n\r\nexport class SocketServerProvider {\r\n  constructor(\r\n    private readonly socketsContainer: SocketsContainer,\r\n    private readonly applicationConfig: ApplicationConfig,\r\n  ) {}\r\n\r\n  public scanForSocketServer<T extends GatewayMetadata = any>(\r\n    options: T,\r\n    port: number,\r\n  ): ServerAndEventStreamsHost {\r\n    const serverAndStreamsHost = this.socketsContainer.getOneByConfig({\r\n      port,\r\n      path: options.path,\r\n    });\r\n    if (serverAndStreamsHost && options.namespace) {\r\n      return this.decorateWithNamespace(\r\n        options,\r\n        port,\r\n        serverAndStreamsHost.server,\r\n      );\r\n    }\r\n    return serverAndStreamsHost\r\n      ? serverAndStreamsHost\r\n      : this.createSocketServer(options, port);\r\n  }\r\n\r\n  private createSocketServer<T extends GatewayMetadata>(\r\n    options: T,\r\n    port: number,\r\n  ): ServerAndEventStreamsHost {\r\n    const adapter = this.applicationConfig.getIoAdapter();\r\n    const { namespace, server, ...partialOptions } = options as Record<\r\n      string,\r\n      unknown\r\n    >;\r\n    const ioServer = adapter.create(port, partialOptions);\r\n    const serverAndEventStreamsHost =\r\n      ServerAndEventStreamsFactory.create(ioServer);\r\n\r\n    this.socketsContainer.addOne(\r\n      { port, path: options.path },\r\n      serverAndEventStreamsHost,\r\n    );\r\n    if (!namespace) {\r\n      return serverAndEventStreamsHost;\r\n    }\r\n    return this.decorateWithNamespace(options, port, ioServer);\r\n  }\r\n\r\n  private decorateWithNamespace<T extends GatewayMetadata = any>(\r\n    options: T,\r\n    port: number,\r\n    targetServer: unknown,\r\n  ): ServerAndEventStreamsHost {\r\n    const namespaceServer = this.getServerOfNamespace(\r\n      options,\r\n      port,\r\n      targetServer,\r\n    );\r\n    const serverAndEventStreamsHost =\r\n      ServerAndEventStreamsFactory.create(namespaceServer);\r\n    this.socketsContainer.addOne(\r\n      { port, path: options.path, namespace: options.namespace },\r\n      serverAndEventStreamsHost,\r\n    );\r\n    return serverAndEventStreamsHost;\r\n  }\r\n\r\n  private getServerOfNamespace<\r\n    TOptions extends GatewayMetadata = any,\r\n    TServer = any,\r\n  >(options: TOptions, port: number, server: TServer) {\r\n    const adapter = this.applicationConfig.getIoAdapter();\r\n    return adapter.create(port, {\r\n      ...options,\r\n      namespace: this.validateNamespace(options.namespace || ''),\r\n      server,\r\n    });\r\n  }\r\n\r\n  private validateNamespace(namespace: string | RegExp): string | RegExp {\r\n    if (!isString(namespace)) {\r\n      return namespace;\r\n    }\r\n    return addLeadingSlash(namespace);\r\n  }\r\n}\r\n"]}