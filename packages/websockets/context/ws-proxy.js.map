{"version":3,"file":"ws-proxy.js","sourceRoot":"","sources":["ws-proxy.ts"],"names":[],"mappings":";;;AAAA,wFAAmF;AACnF,+BAA2C;AAC3C,8CAA4C;AAG5C,MAAa,OAAO;IACX,MAAM,CACX,cAAoD,EACpD,iBAAsC;QAEtC,OAAO,KAAK,EAAE,GAAG,IAAe,EAAE,EAAE;YAClC,IAAI;gBACF,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,GAAG,IAAI,CAAC,CAAC;gBAC7C,OAAO,CAAC,IAAA,mBAAY,EAAC,MAAM,CAAC;oBAC1B,CAAC,CAAC,MAAM;oBACR,CAAC,CAAC,MAAM,CAAC,IAAI,CACT,IAAA,sBAAU,EAAC,KAAK,CAAC,EAAE;wBACjB,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;wBACjD,OAAO,YAAK,CAAC;oBACf,CAAC,CAAC,CACH,CAAC;aACP;YAAC,OAAO,KAAK,EAAE;gBACd,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;aAClD;QACH,CAAC,CAAC;IACJ,CAAC;IAED,WAAW,CACT,iBAAsC,EACtC,IAAe,EACf,KAAQ;QAER,MAAM,IAAI,GAAG,IAAI,6CAAoB,CAAC,IAAI,CAAC,CAAC;QAC5C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACnB,iBAAiB,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IACxC,CAAC;CACF;AA/BD,0BA+BC","sourcesContent":["import { ExecutionContextHost } from '@nestjs/core/helpers/execution-context-host';\r\nimport { EMPTY, isObservable } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { WsExceptionsHandler } from '../exceptions/ws-exceptions-handler';\r\n\r\nexport class WsProxy {\r\n  public create(\r\n    targetCallback: (...args: unknown[]) => Promise<any>,\r\n    exceptionsHandler: WsExceptionsHandler,\r\n  ): (...args: unknown[]) => Promise<any> {\r\n    return async (...args: unknown[]) => {\r\n      try {\r\n        const result = await targetCallback(...args);\r\n        return !isObservable(result)\r\n          ? result\r\n          : result.pipe(\r\n              catchError(error => {\r\n                this.handleError(exceptionsHandler, args, error);\r\n                return EMPTY;\r\n              }),\r\n            );\r\n      } catch (error) {\r\n        this.handleError(exceptionsHandler, args, error);\r\n      }\r\n    };\r\n  }\r\n\r\n  handleError<T>(\r\n    exceptionsHandler: WsExceptionsHandler,\r\n    args: unknown[],\r\n    error: T,\r\n  ) {\r\n    const host = new ExecutionContextHost(args);\r\n    host.setType('ws');\r\n    exceptionsHandler.handle(error, host);\r\n  }\r\n}\r\n"]}