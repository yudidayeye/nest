{"version":3,"file":"ws-context-creator.js","sourceRoot":"","sources":["ws-context-creator.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  CUSTOM_ROUTE_ARGS_METADATA,\r\n  PARAMTYPES_METADATA,\r\n} from '@nestjs/common/constants';\r\nimport {\r\n  ContextType,\r\n  Controller,\r\n  PipeTransform,\r\n} from '@nestjs/common/interfaces';\r\nimport { isEmpty } from '@nestjs/common/utils/shared.utils';\r\nimport { FORBIDDEN_MESSAGE } from '@nestjs/core/guards/constants';\r\nimport { GuardsConsumer } from '@nestjs/core/guards/guards-consumer';\r\nimport { GuardsContextCreator } from '@nestjs/core/guards/guards-context-creator';\r\nimport {\r\n  ContextUtils,\r\n  ParamProperties,\r\n} from '@nestjs/core/helpers/context-utils';\r\nimport { ExecutionContextHost } from '@nestjs/core/helpers/execution-context-host';\r\nimport { HandlerMetadataStorage } from '@nestjs/core/helpers/handler-metadata-storage';\r\nimport { ParamsMetadata } from '@nestjs/core/helpers/interfaces';\r\nimport {\r\n  InterceptorsConsumer,\r\n  InterceptorsContextCreator,\r\n} from '@nestjs/core/interceptors';\r\nimport { PipesConsumer, PipesContextCreator } from '@nestjs/core/pipes';\r\nimport { MESSAGE_METADATA, PARAM_ARGS_METADATA } from '../constants';\r\nimport { WsException } from '../errors/ws-exception';\r\nimport { WsParamsFactory } from '../factories/ws-params-factory';\r\nimport { ExceptionFiltersContext } from './exception-filters-context';\r\nimport { DEFAULT_CALLBACK_METADATA } from './ws-metadata-constants';\r\nimport { WsProxy } from './ws-proxy';\r\n\r\ntype WsParamProperties = ParamProperties & { metatype?: any };\r\nexport interface WsHandlerMetadata {\r\n  argsLength: number;\r\n  paramtypes: any[];\r\n  getParamsMetadata: (moduleKey: string) => WsParamProperties[];\r\n}\r\n\r\nexport class WsContextCreator {\r\n  private readonly contextUtils = new ContextUtils();\r\n  private readonly wsParamsFactory = new WsParamsFactory();\r\n  private readonly handlerMetadataStorage =\r\n    new HandlerMetadataStorage<WsHandlerMetadata>();\r\n\r\n  constructor(\r\n    private readonly wsProxy: WsProxy,\r\n    private readonly exceptionFiltersContext: ExceptionFiltersContext,\r\n    private readonly pipesContextCreator: PipesContextCreator,\r\n    private readonly pipesConsumer: PipesConsumer,\r\n    private readonly guardsContextCreator: GuardsContextCreator,\r\n    private readonly guardsConsumer: GuardsConsumer,\r\n    private readonly interceptorsContextCreator: InterceptorsContextCreator,\r\n    private readonly interceptorsConsumer: InterceptorsConsumer,\r\n  ) {}\r\n\r\n  public create<T extends ParamsMetadata = ParamsMetadata>(\r\n    instance: Controller,\r\n    callback: (...args: unknown[]) => void,\r\n    moduleKey: string,\r\n    methodName: string,\r\n  ): (...args: any[]) => Promise<void> {\r\n    const contextType: ContextType = 'ws';\r\n    const { argsLength, paramtypes, getParamsMetadata } = this.getMetadata<T>(\r\n      instance,\r\n      methodName,\r\n      contextType,\r\n    );\r\n    const exceptionHandler = this.exceptionFiltersContext.create(\r\n      instance,\r\n      callback,\r\n      moduleKey,\r\n    );\r\n    const pipes = this.pipesContextCreator.create(\r\n      instance,\r\n      callback,\r\n      moduleKey,\r\n    );\r\n    const guards = this.guardsContextCreator.create(\r\n      instance,\r\n      callback,\r\n      moduleKey,\r\n    );\r\n    const interceptors = this.interceptorsContextCreator.create(\r\n      instance,\r\n      callback,\r\n      moduleKey,\r\n    );\r\n\r\n    const paramsMetadata = getParamsMetadata(moduleKey);\r\n    const paramsOptions = paramsMetadata\r\n      ? this.contextUtils.mergeParamsMetatypes(paramsMetadata, paramtypes)\r\n      : [];\r\n    const fnApplyPipes = this.createPipesFn(pipes, paramsOptions);\r\n\r\n    const fnCanActivate = this.createGuardsFn(\r\n      guards,\r\n      instance,\r\n      callback,\r\n      contextType,\r\n    );\r\n\r\n    const handler = (initialArgs: unknown[], args: unknown[]) => async () => {\r\n      if (fnApplyPipes) {\r\n        await fnApplyPipes(initialArgs, ...args);\r\n        return callback.apply(instance, initialArgs);\r\n      }\r\n      return callback.apply(instance, args);\r\n    };\r\n\r\n    return this.wsProxy.create(async (...args: unknown[]) => {\r\n      args.push(this.reflectCallbackPattern(callback));\r\n\r\n      const initialArgs = this.contextUtils.createNullArray(argsLength);\r\n      fnCanActivate && (await fnCanActivate(args));\r\n\r\n      return this.interceptorsConsumer.intercept(\r\n        interceptors,\r\n        args,\r\n        instance,\r\n        callback,\r\n        handler(initialArgs, args),\r\n        contextType,\r\n      );\r\n    }, exceptionHandler);\r\n  }\r\n\r\n  public reflectCallbackParamtypes(\r\n    instance: Controller,\r\n    callback: (...args: any[]) => any,\r\n  ): any[] {\r\n    return Reflect.getMetadata(PARAMTYPES_METADATA, instance, callback.name);\r\n  }\r\n\r\n  public reflectCallbackPattern(callback: (...args: any[]) => any): string {\r\n    return Reflect.getMetadata(MESSAGE_METADATA, callback);\r\n  }\r\n\r\n  public createGuardsFn<TContext extends string = ContextType>(\r\n    guards: any[],\r\n    instance: Controller,\r\n    callback: (...args: unknown[]) => any,\r\n    contextType?: TContext,\r\n  ): Function | null {\r\n    const canActivateFn = async (args: any[]) => {\r\n      const canActivate = await this.guardsConsumer.tryActivate<TContext>(\r\n        guards,\r\n        args,\r\n        instance,\r\n        callback,\r\n        contextType,\r\n      );\r\n      if (!canActivate) {\r\n        throw new WsException(FORBIDDEN_MESSAGE);\r\n      }\r\n    };\r\n    return guards.length ? canActivateFn : null;\r\n  }\r\n\r\n  public getMetadata<TMetadata, TContext extends ContextType = ContextType>(\r\n    instance: Controller,\r\n    methodName: string,\r\n    contextType: TContext,\r\n  ): WsHandlerMetadata {\r\n    const cacheMetadata = this.handlerMetadataStorage.get(instance, methodName);\r\n    if (cacheMetadata) {\r\n      return cacheMetadata;\r\n    }\r\n    const metadata =\r\n      this.contextUtils.reflectCallbackMetadata<TMetadata>(\r\n        instance,\r\n        methodName,\r\n        PARAM_ARGS_METADATA,\r\n      ) || DEFAULT_CALLBACK_METADATA;\r\n    const keys = Object.keys(metadata);\r\n    const argsLength = this.contextUtils.getArgumentsLength(keys, metadata);\r\n    const paramtypes = this.contextUtils.reflectCallbackParamtypes(\r\n      instance,\r\n      methodName,\r\n    );\r\n    const contextFactory = this.contextUtils.getContextFactory(\r\n      contextType,\r\n      instance,\r\n      instance[methodName],\r\n    );\r\n    const getParamsMetadata = (moduleKey: string) =>\r\n      this.exchangeKeysForValues(\r\n        keys,\r\n        metadata,\r\n        moduleKey,\r\n        this.wsParamsFactory,\r\n        contextFactory,\r\n      );\r\n\r\n    const handlerMetadata: WsHandlerMetadata = {\r\n      argsLength,\r\n      paramtypes,\r\n      getParamsMetadata,\r\n    };\r\n    this.handlerMetadataStorage.set(instance, methodName, handlerMetadata);\r\n    return handlerMetadata;\r\n  }\r\n\r\n  public exchangeKeysForValues<TMetadata = any>(\r\n    keys: string[],\r\n    metadata: TMetadata,\r\n    moduleContext: string,\r\n    paramsFactory: WsParamsFactory,\r\n    contextFactory: (args: unknown[]) => ExecutionContextHost,\r\n  ): ParamProperties[] {\r\n    this.pipesContextCreator.setModuleContext(moduleContext);\r\n\r\n    return keys.map(key => {\r\n      const { index, data, pipes: pipesCollection } = metadata[key];\r\n      const pipes =\r\n        this.pipesContextCreator.createConcreteContext(pipesCollection);\r\n      const type = this.contextUtils.mapParamType(key);\r\n\r\n      if (key.includes(CUSTOM_ROUTE_ARGS_METADATA)) {\r\n        const { factory } = metadata[key];\r\n        const customExtractValue = this.contextUtils.getCustomFactory(\r\n          factory,\r\n          data,\r\n          contextFactory,\r\n        );\r\n        return { index, extractValue: customExtractValue, type, data, pipes };\r\n      }\r\n      const numericType = Number(type);\r\n      const extractValue = (...args: any[]) =>\r\n        paramsFactory.exchangeKeyForValue(numericType, data, args);\r\n\r\n      return { index, extractValue, type: numericType, data, pipes };\r\n    });\r\n  }\r\n\r\n  public createPipesFn(\r\n    pipes: PipeTransform[],\r\n    paramsOptions: (ParamProperties & { metatype?: unknown })[],\r\n  ) {\r\n    const pipesFn = async (args: unknown[], ...params: unknown[]) => {\r\n      const resolveParamValue = async (\r\n        param: ParamProperties & { metatype?: unknown },\r\n      ) => {\r\n        const {\r\n          index,\r\n          extractValue,\r\n          type,\r\n          data,\r\n          metatype,\r\n          pipes: paramPipes,\r\n        } = param;\r\n        const value = extractValue(...params);\r\n\r\n        args[index] = await this.getParamValue(\r\n          value,\r\n          { metatype, type, data },\r\n          pipes.concat(paramPipes),\r\n        );\r\n      };\r\n      await Promise.all(paramsOptions.map(resolveParamValue));\r\n    };\r\n    return paramsOptions.length ? pipesFn : null;\r\n  }\r\n\r\n  public async getParamValue<T>(\r\n    value: T,\r\n    { metatype, type, data }: { metatype: any; type: any; data: any },\r\n    pipes: PipeTransform[],\r\n  ): Promise<any> {\r\n    return isEmpty(pipes)\r\n      ? value\r\n      : this.pipesConsumer.apply(value, { metatype, type, data }, pipes);\r\n  }\r\n}\r\n"]}