{"version":3,"file":"message-body.decorator.js","sourceRoot":"","sources":["message-body.decorator.ts"],"names":[],"mappings":";;;AACA,kEAAyD;AACzD,sDAAmE;AAmDnE,SAAgB,WAAW,CACzB,cAA+D,EAC/D,GAAG,KAA8C;IAEjD,OAAO,IAAA,yCAA2B,EAAC,+BAAW,CAAC,OAAO,CAAC,CACrD,cAAc,EACd,GAAG,KAAK,CACT,CAAC;AACJ,CAAC;AARD,kCAQC","sourcesContent":["import { PipeTransform, Type } from '@nestjs/common';\r\nimport { WsParamtype } from '../enums/ws-paramtype.enum';\r\nimport { createPipesWsParamDecorator } from '../utils/param.utils';\r\n\r\n/**\r\n * WebSockets message body parameter decorator.\r\n *\r\n * @publicApi\r\n */\r\nexport function MessageBody(): ParameterDecorator;\r\n/**\r\n * WebSockets message body parameter decorator.\r\n *\r\n * Example:\r\n * ```typescript\r\n * create(@MessageBody(new ValidationPipe()) createDto: CreateCatDto)\r\n * ```\r\n * @param pipes one or more pipes - either instances or classes - to apply to\r\n * the bound parameter.\r\n *\r\n * @publicApi\r\n */\r\nexport function MessageBody(\r\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\r\n): ParameterDecorator;\r\n/**\r\n * WebSockets message body parameter decorator. Extracts a property from the\r\n * message payload object. May also apply pipes to the bound parameter.\r\n *\r\n * For example, extracting all params:\r\n * ```typescript\r\n * findMany(@MessageBody() ids: string[])\r\n * ```\r\n *\r\n * For example, extracting a single param:\r\n * ```typescript\r\n * create(@MessageBody('data') createDto: { data: string })\r\n * ```\r\n *\r\n * For example, extracting a single param with pipe:\r\n * ```typescript\r\n * create(@MessageBody('data', new ValidationPipe()) createDto: { data: string })\r\n * ```\r\n * @param propertyKey name of single property to extract from the message payload\r\n * @param pipes one or more pipes - either instances or classes - to apply to\r\n * the bound parameter.\r\n *\r\n * @publicApi\r\n */\r\nexport function MessageBody(\r\n  propertyKey: string,\r\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\r\n): ParameterDecorator;\r\nexport function MessageBody(\r\n  propertyOrPipe?: string | (Type<PipeTransform> | PipeTransform),\r\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\r\n): ParameterDecorator {\r\n  return createPipesWsParamDecorator(WsParamtype.PAYLOAD)(\r\n    propertyOrPipe,\r\n    ...pipes,\r\n  );\r\n}\r\n"]}