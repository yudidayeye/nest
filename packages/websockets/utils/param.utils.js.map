{"version":3,"file":"param.utils.js","sourceRoot":"","sources":["param.utils.ts"],"names":[],"mappings":";;;AACA,kGAAuF;AACvF,oEAAoE;AACpE,4BAA0B;AAC1B,4CAAmD;AAGnD,SAAgB,sBAAsB,CACpC,SAAsB;IAEtB,OAAO,CAAC,GAAG,KAA8C,EAAE,EAAE,CAC3D,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE;QACrB,MAAM,IAAI,GACR,OAAO,CAAC,WAAW,CAAC,+BAAmB,EAAE,MAAM,CAAC,WAAW,EAAE,GAAG,CAAC,IAAI,EAAE,CAAC;QAC1E,OAAO,CAAC,cAAc,CACpB,+BAAmB,EACnB,IAAA,uCAAc,EAAC,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,KAAK,CAAC,EAC3D,MAAM,CAAC,WAAW,EAClB,GAAG,CACJ,CAAC;IACJ,CAAC,CAAC;AACN,CAAC;AAdD,wDAcC;AAEM,MAAM,2BAA2B,GACtC,CAAC,SAAsB,EAAE,EAAE,CAC3B,CACE,IAAU,EACV,GAAG,KAA8C,EAC7B,EAAE,CACxB,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE;IACrB,MAAM,IAAI,GACR,OAAO,CAAC,WAAW,CAAC,+BAAmB,EAAE,MAAM,CAAC,WAAW,EAAE,GAAG,CAAC,IAAI,EAAE,CAAC;IAC1E,MAAM,YAAY,GAAG,IAAA,oBAAK,EAAC,IAAI,CAAC,IAAI,IAAA,uBAAQ,EAAC,IAAI,CAAC,CAAC;IACnD,MAAM,SAAS,GAAG,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC;IAClD,MAAM,UAAU,GAAG,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,GAAG,KAAK,CAAC,CAAC;IAE3D,OAAO,CAAC,cAAc,CACpB,+BAAmB,EACnB,IAAA,uCAAc,EAAC,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,UAAU,CAAC,EAChE,MAAM,CAAC,WAAW,EAClB,GAAG,CACJ,CAAC;AACJ,CAAC,CAAC;AAnBS,QAAA,2BAA2B,+BAmBpC","sourcesContent":["import { PipeTransform, Type } from '@nestjs/common';\r\nimport { assignMetadata } from '@nestjs/common/decorators/http/route-params.decorator';\r\nimport { isNil, isString } from '@nestjs/common/utils/shared.utils';\r\nimport 'reflect-metadata';\r\nimport { PARAM_ARGS_METADATA } from '../constants';\r\nimport { WsParamtype } from '../enums/ws-paramtype.enum';\r\n\r\nexport function createWsParamDecorator(\r\n  paramtype: WsParamtype,\r\n): (...pipes: (Type<PipeTransform> | PipeTransform)[]) => ParameterDecorator {\r\n  return (...pipes: (Type<PipeTransform> | PipeTransform)[]) =>\r\n    (target, key, index) => {\r\n      const args =\r\n        Reflect.getMetadata(PARAM_ARGS_METADATA, target.constructor, key) || {};\r\n      Reflect.defineMetadata(\r\n        PARAM_ARGS_METADATA,\r\n        assignMetadata(args, paramtype, index, undefined, ...pipes),\r\n        target.constructor,\r\n        key,\r\n      );\r\n    };\r\n}\r\n\r\nexport const createPipesWsParamDecorator =\r\n  (paramtype: WsParamtype) =>\r\n  (\r\n    data?: any,\r\n    ...pipes: (Type<PipeTransform> | PipeTransform)[]\r\n  ): ParameterDecorator =>\r\n  (target, key, index) => {\r\n    const args =\r\n      Reflect.getMetadata(PARAM_ARGS_METADATA, target.constructor, key) || {};\r\n    const hasParamData = isNil(data) || isString(data);\r\n    const paramData = hasParamData ? data : undefined;\r\n    const paramPipes = hasParamData ? pipes : [data, ...pipes];\r\n\r\n    Reflect.defineMetadata(\r\n      PARAM_ARGS_METADATA,\r\n      assignMetadata(args, paramtype, index, paramData, ...paramPipes),\r\n      target.constructor,\r\n      key,\r\n    );\r\n  };\r\n"]}