{"version":3,"file":"ws-adapter.js","sourceRoot":"","sources":["ws-adapter.ts"],"names":[],"mappings":";;;AAEA,oEAA+D;AAC/D,uCAA+C;AAE/C,4CAAkE;AAOlE,MAAsB,iBAAiB;IAQrC,YAAY,eAA+C;QACzD,IAAI,eAAe,IAAI,eAAe,YAAY,sBAAe,EAAE;YACjE,IAAI,CAAC,UAAU,GAAG,eAAe,CAAC,uBAAuB,EAAE,CAAC;SAC7D;aAAM;YACL,IAAI,CAAC,UAAU,GAAG,eAAe,CAAC;SACnC;IACH,CAAC;IAEM,iBAAiB,CAAC,MAAe,EAAE,QAAkB;QAC1D,MAAM,CAAC,EAAE,CAAC,4BAAgB,EAAE,QAAQ,CAAC,CAAC;IACxC,CAAC;IAEM,oBAAoB,CAAC,MAAe,EAAE,QAAkB;QAC7D,MAAM,CAAC,EAAE,CAAC,4BAAgB,EAAE,QAAQ,CAAC,CAAC;IACxC,CAAC;IAEM,KAAK,CAAC,KAAK,CAAC,MAAe;QAChC,MAAM,UAAU,GAAG,MAAM,IAAI,IAAA,yBAAU,EAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACtD,UAAU,IAAI,CAAC,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IACtE,CAAC;IAED,gEAAgE;IACzD,KAAK,CAAC,OAAO,KAAI,CAAC;CAQ1B;AAtCD,8CAsCC","sourcesContent":["import { INestApplicationContext, WebSocketAdapter } from '@nestjs/common';\r\nimport { WsMessageHandler } from '@nestjs/common/interfaces';\r\nimport { isFunction } from '@nestjs/common/utils/shared.utils';\r\nimport { NestApplication } from '@nestjs/core';\r\nimport { Observable } from 'rxjs';\r\nimport { CONNECTION_EVENT, DISCONNECT_EVENT } from '../constants';\r\n\r\nexport interface BaseWsInstance {\r\n  on: (event: string, callback: Function) => void;\r\n  close: Function;\r\n}\r\n\r\nexport abstract class AbstractWsAdapter<\r\n  TServer extends BaseWsInstance = any,\r\n  TClient extends BaseWsInstance = any,\r\n  TOptions = any,\r\n> implements WebSocketAdapter<TServer, TClient, TOptions>\r\n{\r\n  protected readonly httpServer: any;\r\n\r\n  constructor(appOrHttpServer?: INestApplicationContext | any) {\r\n    if (appOrHttpServer && appOrHttpServer instanceof NestApplication) {\r\n      this.httpServer = appOrHttpServer.getUnderlyingHttpServer();\r\n    } else {\r\n      this.httpServer = appOrHttpServer;\r\n    }\r\n  }\r\n\r\n  public bindClientConnect(server: TServer, callback: Function) {\r\n    server.on(CONNECTION_EVENT, callback);\r\n  }\r\n\r\n  public bindClientDisconnect(client: TClient, callback: Function) {\r\n    client.on(DISCONNECT_EVENT, callback);\r\n  }\r\n\r\n  public async close(server: TServer) {\r\n    const isCallable = server && isFunction(server.close);\r\n    isCallable && (await new Promise(resolve => server.close(resolve)));\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  public async dispose() {}\r\n\r\n  public abstract create(port: number, options?: TOptions): TServer;\r\n  public abstract bindMessageHandlers(\r\n    client: TClient,\r\n    handlers: WsMessageHandler[],\r\n    transform: (data: any) => Observable<any>,\r\n  );\r\n}\r\n"]}